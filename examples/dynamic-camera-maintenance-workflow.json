{
  "name": "Dynamic Axis Camera Maintenance (Loop-based)",
  "description": "Scalable camera maintenance using loops - handles any number of cameras",
  "flow_version": 2,
  "targets": [
    {
      "id": "camera-network",
      "name": "Camera Network",
      "hostname": "localhost",
      "os_type": "auto",
      "default_connection": "local"
    },
    {
      "id": "log-server",
      "name": "Log Server",
      "hostname": "192.168.1.50",
      "os_type": "linux",
      "default_connection": "ssh",
      "username": "loguser",
      "private_key": "/path/to/logserver.key"
    }
  ],
  "blocks": [
    {
      "id": "schedule-trigger-1",
      "type": "trigger.schedule",
      "position": {"x": 100, "y": 100},
      "config": {
        "cron_expression": "0 8 * * MON",
        "timezone": "America/New_York",
        "enabled": true
      }
    },
    {
      "id": "start-1",
      "type": "flow.start",
      "position": {"x": 300, "y": 100},
      "config": {
        "name": "Dynamic Camera Maintenance",
        "trigger_types": ["schedule", "manual"]
      }
    },
    {
      "id": "load-camera-config-1",
      "type": "action.file_operation",
      "position": {"x": 500, "y": 100},
      "config": {
        "target": "log-server",
        "connection_method": "ssh",
        "operation": "read",
        "source_path": "/etc/camera-maintenance/cameras.json",
        "encoding": "utf-8"
      }
    },
    {
      "id": "parse-camera-list-1",
      "type": "data.transform",
      "position": {"x": 700, "y": 100},
      "config": {
        "script": "// Parse camera configuration file\ntry {\n  const cameraConfig = JSON.parse(input.result.data);\n  \n  // Validate and format camera list\n  const cameras = cameraConfig.cameras.map(camera => ({\n    id: camera.id,\n    name: camera.name,\n    ip: camera.ip,\n    username: camera.username || 'admin',\n    password: camera.password,\n    api_base: `http://${camera.ip}`,\n    ptz_endpoint: '/axis-cgi/com/ptz.cgi',\n    enabled: camera.enabled !== false\n  })).filter(camera => camera.enabled);\n  \n  return {\n    cameras: cameras,\n    total_cameras: cameras.length,\n    maintenance_date: new Date().toISOString(),\n    config_loaded: true\n  };\n} catch (error) {\n  // Fallback to hardcoded list if config file fails\n  const fallbackCameras = [\n    { id: 'camera-01', name: 'Lobby Camera', ip: '192.168.1.101', username: 'admin', password: 'admin123' },\n    { id: 'camera-02', name: 'Parking Lot Camera', ip: '192.168.1.102', username: 'admin', password: 'admin123' },\n    { id: 'camera-03', name: 'Entrance Camera', ip: '192.168.1.103', username: 'admin', password: 'admin123' }\n  ].map(camera => ({\n    ...camera,\n    api_base: `http://${camera.ip}`,\n    ptz_endpoint: '/axis-cgi/com/ptz.cgi',\n    enabled: true\n  }));\n  \n  return {\n    cameras: fallbackCameras,\n    total_cameras: fallbackCameras.length,\n    maintenance_date: new Date().toISOString(),\n    config_loaded: false,\n    fallback_used: true,\n    error: error.message\n  };\n}"
      }
    },
    {
      "id": "camera-loop-start-1",
      "type": "data.transform",
      "position": {"x": 900, "y": 100},
      "config": {
        "script": "// Initialize camera processing loop\nconst cameras = input.cameras || [];\nconst results = [];\n\nreturn {\n  cameras_to_process: cameras,\n  current_index: 0,\n  results: results,\n  total_cameras: cameras.length,\n  start_time: new Date().toISOString()\n};"
      }
    },
    {
      "id": "get-current-camera-1",
      "type": "data.transform",
      "position": {"x": 1100, "y": 100},
      "config": {
        "script": "// Get current camera to process\nconst cameras = input.cameras_to_process || [];\nconst currentIndex = input.current_index || 0;\n\nif (currentIndex >= cameras.length) {\n  return {\n    processing_complete: true,\n    current_camera: null,\n    remaining_cameras: 0\n  };\n}\n\nconst currentCamera = cameras[currentIndex];\n\nreturn {\n  processing_complete: false,\n  current_camera: currentCamera,\n  current_index: currentIndex,\n  remaining_cameras: cameras.length - currentIndex - 1,\n  progress: `${currentIndex + 1}/${cameras.length}`\n};"
      }
    },
    {
      "id": "camera-autofocus-1",
      "type": "action.http_request",
      "position": {"x": 1300, "y": 50},
      "config": {
        "method": "POST",
        "url": "{{data.current_camera.api_base}}{{data.current_camera.ptz_endpoint}}",
        "headers": {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        "authentication": {
          "type": "basic",
          "username": "{{data.current_camera.username}}",
          "password": "{{data.current_camera.password}}"
        },
        "body": "autofocus=on",
        "timeout_seconds": 30,
        "retry_attempts": 2
      }
    },
    {
      "id": "camera-ptz-home-1",
      "type": "action.http_request",
      "position": {"x": 1500, "y": 50},
      "config": {
        "method": "POST",
        "url": "{{data.current_camera.api_base}}{{data.current_camera.ptz_endpoint}}",
        "headers": {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        "authentication": {
          "type": "basic",
          "username": "{{data.current_camera.username}}",
          "password": "{{data.current_camera.password}}"
        },
        "body": "move=home",
        "timeout_seconds": 30,
        "retry_attempts": 2
      }
    },
    {
      "id": "record-camera-result-1",
      "type": "data.transform",
      "position": {"x": 1700, "y": 100},
      "config": {
        "script": "// Record results for current camera\nconst camera = input.current_camera;\nconst autofocusResult = input.autofocus_result || {};\nconst ptzResult = input.ptz_result || {};\nconst existingResults = input.existing_results || [];\n\n// Create result record for this camera\nconst cameraResult = {\n  camera_id: camera.id,\n  camera_name: camera.name,\n  camera_ip: camera.ip,\n  autofocus: {\n    success: autofocusResult.success || false,\n    status_code: autofocusResult.response?.status || 'unknown',\n    error: autofocusResult.error || null\n  },\n  ptz_home: {\n    success: ptzResult.success || false,\n    status_code: ptzResult.response?.status || 'unknown',\n    error: ptzResult.error || null\n  },\n  overall_success: (autofocusResult.success || false) && (ptzResult.success || false),\n  processed_at: new Date().toISOString()\n};\n\n// Add to results array\nconst updatedResults = [...existingResults, cameraResult];\n\nreturn {\n  camera_result: cameraResult,\n  all_results: updatedResults,\n  cameras_processed: updatedResults.length,\n  current_index: input.current_index + 1\n};"
      }
    },
    {
      "id": "check-loop-complete-1",
      "type": "logic.if",
      "position": {"x": 1900, "y": 100},
      "config": {
        "condition": "{{data.current_index}} >= {{data.total_cameras}}"
      }
    },
    {
      "id": "loop-back-1",
      "type": "data.transform",
      "position": {"x": 1100, "y": 200},
      "config": {
        "script": "// Continue loop with updated state\nreturn {\n  cameras_to_process: input.cameras_to_process,\n  current_index: input.current_index,\n  results: input.all_results,\n  total_cameras: input.total_cameras\n};"
      }
    },
    {
      "id": "generate-summary-1",
      "type": "data.transform",
      "position": {"x": 2100, "y": 100},
      "config": {
        "script": "// Generate maintenance summary\nconst results = input.all_results || [];\nconst totalCameras = results.length;\nconst successfulCameras = results.filter(r => r.overall_success).length;\nconst failedCameras = totalCameras - successfulCameras;\n\n// Calculate operation-level stats\nconst totalOperations = totalCameras * 2; // autofocus + ptz\nconst successfulOperations = results.reduce((count, r) => {\n  return count + (r.autofocus.success ? 1 : 0) + (r.ptz_home.success ? 1 : 0);\n}, 0);\n\n// Group failures by type\nconst autofocusFailures = results.filter(r => !r.autofocus.success);\nconst ptzFailures = results.filter(r => !r.ptz_home.success);\n\nreturn {\n  summary: {\n    total_cameras: totalCameras,\n    successful_cameras: successfulCameras,\n    failed_cameras: failedCameras,\n    success_rate: totalCameras > 0 ? (successfulCameras / totalCameras * 100).toFixed(1) + '%' : '0%',\n    total_operations: totalOperations,\n    successful_operations: successfulOperations,\n    operation_success_rate: totalOperations > 0 ? (successfulOperations / totalOperations * 100).toFixed(1) + '%' : '0%'\n  },\n  failures: {\n    autofocus_failures: autofocusFailures.length,\n    ptz_failures: ptzFailures.length,\n    failed_cameras: results.filter(r => !r.overall_success).map(r => ({\n      id: r.camera_id,\n      name: r.camera_name,\n      ip: r.camera_ip,\n      autofocus_error: r.autofocus.error,\n      ptz_error: r.ptz_home.error\n    }))\n  },\n  detailed_results: results,\n  maintenance_completed_at: new Date().toISOString()\n};"
      }
    },
    {
      "id": "write-detailed-log-1",
      "type": "action.file_operation",
      "position": {"x": 2300, "y": 50},
      "config": {
        "target": "log-server",
        "connection_method": "ssh",
        "operation": "write",
        "source_path": "/var/log/camera-maintenance/detailed-{{date}}.json",
        "create_directories": true,
        "overwrite_existing": true,
        "encoding": "utf-8"
      }
    },
    {
      "id": "write-summary-log-1",
      "type": "action.file_operation",
      "position": {"x": 2300, "y": 150},
      "config": {
        "target": "log-server",
        "connection_method": "ssh",
        "operation": "write",
        "source_path": "/var/log/camera-maintenance/summary-{{date}}.log",
        "create_directories": true,
        "overwrite_existing": false,
        "encoding": "utf-8"
      }
    },
    {
      "id": "format-summary-log-1",
      "type": "data.transform",
      "position": {"x": 2100, "y": 200},
      "config": {
        "script": "// Format human-readable summary log\nconst data = input.maintenance_summary;\nconst timestamp = new Date().toISOString();\n\nlet logContent = `\\n=== Camera Maintenance Summary - ${timestamp} ===\\n`;\nlogContent += `Total Cameras: ${data.summary.total_cameras}\\n`;\nlogContent += `Successful: ${data.summary.successful_cameras} (${data.summary.success_rate})\\n`;\nlogContent += `Failed: ${data.summary.failed_cameras}\\n`;\nlogContent += `Operation Success Rate: ${data.summary.operation_success_rate}\\n\\n`;\n\nif (data.failures.failed_cameras.length > 0) {\n  logContent += `Failed Cameras:\\n`;\n  data.failures.failed_cameras.forEach(camera => {\n    logContent += `  - ${camera.name} (${camera.ip}):\\n`;\n    if (camera.autofocus_error) logContent += `    Autofocus: ${camera.autofocus_error}\\n`;\n    if (camera.ptz_error) logContent += `    PTZ Home: ${camera.ptz_error}\\n`;\n  });\n  logContent += `\\n`;\n}\n\nlogContent += `Detailed Results:\\n`;\ndata.detailed_results.forEach(result => {\n  logContent += `  ${result.camera_name} (${result.camera_ip}): `;\n  logContent += `AF:${result.autofocus.success ? 'OK' : 'FAIL'} `;\n  logContent += `PTZ:${result.ptz_home.success ? 'OK' : 'FAIL'}\\n`;\n});\n\nlogContent += `\\n=== End Summary ===\\n`;\n\nreturn {\n  summary_log: logContent,\n  detailed_json: JSON.stringify(data, null, 2)\n};"
      }
    },
    {
      "id": "send-notification-1",
      "type": "action.notification",
      "position": {"x": 2500, "y": 100},
      "config": {
        "notification_type": "email",
        "recipients": ["security@company.com", "maintenance@company.com"],
        "subject": "Camera Maintenance Complete - {{data.summary.success_rate}} Success ({{data.summary.successful_cameras}}/{{data.summary.total_cameras}})",
        "message": "Weekly camera maintenance completed at {{data.maintenance_completed_at}}\\n\\nSummary:\\n- Total Cameras: {{data.summary.total_cameras}}\\n- Successful: {{data.summary.successful_cameras}} ({{data.summary.success_rate}})\\n- Failed: {{data.summary.failed_cameras}}\\n- Operation Success Rate: {{data.summary.operation_success_rate}}\\n\\n{{#if data.failures.failed_cameras}}Failed Cameras:\\n{{#each data.failures.failed_cameras}}- {{name}} ({{ip}})\\n{{/each}}\\n{{/if}}Detailed logs available on maintenance server.",
        "priority": "{{data.summary.failed_cameras > 0 ? 'high' : 'normal'}}"
      }
    },
    {
      "id": "end-1",
      "type": "flow.end",
      "position": {"x": 2700, "y": 100},
      "config": {
        "name": "Camera Maintenance Complete",
        "save_result": true,
        "result_name": "camera_maintenance_summary"
      }
    }
  ],
  "connections": [
    {
      "from": {"blockId": "schedule-trigger-1", "output": "trigger"},
      "to": {"blockId": "start-1", "input": "schedule_trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "start-1", "output": "trigger"},
      "to": {"blockId": "load-camera-config-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "load-camera-config-1", "output": "success"},
      "to": {"blockId": "parse-camera-list-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "load-camera-config-1", "output": "result"},
      "to": {"blockId": "parse-camera-list-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "parse-camera-list-1", "output": "success"},
      "to": {"blockId": "camera-loop-start-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "parse-camera-list-1", "output": "output_data"},
      "to": {"blockId": "camera-loop-start-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "camera-loop-start-1", "output": "success"},
      "to": {"blockId": "get-current-camera-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "camera-loop-start-1", "output": "output_data"},
      "to": {"blockId": "get-current-camera-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "loop-back-1", "output": "success"},
      "to": {"blockId": "get-current-camera-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "loop-back-1", "output": "output_data"},
      "to": {"blockId": "get-current-camera-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "get-current-camera-1", "output": "success"},
      "to": {"blockId": "camera-autofocus-1", "input": "trigger"},
      "type": "flow",
      "condition": "{{data.processing_complete}} === false"
    },
    {
      "from": {"blockId": "get-current-camera-1", "output": "output_data"},
      "to": {"blockId": "camera-autofocus-1", "input": "url"},
      "type": "data"
    },
    {
      "from": {"blockId": "camera-autofocus-1", "output": "success"},
      "to": {"blockId": "camera-ptz-home-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "camera-ptz-home-1", "output": "success"},
      "to": {"blockId": "record-camera-result-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "get-current-camera-1", "output": "output_data"},
      "to": {"blockId": "record-camera-result-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "camera-autofocus-1", "output": "response"},
      "to": {"blockId": "record-camera-result-1", "input": "autofocus_result"},
      "type": "data"
    },
    {
      "from": {"blockId": "camera-ptz-home-1", "output": "response"},
      "to": {"blockId": "record-camera-result-1", "input": "ptz_result"},
      "type": "data"
    },
    {
      "from": {"blockId": "record-camera-result-1", "output": "success"},
      "to": {"blockId": "check-loop-complete-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "record-camera-result-1", "output": "output_data"},
      "to": {"blockId": "check-loop-complete-1", "input": "data"},
      "type": "data"
    },
    {
      "from": {"blockId": "check-loop-complete-1", "output": "false"},
      "to": {"blockId": "loop-back-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "record-camera-result-1", "output": "output_data"},
      "to": {"blockId": "loop-back-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "check-loop-complete-1", "output": "true"},
      "to": {"blockId": "generate-summary-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "record-camera-result-1", "output": "output_data"},
      "to": {"blockId": "generate-summary-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "generate-summary-1", "output": "success"},
      "to": {"blockId": "format-summary-log-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "generate-summary-1", "output": "output_data"},
      "to": {"blockId": "format-summary-log-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "format-summary-log-1", "output": "success"},
      "to": {"blockId": "write-detailed-log-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "format-summary-log-1", "output": "output_data"},
      "to": {"blockId": "write-detailed-log-1", "input": "file_content"},
      "type": "data"
    },
    {
      "from": {"blockId": "format-summary-log-1", "output": "success"},
      "to": {"blockId": "write-summary-log-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "format-summary-log-1", "output": "output_data"},
      "to": {"blockId": "write-summary-log-1", "input": "file_content"},
      "type": "data"
    },
    {
      "from": {"blockId": "write-summary-log-1", "output": "success"},
      "to": {"blockId": "send-notification-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "generate-summary-1", "output": "output_data"},
      "to": {"blockId": "send-notification-1", "input": "message"},
      "type": "data"
    },
    {
      "from": {"blockId": "send-notification-1", "output": "success"},
      "to": {"blockId": "end-1", "input": "trigger"},
      "type": "flow"
    }
  ]
}