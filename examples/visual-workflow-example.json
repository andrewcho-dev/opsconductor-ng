{
  "name": "Windows Service Restart Visual Workflow",
  "description": "Example of how the Windows Service Restart job would look in the visual job builder",
  "workflow_definition": {
    "nodes": [
      {
        "id": "start_1",
        "type": "flow.start",
        "position": {"x": 200, "y": 50},
        "data": {
          "name": "Start Workflow",
          "trigger_type": "manual",
          "description": "Begin Windows service restart workflow"
        }
      },
      {
        "id": "check_service_1",
        "type": "action.command",
        "position": {"x": 200, "y": 150},
        "data": {
          "name": "Check Service Status",
          "command": "Get-Service -Name {{service_name}} | Select-Object Status, Name, DisplayName",
          "connection_type": "winrm",
          "shell": "powershell",
          "timeout": 30,
          "description": "Check current status of the Windows service"
        }
      },
      {
        "id": "service_running_check",
        "type": "logic.if",
        "position": {"x": 200, "y": 250},
        "data": {
          "name": "Is Service Running?",
          "condition": "{{check_service_1.output}} contains \"Running\"",
          "description": "Check if service is currently running"
        }
      },
      {
        "id": "stop_service",
        "type": "action.command",
        "position": {"x": 100, "y": 350},
        "data": {
          "name": "Stop Service",
          "command": "Stop-Service -Name {{service_name}} -Force",
          "connection_type": "winrm",
          "shell": "powershell",
          "timeout": 60,
          "description": "Stop the Windows service if it's running"
        }
      },
      {
        "id": "wait_for_stop",
        "type": "flow.delay",
        "position": {"x": 100, "y": 450},
        "data": {
          "name": "Wait for Service Stop",
          "delay_seconds": 10,
          "description": "Wait for service to fully stop before starting"
        }
      },
      {
        "id": "start_service",
        "type": "action.command",
        "position": {"x": 200, "y": 550},
        "data": {
          "name": "Start Service",
          "command": "Start-Service -Name {{service_name}}",
          "connection_type": "winrm",
          "shell": "powershell",
          "timeout": 60,
          "description": "Start the Windows service"
        }
      },
      {
        "id": "verify_service",
        "type": "action.command",
        "position": {"x": 200, "y": 650},
        "data": {
          "name": "Verify Service Started",
          "command": "Get-Service -Name {{service_name}} | Select-Object Status, Name",
          "connection_type": "winrm",
          "shell": "powershell",
          "timeout": 30,
          "description": "Verify service is running after restart"
        }
      },
      {
        "id": "transform_result",
        "type": "data.transform",
        "position": {"x": 200, "y": 750},
        "data": {
          "name": "Process Results",
          "script": "import json\nresult = json.loads(input_data)\nif 'Running' in result.get('output', ''):\n    return {'status': 'success', 'message': f'Service {variables[\"service_name\"]} is running'}\nelse:\n    return {'status': 'failed', 'message': f'Service {variables[\"service_name\"]} failed to start'}",
          "description": "Transform service status into structured result"
        }
      },
      {
        "id": "success_notification",
        "type": "action.notification",
        "position": {"x": 100, "y": 850},
        "data": {
          "name": "Success Notification",
          "notification_type": "email",
          "recipients": ["admin@company.com"],
          "subject": "Service Restart Successful",
          "message": "Service {{service_name}} has been successfully restarted on {{target.hostname}}",
          "description": "Send success notification"
        }
      },
      {
        "id": "failure_notification",
        "type": "action.notification",
        "position": {"x": 300, "y": 850},
        "data": {
          "name": "Failure Notification",
          "notification_type": "email",
          "recipients": ["admin@company.com"],
          "subject": "Service Restart Failed",
          "message": "Failed to restart service {{service_name}} on {{target.hostname}}. Please check manually.",
          "description": "Send failure notification"
        }
      },
      {
        "id": "end_success",
        "type": "flow.end",
        "position": {"x": 100, "y": 950},
        "data": {
          "name": "End Success",
          "status": "success",
          "description": "Workflow completed successfully"
        }
      },
      {
        "id": "end_failure",
        "type": "flow.end",
        "position": {"x": 300, "y": 950},
        "data": {
          "name": "End Failure",
          "status": "failure",
          "description": "Workflow failed"
        }
      }
    ],
    "edges": [
      {"id": "e1", "source": "start_1", "target": "check_service_1"},
      {"id": "e2", "source": "check_service_1", "target": "service_running_check"},
      {"id": "e3", "source": "service_running_check", "target": "stop_service", "condition": "true", "label": "Service Running"},
      {"id": "e4", "source": "service_running_check", "target": "start_service", "condition": "false", "label": "Service Stopped"},
      {"id": "e5", "source": "stop_service", "target": "wait_for_stop"},
      {"id": "e6", "source": "wait_for_stop", "target": "start_service"},
      {"id": "e7", "source": "start_service", "target": "verify_service"},
      {"id": "e8", "source": "verify_service", "target": "transform_result"},
      {"id": "e9", "source": "transform_result", "target": "success_notification", "condition": "{{transform_result.status}} == 'success'", "label": "Success"},
      {"id": "e10", "source": "transform_result", "target": "failure_notification", "condition": "{{transform_result.status}} == 'failed'", "label": "Failed"},
      {"id": "e11", "source": "success_notification", "target": "end_success"},
      {"id": "e12", "source": "failure_notification", "target": "end_failure"}
    ]
  },
  "variables": [
    {
      "name": "service_name",
      "type": "string",
      "required": true,
      "default": "Spooler",
      "description": "Name of the Windows service to restart"
    },
    {
      "name": "target_hostname",
      "type": "string", 
      "required": true,
      "description": "Hostname of the Windows server"
    }
  ],
  "tags": ["windows", "service", "restart", "maintenance", "demo"],
  "block_types_used": [
    "flow.start - Workflow entry point",
    "action.command - Execute PowerShell commands via WinRM", 
    "logic.if - Conditional branching based on service status",
    "flow.delay - Wait for service to stop completely",
    "data.transform - Process and structure the results",
    "action.notification - Send email notifications",
    "flow.end - Workflow completion points"
  ],
  "workflow_description": "This visual workflow demonstrates all 8 generic block types working together to safely restart a Windows service. It includes health checks, conditional logic, data transformation, notifications, and proper flow control."
}