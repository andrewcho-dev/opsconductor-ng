{
  "name": "Windows Process Monitor and Restart",
  "description": "Check if process is running, restart if needed, send notification",
  "flow_version": 2,
  "targets": [
    {
      "id": "win-app-server",
      "name": "Windows Application Server",
      "hostname": "192.168.1.200",
      "os_type": "windows",
      "default_connection": "winrm",
      "auth_method": "password",
      "username": "serviceaccount",
      "password": "{{vault.win_app_server_password}}",
      "winrm_port": 5985,
      "winrm_use_ssl": false,
      "winrm_transport": "ntlm"
    }
  ],
  "blocks": [
    {
      "id": "schedule-trigger-1",
      "type": "trigger.schedule",
      "position": {"x": 100, "y": 100},
      "config": {
        "cron_expression": "*/15 * * * *",
        "timezone": "UTC",
        "enabled": true
      }
    },
    {
      "id": "start-1",
      "type": "flow.start",
      "position": {"x": 300, "y": 100},
      "config": {
        "name": "Process Monitor Start",
        "trigger_types": ["schedule", "manual"]
      }
    },
    {
      "id": "check-process-1",
      "type": "action.command",
      "position": {"x": 500, "y": 100},
      "config": {
        "target": "win-app-server",
        "connection_method": "winrm",
        "command": "tasklist /FI \"IMAGENAME eq MyApplication.exe\" /FO CSV | findstr /V \"INFO:\"",
        "shell": "cmd",
        "timeout_seconds": 30,
        "capture_output": true,
        "winrm_options": {
          "operation_timeout": 60,
          "read_timeout": 90
        }
      }
    },
    {
      "id": "parse-process-status-1",
      "type": "data.transform",
      "position": {"x": 700, "y": 100},
      "config": {
        "script": "// Parse tasklist output to determine if process is running\nconst stdout = input.result.stdout || '';\nconst stderr = input.result.stderr || '';\n\n// Check if process is found in output\nconst isRunning = stdout.includes('MyApplication.exe') && !stdout.includes('INFO: No tasks');\n\n// Extract process details if running\nlet processInfo = null;\nif (isRunning) {\n  const lines = stdout.split('\\n').filter(line => line.includes('MyApplication.exe'));\n  if (lines.length > 0) {\n    // Parse CSV format: \"Image Name\",\"PID\",\"Session Name\",\"Session#\",\"Mem Usage\"\n    const parts = lines[0].split(',').map(part => part.replace(/\"/g, '').trim());\n    processInfo = {\n      imageName: parts[0] || 'MyApplication.exe',\n      pid: parts[1] || 'unknown',\n      sessionName: parts[2] || 'unknown',\n      sessionNumber: parts[3] || 'unknown',\n      memoryUsage: parts[4] || 'unknown'\n    };\n  }\n}\n\nreturn {\n  process_running: isRunning,\n  process_info: processInfo,\n  check_timestamp: new Date().toISOString(),\n  raw_output: stdout,\n  target: input.result.target\n};"
      }
    },
    {
      "id": "process-decision-1",
      "type": "logic.if",
      "position": {"x": 900, "y": 100},
      "config": {
        "condition": "{{data.process_running}} === true"
      }
    },
    {
      "id": "stop-process-1",
      "type": "action.command",
      "position": {"x": 700, "y": 250},
      "config": {
        "target": "win-app-server",
        "connection_method": "winrm",
        "command": "taskkill /F /IM MyApplication.exe",
        "shell": "cmd",
        "timeout_seconds": 30,
        "capture_output": true,
        "winrm_options": {
          "operation_timeout": 60
        }
      }
    },
    {
      "id": "wait-after-stop-1",
      "type": "flow.delay",
      "position": {"x": 900, "y": 250},
      "config": {
        "delay_seconds": 5
      }
    },
    {
      "id": "start-process-1",
      "type": "action.command",
      "position": {"x": 1100, "y": 200},
      "config": {
        "target": "win-app-server",
        "connection_method": "winrm",
        "command": "\"C:\\Program Files\\MyCompany\\MyApplication\\MyApplication.exe\"",
        "shell": "cmd",
        "timeout_seconds": 30,
        "working_directory": "C:\\Program Files\\MyCompany\\MyApplication",
        "capture_output": true,
        "winrm_options": {
          "operation_timeout": 60
        }
      }
    },
    {
      "id": "start-process-not-running-1",
      "type": "action.command",
      "position": {"x": 1100, "y": 100},
      "config": {
        "target": "win-app-server",
        "connection_method": "winrm",
        "command": "\"C:\\Program Files\\MyCompany\\MyApplication\\MyApplication.exe\"",
        "shell": "cmd",
        "timeout_seconds": 30,
        "working_directory": "C:\\Program Files\\MyCompany\\MyApplication",
        "capture_output": true,
        "winrm_options": {
          "operation_timeout": 60
        }
      }
    },
    {
      "id": "wait-after-start-1",
      "type": "flow.delay",
      "position": {"x": 1300, "y": 150},
      "config": {
        "delay_seconds": 10
      }
    },
    {
      "id": "verify-process-started-1",
      "type": "action.command",
      "position": {"x": 1500, "y": 150},
      "config": {
        "target": "win-app-server",
        "connection_method": "winrm",
        "command": "tasklist /FI \"IMAGENAME eq MyApplication.exe\" /FO CSV | findstr /V \"INFO:\"",
        "shell": "cmd",
        "timeout_seconds": 30,
        "capture_output": true
      }
    },
    {
      "id": "parse-final-status-1",
      "type": "data.transform",
      "position": {"x": 1700, "y": 150},
      "config": {
        "script": "// Parse final process status and create summary\nconst stdout = input.result.stdout || '';\nconst isNowRunning = stdout.includes('MyApplication.exe') && !stdout.includes('INFO: No tasks');\n\n// Get original status from context\nconst originalStatus = input.original_status || {};\nconst wasRunning = originalStatus.process_running || false;\n\n// Determine action taken\nlet actionTaken = 'none';\nif (wasRunning && isNowRunning) {\n  actionTaken = 'restarted';\n} else if (!wasRunning && isNowRunning) {\n  actionTaken = 'started';\n} else if (wasRunning && !isNowRunning) {\n  actionTaken = 'failed_to_restart';\n} else {\n  actionTaken = 'failed_to_start';\n}\n\n// Extract new process info if running\nlet newProcessInfo = null;\nif (isNowRunning) {\n  const lines = stdout.split('\\n').filter(line => line.includes('MyApplication.exe'));\n  if (lines.length > 0) {\n    const parts = lines[0].split(',').map(part => part.replace(/\"/g, '').trim());\n    newProcessInfo = {\n      imageName: parts[0] || 'MyApplication.exe',\n      pid: parts[1] || 'unknown',\n      sessionName: parts[2] || 'unknown',\n      sessionNumber: parts[3] || 'unknown',\n      memoryUsage: parts[4] || 'unknown'\n    };\n  }\n}\n\nreturn {\n  final_status: {\n    process_running: isNowRunning,\n    process_info: newProcessInfo,\n    action_taken: actionTaken,\n    success: isNowRunning,\n    timestamp: new Date().toISOString()\n  },\n  original_status: originalStatus,\n  summary: {\n    was_running: wasRunning,\n    is_running: isNowRunning,\n    action: actionTaken,\n    success: isNowRunning,\n    target: input.result.target\n  }\n};"
      }
    },
    {
      "id": "send-notification-1",
      "type": "action.notification",
      "position": {"x": 1900, "y": 150},
      "config": {
        "notification_type": "email",
        "recipients": ["admin@company.com", "ops@company.com"],
        "subject": "Process Monitor Alert - MyApplication.exe {{data.summary.action}} on {{data.summary.target}}",
        "message": "Process monitoring completed at {{data.final_status.timestamp}}\\n\\nTarget: {{data.summary.target}}\\nProcess: MyApplication.exe\\n\\nStatus Summary:\\n- Was Running: {{data.summary.was_running}}\\n- Is Running: {{data.summary.is_running}}\\n- Action Taken: {{data.summary.action}}\\n- Success: {{data.summary.success}}\\n\\n{{#if data.final_status.process_info}}Process Details:\\n- PID: {{data.final_status.process_info.pid}}\\n- Memory Usage: {{data.final_status.process_info.memoryUsage}}\\n- Session: {{data.final_status.process_info.sessionName}}{{/if}}\\n\\nThis is an automated notification from the process monitoring system.",
        "priority": "{{data.summary.success ? 'normal' : 'high'}}"
      }
    },
    {
      "id": "log-action-1",
      "type": "action.file_operation",
      "position": {"x": 1900, "y": 250},
      "config": {
        "target": "win-app-server",
        "connection_method": "winrm",
        "operation": "write",
        "source_path": "C:\\Logs\\ProcessMonitor\\process-monitor-{{date}}.log",
        "create_directories": true,
        "overwrite_existing": false,
        "encoding": "utf-8"
      }
    },
    {
      "id": "format-log-1",
      "type": "data.transform",
      "position": {"x": 1700, "y": 250},
      "config": {
        "script": "// Format log entry for process monitoring\nconst timestamp = new Date().toISOString();\nconst data = input.summary;\n\nconst logEntry = `${timestamp} - Process Monitor - MyApplication.exe\\n` +\n  `  Target: ${data.target}\\n` +\n  `  Was Running: ${data.was_running}\\n` +\n  `  Is Running: ${data.is_running}\\n` +\n  `  Action Taken: ${data.action}\\n` +\n  `  Success: ${data.success}\\n` +\n  `  ---\\n`;\n\nreturn {\n  log_content: logEntry,\n  timestamp: timestamp\n};"
      }
    },
    {
      "id": "end-success-1",
      "type": "flow.end",
      "position": {"x": 2100, "y": 100},
      "config": {
        "name": "Process Monitor Complete - Success",
        "save_result": true,
        "result_name": "process_monitor_success"
      }
    },
    {
      "id": "end-failure-1",
      "type": "flow.end",
      "position": {"x": 2100, "y": 200},
      "config": {
        "name": "Process Monitor Complete - Failure",
        "save_result": true,
        "result_name": "process_monitor_failure"
      }
    },
    {
      "id": "final-decision-1",
      "type": "logic.if",
      "position": {"x": 1900, "y": 50},
      "config": {
        "condition": "{{data.summary.success}} === true"
      }
    }
  ],
  "connections": [
    {
      "from": {"blockId": "schedule-trigger-1", "output": "trigger"},
      "to": {"blockId": "start-1", "input": "schedule_trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "start-1", "output": "trigger"},
      "to": {"blockId": "check-process-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "check-process-1", "output": "success"},
      "to": {"blockId": "parse-process-status-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "check-process-1", "output": "result"},
      "to": {"blockId": "parse-process-status-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "parse-process-status-1", "output": "success"},
      "to": {"blockId": "process-decision-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "parse-process-status-1", "output": "output_data"},
      "to": {"blockId": "process-decision-1", "input": "data"},
      "type": "data"
    },
    {
      "from": {"blockId": "process-decision-1", "output": "true"},
      "to": {"blockId": "stop-process-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "process-decision-1", "output": "false"},
      "to": {"blockId": "start-process-not-running-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "stop-process-1", "output": "success"},
      "to": {"blockId": "wait-after-stop-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "wait-after-stop-1", "output": "continue"},
      "to": {"blockId": "start-process-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "start-process-1", "output": "success"},
      "to": {"blockId": "wait-after-start-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "start-process-not-running-1", "output": "success"},
      "to": {"blockId": "wait-after-start-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "wait-after-start-1", "output": "continue"},
      "to": {"blockId": "verify-process-started-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "verify-process-started-1", "output": "success"},
      "to": {"blockId": "parse-final-status-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "verify-process-started-1", "output": "result"},
      "to": {"blockId": "parse-final-status-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "parse-process-status-1", "output": "output_data"},
      "to": {"blockId": "parse-final-status-1", "input": "original_status"},
      "type": "data"
    },
    {
      "from": {"blockId": "parse-final-status-1", "output": "success"},
      "to": {"blockId": "final-decision-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "parse-final-status-1", "output": "output_data"},
      "to": {"blockId": "final-decision-1", "input": "data"},
      "type": "data"
    },
    {
      "from": {"blockId": "final-decision-1", "output": "true"},
      "to": {"blockId": "end-success-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "final-decision-1", "output": "false"},
      "to": {"blockId": "end-failure-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "parse-final-status-1", "output": "success"},
      "to": {"blockId": "send-notification-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "parse-final-status-1", "output": "output_data"},
      "to": {"blockId": "send-notification-1", "input": "message"},
      "type": "data"
    },
    {
      "from": {"blockId": "parse-final-status-1", "output": "success"},
      "to": {"blockId": "format-log-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "parse-final-status-1", "output": "output_data"},
      "to": {"blockId": "format-log-1", "input": "input_data"},
      "type": "data"
    },
    {
      "from": {"blockId": "format-log-1", "output": "success"},
      "to": {"blockId": "log-action-1", "input": "trigger"},
      "type": "flow"
    },
    {
      "from": {"blockId": "format-log-1", "output": "output_data"},
      "to": {"blockId": "log-action-1", "input": "file_content"},
      "type": "data"
    }
  ]
}