# grep - Text search utility
tool_name: "grep"
execution_location: automation-service
version: "1.0"
description: "Search text using patterns in files or streams with powerful regular expression support"
platform: "linux"
category: "text-processing"

defaults:
  accuracy_level: "real-time"
  freshness: "live"
  data_source: "filesystem"

capabilities:
  text_search:
    description: "Search for patterns in text files using regular expressions or fixed strings"
    
    patterns:
      search_files:
        description: "Search for pattern in files with context and formatting options"
        
        typical_use_cases:
          - "search for text in files"
          - "find error messages in logs"
          - "grep pattern in file"
          - "filter log entries"
          - "search code for function"
          - "find configuration values"
        
        time_estimate_ms: "200 + 0.5 * file_size_kb"
        cost_estimate: "1"
        complexity_score: 0.2
        
        scope: "batch"
        completeness: "complete"
        
        limitations:
          - "Performance depends on file size and pattern complexity"
          - "Binary files may produce garbled output (use -I to skip)"
          - "Very large files (>1GB) may be slow"
          - "Complex regex patterns can cause exponential backtracking"
          - "Does not search compressed files without zgrep"
        
        policy:
          max_cost: 5
          requires_approval: false
          production_safe: true
          max_execution_time: 60
        
        preference_match:
          speed: 0.85
          accuracy: 1.0
          cost: 0.95
          complexity: 0.9
          completeness: 1.0
        
        required_inputs:
          - name: "pattern"
            type: "string"
            description: "Search pattern. Can be literal text or regular expression. Use '^' for line start, '$' for line end, '.*' for any characters, '\\d' for digits, '\\w' for word characters. Escape special chars with backslash"
            validation: ".*"
            examples:
              - "ERROR"
              - "^Failed to connect"
              - "user_id: \\d+"
              - "\\[ERROR\\].*database"
              - "function.*\\(.*\\)"
          - name: "target"
            type: "string"
            description: "File path, directory, or glob pattern to search. Use '-' for stdin. Can specify multiple files space-separated or use wildcards like '/var/log/*.log'"
            validation: ".*"
            examples:
              - "/var/log/app.log"
              - "/var/log/*.log"
              - "/etc/nginx/nginx.conf"
              - "."
          - name: "host"
            type: "string"
            description: "Target host where grep will be executed"
            validation: "^[a-zA-Z0-9][a-zA-Z0-9.-]*$|^\\d{1,3}(\\.\\d{1,3}){3}$"
            examples:
              - "web-server-01"
              - "192.168.1.100"
        
        optional_inputs:
          - name: "case_insensitive"
            type: "boolean"
            description: "Perform case-insensitive matching (grep -i)"
            default: "false"
          - name: "invert_match"
            type: "boolean"
            description: "Select non-matching lines (grep -v)"
            default: "false"
          - name: "line_numbers"
            type: "boolean"
            description: "Show line numbers with output (grep -n)"
            default: "true"
          - name: "count_only"
            type: "boolean"
            description: "Only show count of matching lines (grep -c)"
            default: "false"
          - name: "context_lines"
            type: "integer"
            description: "Show N lines of context around matches (grep -C). Use 0 for no context"
            default: 0
            examples:
              - 0
              - 3
              - 5
          - name: "recursive"
            type: "boolean"
            description: "Search directories recursively (grep -r)"
            default: "false"
          - name: "fixed_string"
            type: "boolean"
            description: "Treat pattern as fixed string, not regex (grep -F). Faster for literal searches"
            default: "false"
          - name: "extended_regex"
            type: "boolean"
            description: "Use extended regular expressions (grep -E). Enables +, ?, |, () without escaping"
            default: "false"
          - name: "max_matches"
            type: "integer"
            description: "Stop after N matches (grep -m). Useful for large files"
            default: null
            examples:
              - 10
              - 100
          - name: "files_with_matches"
            type: "boolean"
            description: "Only show filenames containing matches (grep -l)"
            default: "false"
          - name: "word_match"
            type: "boolean"
            description: "Match whole words only (grep -w)"
            default: "false"
        
        expected_outputs:
          - name: "matches"
            type: "array"
            description: "List of matching lines with file paths, line numbers, and content"
          - name: "match_count"
            type: "integer"
            description: "Total number of matches found"
          - name: "files_matched"
            type: "array"
            description: "List of files containing matches"
      
      search_logs:
        description: "Specialized log file searching with time-based filtering and common log patterns"
        
        typical_use_cases:
          - "find errors in logs"
          - "search application logs"
          - "filter log entries by severity"
          - "find exceptions in logs"
          - "search for specific request IDs"
        
        time_estimate_ms: "300 + 0.8 * file_size_kb"
        cost_estimate: "1"
        complexity_score: 0.3
        
        scope: "batch"
        completeness: "complete"
        
        limitations:
          - "Time filtering requires consistent log format"
          - "Rotated/compressed logs require special handling"
          - "Multi-line log entries may be split"
        
        policy:
          max_cost: 5
          requires_approval: false
          production_safe: true
          max_execution_time: 90
        
        preference_match:
          speed: 0.8
          accuracy: 1.0
          cost: 0.95
          complexity: 0.85
          completeness: 1.0
        
        required_inputs:
          - name: "log_path"
            type: "string"
            description: "Path to log file or directory containing logs"
            validation: ".*"
            examples:
              - "/var/log/application.log"
              - "/var/log/nginx/"
              - "/var/log/syslog"
          - name: "severity"
            type: "string"
            description: "Log severity level to search for"
            allowed_values:
              - "ERROR"
              - "WARN"
              - "INFO"
              - "DEBUG"
              - "FATAL"
              - "CRITICAL"
              - "ALL"
            examples:
              - "ERROR"
              - "WARN"
          - name: "host"
            type: "string"
            description: "Target host for log search"
            validation: "^[a-zA-Z0-9][a-zA-Z0-9.-]*$|^\\d{1,3}(\\.\\d{1,3}){3}$"
        
        optional_inputs:
          - name: "additional_pattern"
            type: "string"
            description: "Additional pattern to combine with severity filter"
            default: ""
            examples:
              - "database"
              - "timeout"
              - "user_id: 12345"
          - name: "context_lines"
            type: "integer"
            description: "Lines of context around matches"
            default: 2
          - name: "max_results"
            type: "integer"
            description: "Maximum number of results to return"
            default: 100
        
        expected_outputs:
          - name: "log_entries"
            type: "array"
            description: "Matching log entries with metadata"
          - name: "error_count"
            type: "integer"
            description: "Number of errors found"
          - name: "summary"
            type: "object"
            description: "Summary statistics by severity"
      
      search_code:
        description: "Search source code files with programming language awareness"
        
        typical_use_cases:
          - "find function definitions"
          - "search for variable usage"
          - "locate import statements"
          - "find TODO comments"
          - "search for API calls"
        
        time_estimate_ms: "400 + 1 * file_size_kb"
        cost_estimate: "2"
        complexity_score: 0.3
        
        scope: "batch"
        completeness: "complete"
        
        limitations:
          - "Does not parse code syntax (use specialized tools for AST search)"
          - "May match in comments or strings"
          - "Language detection based on file extension"
        
        policy:
          max_cost: 5
          requires_approval: false
          production_safe: true
          max_execution_time: 60
        
        preference_match:
          speed: 0.8
          accuracy: 0.95
          cost: 0.9
          complexity: 0.85
          completeness: 0.95
        
        required_inputs:
          - name: "pattern"
            type: "string"
            description: "Code pattern to search for (function names, variables, etc.)"
            validation: ".*"
            examples:
              - "def process_data"
              - "class.*Service"
              - "import.*requests"
              - "TODO|FIXME"
          - name: "directory"
            type: "string"
            description: "Source code directory to search"
            validation: ".*"
            examples:
              - "/home/user/project/src"
              - "/var/www/app"
          - name: "host"
            type: "string"
            description: "Target host for code search"
            validation: "^[a-zA-Z0-9][a-zA-Z0-9.-]*$|^\\d{1,3}(\\.\\d{1,3}){3}$"
        
        optional_inputs:
          - name: "file_extensions"
            type: "string"
            description: "Comma-separated list of file extensions to search (e.g., 'py,js,java')"
            default: "*"
            examples:
              - "py"
              - "js,ts"
              - "java,kt"
          - name: "exclude_patterns"
            type: "string"
            description: "Patterns to exclude (e.g., 'test,vendor,node_modules')"
            default: ""
            examples:
              - "test"
              - "vendor,node_modules"
          - name: "show_context"
            type: "boolean"
            description: "Show surrounding code context"
            default: "true"
        
        expected_outputs:
          - name: "matches"
            type: "array"
            description: "Code matches with file, line number, and context"
          - name: "files_matched"
            type: "integer"
            description: "Number of files containing matches"

dependencies:
  - name: "filesystem_access"
    type: "permission"
    required: true
  - name: "grep"
    type: "package"
    required: true
    version: ">=3.0"

metadata:
  author: "OpsConductor Team"
  created: "2025-01-15"
  updated: "2025-01-15"
  tags:
    - "linux"
    - "text"
    - "search"
    - "logs"
    - "regex"
  documentation_url: "https://man7.org/linux/man-pages/man1/grep.1.html"
  related_tools:
    - "awk"
    - "sed"
    - "find"
    - "ripgrep"

examples:
  - name: "Find errors in application log"
    description: "Search for ERROR entries in application log with context"
    inputs:
      pattern: "ERROR"
      target: "/var/log/app.log"
      host: "web-server-01"
      case_insensitive: false
      line_numbers: true
      context_lines: 3
    expected_time_ms: 800
    expected_cost: 1
  
  - name: "Search for failed login attempts"
    description: "Find failed SSH login attempts in auth log"
    inputs:
      pattern: "Failed password"
      target: "/var/log/auth.log"
      host: "bastion-host"
      line_numbers: true
      count_only: false
    expected_time_ms: 500
    expected_cost: 1
  
  - name: "Find function definitions in Python code"
    description: "Locate all function definitions in Python project"
    inputs:
      pattern: "^def [a-zA-Z_]"
      directory: "/home/dev/project"
      host: "dev-workstation"
      file_extensions: "py"
      recursive: true
      extended_regex: true
    expected_time_ms: 1200
    expected_cost: 2
  
  - name: "Count occurrences of specific error"
    description: "Count how many times a specific error appears in logs"
    inputs:
      pattern: "ConnectionTimeout"
      target: "/var/log/app/*.log"
      host: "app-server-01"
      count_only: true
      recursive: false
    expected_time_ms: 600
    expected_cost: 1
  
  - name: "Search nginx access logs for 404s"
    description: "Find all 404 errors in nginx access logs"
    inputs:
      log_path: "/var/log/nginx/access.log"
      severity: "ALL"
      additional_pattern: " 404 "
      host: "web-server-01"
      max_results: 50
    expected_time_ms: 700
    expected_cost: 1
  
  - name: "Find TODO comments in codebase"
    description: "Locate all TODO and FIXME comments for task tracking"
    inputs:
      pattern: "TODO|FIXME"
      directory: "/var/www/application"
      host: "dev-server"
      file_extensions: "js,py,java"
      recursive: true
      extended_regex: true
      show_context: true
    expected_time_ms: 1500
    expected_cost: 2