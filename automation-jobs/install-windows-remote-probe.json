{
  "name": "Install OpsConductor Remote Probe on Windows",
  "description": "Automated installation of OpsConductor Network Analytics Remote Probe on Windows systems. Installs Python, dependencies, configures the probe, and sets up as a Windows service.",
  "job_type": "deployment",
  "tags": ["network-analysis", "remote-probe", "windows", "deployment"],
  "metadata": {
    "target_os": "windows",
    "requires_admin": true,
    "estimated_duration": "5-10 minutes",
    "probe_version": "1.0.0"
  },
  "workflow_definition": {
    "steps": [
      {
        "id": "validate_target",
        "name": "Validate Target System",
        "type": "windows_powershell",
        "description": "Check if target system is accessible and meets requirements",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n# Check Windows version\n$osInfo = Get-WmiObject -Class Win32_OperatingSystem\nWrite-Host \"OS: $($osInfo.Caption) $($osInfo.Version)\"\n\n# Check if running as administrator\n$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)\nif (-not $isAdmin) {\n    throw \"This script must be run as Administrator\"\n}\nWrite-Host \"Running as Administrator: OK\"\n\n# Check available disk space (need at least 500MB)\n$disk = Get-WmiObject -Class Win32_LogicalDisk -Filter \"DeviceID='C:'\"\n$freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)\nWrite-Host \"Free disk space: $freeSpaceGB GB\"\nif ($disk.FreeSpace -lt 500MB) {\n    throw \"Insufficient disk space. Need at least 500MB free.\"\n}\n\n# Check network connectivity to central analyzer\n$centralUrl = \"192.168.50.210:3006\"\ntry {\n    $response = Test-NetConnection -ComputerName \"192.168.50.210\" -Port 3006 -WarningAction SilentlyContinue\n    if ($response.TcpTestSucceeded) {\n        Write-Host \"Network connectivity to central analyzer: OK\"\n    } else {\n        throw \"Cannot connect to central analyzer at $centralUrl\"\n    }\n} catch {\n    Write-Warning \"Network test failed: $($_.Exception.Message)\"\n}\n\nWrite-Host \"Target system validation completed successfully\""
        },
        "timeout": 60,
        "retry_count": 2
      },
      {
        "id": "install_python",
        "name": "Install Python 3.11",
        "type": "windows_powershell",
        "description": "Download and install Python 3.11 if not already present",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n# Check if Python is already installed\ntry {\n    $pythonVersion = python --version 2>&1\n    if ($pythonVersion -match \"Python 3\\.(1[1-9]|[2-9]\\d)\") {\n        Write-Host \"Python already installed: $pythonVersion\"\n        exit 0\n    }\n} catch {\n    Write-Host \"Python not found, proceeding with installation\"\n}\n\n# Create temp directory\n$tempDir = \"C:\\temp\\opsconductor\"\nif (-not (Test-Path $tempDir)) {\n    New-Item -ItemType Directory -Path $tempDir -Force\n}\n\n# Download Python 3.11 installer\n$pythonUrl = \"https://www.python.org/ftp/python/3.11.7/python-3.11.7-amd64.exe\"\n$pythonInstaller = \"$tempDir\\python-3.11.7-amd64.exe\"\n\nWrite-Host \"Downloading Python 3.11 installer...\"\nInvoke-WebRequest -Uri $pythonUrl -OutFile $pythonInstaller -UseBasicParsing\n\n# Install Python silently\nWrite-Host \"Installing Python 3.11...\"\n$installArgs = @(\n    '/quiet',\n    'InstallAllUsers=1',\n    'PrependPath=1',\n    'Include_test=0',\n    'Include_doc=0',\n    'Include_dev=0',\n    'Include_debug=0',\n    'Include_launcher=1',\n    'InstallLauncherAllUsers=1'\n)\n\nStart-Process -FilePath $pythonInstaller -ArgumentList $installArgs -Wait -NoNewWindow\n\n# Refresh environment variables\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n\n# Verify installation\nStart-Sleep -Seconds 5\ntry {\n    $newPythonVersion = python --version 2>&1\n    Write-Host \"Python installation completed: $newPythonVersion\"\n} catch {\n    throw \"Python installation failed - python command not found\"\n}\n\n# Clean up installer\nRemove-Item $pythonInstaller -Force -ErrorAction SilentlyContinue\n\nWrite-Host \"Python installation completed successfully\""
        },
        "timeout": 300,
        "retry_count": 1
      },
      {
        "id": "create_probe_directory",
        "name": "Create Probe Directory Structure",
        "type": "windows_powershell",
        "description": "Create directory structure for the remote probe",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n# Define probe installation directory\n$probeDir = \"C:\\Program Files\\OpsConductor\\RemoteProbe\"\n$configDir = \"$probeDir\\config\"\n$logsDir = \"$probeDir\\logs\"\n$tempDir = \"$probeDir\\temp\"\n\n# Create directory structure\nWrite-Host \"Creating probe directory structure...\"\nNew-Item -ItemType Directory -Path $probeDir -Force | Out-Null\nNew-Item -ItemType Directory -Path $configDir -Force | Out-Null\nNew-Item -ItemType Directory -Path $logsDir -Force | Out-Null\nNew-Item -ItemType Directory -Path $tempDir -Force | Out-Null\n\n# Set appropriate permissions\ntry {\n    # Give full control to Administrators and SYSTEM\n    icacls $probeDir /grant \"Administrators:(OI)(CI)F\" /T\n    icacls $probeDir /grant \"SYSTEM:(OI)(CI)F\" /T\n    \n    # Give read/execute to Users\n    icacls $probeDir /grant \"Users:(OI)(CI)RX\" /T\n    \n    Write-Host \"Directory permissions set successfully\"\n} catch {\n    Write-Warning \"Failed to set directory permissions: $($_.Exception.Message)\"\n}\n\nWrite-Host \"Probe directory structure created at: $probeDir\"\nWrite-Host \"Config directory: $configDir\"\nWrite-Host \"Logs directory: $logsDir\"\nWrite-Host \"Temp directory: $tempDir\""
        },
        "timeout": 60,
        "retry_count": 2
      },
      {
        "id": "install_probe_files",
        "name": "Install Probe Files",
        "type": "windows_powershell",
        "description": "Download and install the remote probe files",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n$probeDir = \"C:\\Program Files\\OpsConductor\\RemoteProbe\"\n$configDir = \"$probeDir\\config\"\n\n# Create probe-standalone.py content\n$probeScript = @'\n#!/usr/bin/env python3\n\"\"\"\nOpsConductor Network Analytics Remote Probe - Standalone Version\nDesigned for deployment on remote Windows and Linux systems\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport time\nimport asyncio\nimport subprocess\nimport platform\nimport signal\nimport logging\nimport yaml\nfrom pathlib import Path\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Optional, Any\nimport requests\nimport psutil\nfrom dataclasses import dataclass, asdict\nimport threading\n\n# Configuration\n@dataclass\nclass ProbeConfig:\n    central_analyzer_url: str = \"http://192.168.50.210:3006\"\n    probe_id: str = \"windows-probe-192-168-50-211\"\n    probe_name: str = \"Windows Remote Probe - 192.168.50.211\"\n    probe_location: str = \"Windows Server - 192.168.50.211\"\n    api_key: Optional[str] = None\n    heartbeat_interval: int = 30\n    log_level: str = \"INFO\"\n    log_file: Optional[str] = None\n    interfaces: List[str] = None\n    \n    @classmethod\n    def from_file(cls, config_path: str):\n        \"\"\"Load configuration from YAML file\"\"\"\n        try:\n            with open(config_path, 'r') as f:\n                data = yaml.safe_load(f)\n            \n            return cls(\n                central_analyzer_url=data.get('central_analyzer', {}).get('url', cls.central_analyzer_url),\n                probe_id=data.get('probe', {}).get('id', cls.probe_id),\n                probe_name=data.get('probe', {}).get('name', cls.probe_name),\n                probe_location=data.get('probe', {}).get('location', cls.probe_location),\n                api_key=data.get('central_analyzer', {}).get('api_key'),\n                heartbeat_interval=data.get('heartbeat_interval', cls.heartbeat_interval),\n                log_level=data.get('logging', {}).get('level', cls.log_level),\n                log_file=data.get('logging', {}).get('file'),\n                interfaces=data.get('interfaces', [])\n            )\n        except Exception as e:\n            print(f\"Error loading config: {e}\")\n            return cls()\n\nclass NetworkProbe:\n    def __init__(self, config: ProbeConfig):\n        self.config = config\n        self.running = False\n        self.session = requests.Session()\n        self.session.timeout = 10\n        \n        # Setup logging\n        self.setup_logging()\n        \n    def setup_logging(self):\n        \"\"\"Setup logging configuration\"\"\"\n        log_level = getattr(logging, self.config.log_level.upper(), logging.INFO)\n        \n        # Create formatter\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        )\n        \n        # Setup logger\n        self.logger = logging.getLogger('NetworkProbe')\n        self.logger.setLevel(log_level)\n        \n        # Console handler\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        self.logger.addHandler(console_handler)\n        \n        # File handler if specified\n        if self.config.log_file:\n            try:\n                file_handler = logging.FileHandler(self.config.log_file)\n                file_handler.setFormatter(formatter)\n                self.logger.addHandler(file_handler)\n            except Exception as e:\n                self.logger.warning(f\"Could not setup file logging: {e}\")\n    \n    def register_probe(self) -> bool:\n        \"\"\"Register this probe with the central analyzer\"\"\"\n        try:\n            # Get system information\n            system_info = {\n                'hostname': platform.node(),\n                'platform': platform.platform(),\n                'python_version': platform.python_version(),\n                'interfaces': self.get_network_interfaces()\n            }\n            \n            registration_data = {\n                'probe_id': self.config.probe_id,\n                'probe_name': self.config.probe_name,\n                'probe_location': self.config.probe_location,\n                'system_info': system_info,\n                'capabilities': ['heartbeat', 'interface_monitoring']\n            }\n            \n            response = self.session.post(\n                f\"{self.config.central_analyzer_url}/api/v1/remote/register-probe\",\n                json=registration_data\n            )\n            \n            if response.status_code == 200:\n                self.logger.info(\"Probe registered successfully\")\n                return True\n            else:\n                self.logger.error(f\"Registration failed: {response.status_code} - {response.text}\")\n                return False\n                \n        except Exception as e:\n            self.logger.error(f\"Registration error: {e}\")\n            return False\n    \n    def send_heartbeat(self) -> bool:\n        \"\"\"Send heartbeat to central analyzer\"\"\"\n        try:\n            heartbeat_data = {\n                'probe_id': self.config.probe_id,\n                'timestamp': datetime.now(timezone.utc).isoformat(),\n                'status': 'active',\n                'system_stats': self.get_system_stats()\n            }\n            \n            response = self.session.post(\n                f\"{self.config.central_analyzer_url}/api/v1/remote/heartbeat\",\n                json=heartbeat_data\n            )\n            \n            if response.status_code == 200:\n                self.logger.debug(\"Heartbeat sent successfully\")\n                return True\n            else:\n                self.logger.warning(f\"Heartbeat failed: {response.status_code}\")\n                return False\n                \n        except Exception as e:\n            self.logger.error(f\"Heartbeat error: {e}\")\n            return False\n    \n    def get_network_interfaces(self) -> List[Dict]:\n        \"\"\"Get network interface information\"\"\"\n        interfaces = []\n        try:\n            for interface, addrs in psutil.net_if_addrs().items():\n                interface_info = {\n                    'name': interface,\n                    'addresses': []\n                }\n                \n                for addr in addrs:\n                    if addr.family == 2:  # IPv4\n                        interface_info['addresses'].append({\n                            'type': 'IPv4',\n                            'address': addr.address,\n                            'netmask': addr.netmask\n                        })\n                \n                if interface_info['addresses']:\n                    interfaces.append(interface_info)\n                    \n        except Exception as e:\n            self.logger.error(f\"Error getting network interfaces: {e}\")\n            \n        return interfaces\n    \n    def get_system_stats(self) -> Dict:\n        \"\"\"Get current system statistics\"\"\"\n        try:\n            return {\n                'cpu_percent': psutil.cpu_percent(interval=1),\n                'memory_percent': psutil.virtual_memory().percent,\n                'disk_usage': psutil.disk_usage('/').percent if platform.system() != 'Windows' else psutil.disk_usage('C:').percent,\n                'network_io': dict(psutil.net_io_counters()._asdict()) if psutil.net_io_counters() else {},\n                'uptime': time.time() - psutil.boot_time()\n            }\n        except Exception as e:\n            self.logger.error(f\"Error getting system stats: {e}\")\n            return {}\n    \n    def run(self):\n        \"\"\"Main probe loop\"\"\"\n        self.logger.info(f\"Starting Network Probe {self.config.probe_id}\")\n        self.logger.info(f\"Central Analyzer: {self.config.central_analyzer_url}\")\n        \n        # Register probe\n        if not self.register_probe():\n            self.logger.error(\"Failed to register probe, exiting\")\n            return\n        \n        self.running = True\n        \n        try:\n            while self.running:\n                # Send heartbeat\n                self.send_heartbeat()\n                \n                # Wait for next heartbeat\n                time.sleep(self.config.heartbeat_interval)\n                \n        except KeyboardInterrupt:\n            self.logger.info(\"Received interrupt signal, shutting down...\")\n        except Exception as e:\n            self.logger.error(f\"Unexpected error: {e}\")\n        finally:\n            self.running = False\n            self.logger.info(\"Network Probe stopped\")\n    \n    def stop(self):\n        \"\"\"Stop the probe\"\"\"\n        self.running = False\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    # Load configuration\n    config_path = os.path.join(os.path.dirname(__file__), 'config', 'probe-config.yaml')\n    \n    if os.path.exists(config_path):\n        config = ProbeConfig.from_file(config_path)\n    else:\n        print(f\"Config file not found at {config_path}, using defaults\")\n        config = ProbeConfig()\n    \n    # Create and run probe\n    probe = NetworkProbe(config)\n    \n    # Handle signals for graceful shutdown\n    def signal_handler(signum, frame):\n        print(\"\\nReceived shutdown signal, stopping probe...\")\n        probe.stop()\n    \n    signal.signal(signal.SIGINT, signal_handler)\n    signal.signal(signal.SIGTERM, signal_handler)\n    \n    # Run probe\n    probe.run()\n\nif __name__ == \"__main__\":\n    main()\n'@\n\n# Write probe script\nWrite-Host \"Installing probe script...\"\n$probeScript | Out-File -FilePath \"$probeDir\\probe-standalone.py\" -Encoding UTF8\n\n# Create configuration file\n$configContent = @'\n# OpsConductor Network Analytics Remote Probe Configuration\n\n# Central analyzer connection settings\ncentral_analyzer:\n  # URL of the central OpsConductor analyzer\n  url: \"http://192.168.50.210:3006\"\n  \n  # Optional API key for authentication\n  api_key: null\n  \n  # SSL verification (set to false for self-signed certificates)\n  verify_ssl: false\n\n# Probe identification\nprobe:\n  # Unique identifier for this probe\n  id: \"windows-probe-192-168-50-211\"\n  \n  # Human-readable name\n  name: \"Windows Remote Probe - 192.168.50.211\"\n  \n  # Location description\n  location: \"Windows Server - 192.168.50.211\"\n\n# Heartbeat settings\nheartbeat_interval: 30  # seconds\n\n# Logging configuration\nlogging:\n  level: \"INFO\"  # DEBUG, INFO, WARNING, ERROR\n  \n  # Log file path\n  file: \"C:\\\\Program Files\\\\OpsConductor\\\\RemoteProbe\\\\logs\\\\probe.log\"\n  \n  # Maximum log file size in MB\n  max_size: 10\n  \n  # Number of backup log files to keep\n  backup_count: 5\n\n# Network interfaces to monitor\n# Leave empty to auto-detect all available interfaces\ninterfaces: []\n\n# Security settings\nsecurity:\n  # Allowed source IPs for remote commands (empty = allow all)\n  allowed_sources: []\n  \n  # Enable/disable remote packet capture\n  allow_remote_capture: true\n  \n  # Enable/disable interface monitoring\n  allow_interface_monitoring: true\n\n# Advanced settings\nadvanced:\n  # Connection timeout in seconds\n  connection_timeout: 10\n  \n  # Retry attempts for failed connections\n  retry_attempts: 3\n  \n  # Retry delay in seconds\n  retry_delay: 5\n  \n  # Enable debug mode\n  debug: false\n'@\n\nWrite-Host \"Installing configuration file...\"\n$configContent | Out-File -FilePath \"$configDir\\probe-config.yaml\" -Encoding UTF8\n\nWrite-Host \"Probe files installed successfully\"\nWrite-Host \"Probe script: $probeDir\\probe-standalone.py\"\nWrite-Host \"Configuration: $configDir\\probe-config.yaml\""
        },
        "timeout": 120,
        "retry_count": 1
      },
      {
        "id": "install_dependencies",
        "name": "Install Python Dependencies",
        "type": "windows_powershell",
        "description": "Install required Python packages for the remote probe",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n# Refresh environment variables to ensure Python is in PATH\n$env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n\n# Verify Python is available\ntry {\n    $pythonVersion = python --version 2>&1\n    Write-Host \"Using Python: $pythonVersion\"\n} catch {\n    throw \"Python not found in PATH. Please ensure Python is installed correctly.\"\n}\n\n# Upgrade pip first\nWrite-Host \"Upgrading pip...\"\npython -m pip install --upgrade pip\n\n# Install required packages\n$packages = @(\n    \"requests>=2.28.0\",\n    \"psutil>=5.9.0\",\n    \"PyYAML>=6.0\"\n)\n\nforeach ($package in $packages) {\n    Write-Host \"Installing $package...\"\n    python -m pip install $package\n    if ($LASTEXITCODE -ne 0) {\n        throw \"Failed to install $package\"\n    }\n}\n\n# Verify installations\nWrite-Host \"Verifying package installations...\"\n$verifyScript = @'\nimport sys\ntry:\n    import requests\n    import psutil\n    import yaml\n    print(\"All required packages installed successfully\")\n    print(f\"requests: {requests.__version__}\")\n    print(f\"psutil: {psutil.__version__}\")\n    print(f\"PyYAML: {yaml.__version__}\")\nexcept ImportError as e:\n    print(f\"Import error: {e}\")\n    sys.exit(1)\n'@\n\n$verifyScript | python\nif ($LASTEXITCODE -ne 0) {\n    throw \"Package verification failed\"\n}\n\nWrite-Host \"Python dependencies installed successfully\""
        },
        "timeout": 300,
        "retry_count": 2
      },
      {
        "id": "create_windows_service",
        "name": "Create Windows Service",
        "type": "windows_powershell",
        "description": "Create and configure Windows service for the remote probe",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n$probeDir = \"C:\\Program Files\\OpsConductor\\RemoteProbe\"\n$serviceName = \"OpsConductorRemoteProbe\"\n$serviceDisplayName = \"OpsConductor Remote Network Probe\"\n$serviceDescription = \"OpsConductor Network Analytics Remote Probe for monitoring and analysis\"\n\n# Create service wrapper script\n$serviceScript = @'\n@echo off\nREM OpsConductor Remote Probe Service Wrapper\ncd /d \"C:\\Program Files\\OpsConductor\\RemoteProbe\"\npython probe-standalone.py\n'@\n\n$serviceScript | Out-File -FilePath \"$probeDir\\run-probe.bat\" -Encoding ASCII\n\n# Check if service already exists\n$existingService = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\nif ($existingService) {\n    Write-Host \"Service $serviceName already exists, removing...\"\n    Stop-Service -Name $serviceName -Force -ErrorAction SilentlyContinue\n    sc.exe delete $serviceName\n    Start-Sleep -Seconds 2\n}\n\n# Create the service using NSSM (Non-Sucking Service Manager)\n# First, try to download NSSM if not available\n$nssmPath = \"$probeDir\\nssm.exe\"\nif (-not (Test-Path $nssmPath)) {\n    Write-Host \"Downloading NSSM (Non-Sucking Service Manager)...\"\n    try {\n        $nssmUrl = \"https://nssm.cc/release/nssm-2.24.zip\"\n        $nssmZip = \"$probeDir\\nssm.zip\"\n        Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip -UseBasicParsing\n        \n        # Extract NSSM\n        Add-Type -AssemblyName System.IO.Compression.FileSystem\n        [System.IO.Compression.ZipFile]::ExtractToDirectory($nssmZip, $probeDir)\n        \n        # Copy the appropriate NSSM executable\n        $arch = if ([Environment]::Is64BitOperatingSystem) { \"win64\" } else { \"win32\" }\n        Copy-Item \"$probeDir\\nssm-2.24\\$arch\\nssm.exe\" $nssmPath\n        \n        # Clean up\n        Remove-Item $nssmZip -Force\n        Remove-Item \"$probeDir\\nssm-2.24\" -Recurse -Force\n        \n        Write-Host \"NSSM downloaded and extracted successfully\"\n    } catch {\n        Write-Warning \"Failed to download NSSM: $($_.Exception.Message)\"\n        Write-Host \"Attempting to create service using sc.exe instead...\"\n        \n        # Fallback: Create service using sc.exe\n        $pythonPath = (Get-Command python).Source\n        $serviceCommand = \"`\"$pythonPath`\" `\"$probeDir\\probe-standalone.py`\"\"\n        \n        sc.exe create $serviceName binPath= $serviceCommand DisplayName= $serviceDisplayName start= auto\n        sc.exe description $serviceName $serviceDescription\n        \n        if ($LASTEXITCODE -eq 0) {\n            Write-Host \"Service created successfully using sc.exe\"\n        } else {\n            throw \"Failed to create service using sc.exe\"\n        }\n        \n        return\n    }\n}\n\n# Create service using NSSM\nif (Test-Path $nssmPath) {\n    Write-Host \"Creating service using NSSM...\"\n    \n    # Install the service\n    & $nssmPath install $serviceName python \"$probeDir\\probe-standalone.py\"\n    \n    # Configure service\n    & $nssmPath set $serviceName DisplayName $serviceDisplayName\n    & $nssmPath set $serviceName Description $serviceDescription\n    & $nssmPath set $serviceName Start SERVICE_AUTO_START\n    & $nssmPath set $serviceName AppDirectory \"$probeDir\"\n    & $nssmPath set $serviceName AppStdout \"$probeDir\\logs\\service-stdout.log\"\n    & $nssmPath set $serviceName AppStderr \"$probeDir\\logs\\service-stderr.log\"\n    & $nssmPath set $serviceName AppRotateFiles 1\n    & $nssmPath set $serviceName AppRotateOnline 1\n    & $nssmPath set $serviceName AppRotateSeconds 86400\n    & $nssmPath set $serviceName AppRotateBytes 1048576\n    \n    Write-Host \"Service configured successfully\"\n} else {\n    throw \"NSSM not available and sc.exe fallback failed\"\n}\n\n# Verify service creation\n$service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue\nif ($service) {\n    Write-Host \"Service '$serviceDisplayName' created successfully\"\n    Write-Host \"Service Name: $serviceName\"\n    Write-Host \"Status: $($service.Status)\"\n} else {\n    throw \"Service creation verification failed\"\n}\n\nWrite-Host \"Windows service setup completed\""
        },
        "timeout": 300,
        "retry_count": 1
      },
      {
        "id": "test_probe_connection",
        "name": "Test Probe Connection",
        "type": "windows_powershell",
        "description": "Test the probe connection to the central analyzer",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n$probeDir = \"C:\\Program Files\\OpsConductor\\RemoteProbe\"\n\n# Test script to verify probe functionality\n$testScript = @'\nimport sys\nimport os\nsys.path.insert(0, os.path.dirname(__file__))\n\ntry:\n    import requests\n    import psutil\n    import yaml\n    from datetime import datetime, timezone\n    import platform\n    \n    print(\"Testing probe connection...\")\n    \n    # Load configuration\n    config_path = os.path.join(os.path.dirname(__file__), \"config\", \"probe-config.yaml\")\n    with open(config_path, \"r\") as f:\n        config = yaml.safe_load(f)\n    \n    central_url = config[\"central_analyzer\"][\"url\"]\n    probe_id = config[\"probe\"][\"id\"]\n    \n    print(f\"Central Analyzer URL: {central_url}\")\n    print(f\"Probe ID: {probe_id}\")\n    \n    # Test basic connectivity\n    session = requests.Session()\n    session.timeout = 10\n    \n    # Test health endpoint\n    try:\n        response = session.get(f\"{central_url}/health\")\n        if response.status_code == 200:\n            print(\"✓ Central analyzer health check: OK\")\n        else:\n            print(f\"⚠ Central analyzer health check: {response.status_code}\")\n    except Exception as e:\n        print(f\"✗ Central analyzer health check failed: {e}\")\n    \n    # Test registration endpoint\n    try:\n        system_info = {\n            \"hostname\": platform.node(),\n            \"platform\": platform.platform(),\n            \"python_version\": platform.python_version()\n        }\n        \n        registration_data = {\n            \"probe_id\": probe_id,\n            \"probe_name\": config[\"probe\"][\"name\"],\n            \"probe_location\": config[\"probe\"][\"location\"],\n            \"system_info\": system_info,\n            \"capabilities\": [\"heartbeat\", \"interface_monitoring\"]\n        }\n        \n        response = session.post(\n            f\"{central_url}/api/v1/remote/register-probe\",\n            json=registration_data\n        )\n        \n        if response.status_code == 200:\n            print(\"✓ Probe registration test: OK\")\n        else:\n            print(f\"⚠ Probe registration test: {response.status_code} - {response.text}\")\n    except Exception as e:\n        print(f\"✗ Probe registration test failed: {e}\")\n    \n    # Test heartbeat endpoint\n    try:\n        heartbeat_data = {\n            \"probe_id\": probe_id,\n            \"timestamp\": datetime.now(timezone.utc).isoformat(),\n            \"status\": \"testing\",\n            \"system_stats\": {\n                \"cpu_percent\": psutil.cpu_percent(interval=1),\n                \"memory_percent\": psutil.virtual_memory().percent\n            }\n        }\n        \n        response = session.post(\n            f\"{central_url}/api/v1/remote/heartbeat\",\n            json=heartbeat_data\n        )\n        \n        if response.status_code == 200:\n            print(\"✓ Heartbeat test: OK\")\n        else:\n            print(f\"⚠ Heartbeat test: {response.status_code} - {response.text}\")\n    except Exception as e:\n        print(f\"✗ Heartbeat test failed: {e}\")\n    \n    print(\"\\nProbe connection test completed\")\n    \nexcept Exception as e:\n    print(f\"Test failed: {e}\")\n    sys.exit(1)\n'@\n\n# Write test script\n$testScript | Out-File -FilePath \"$probeDir\\test-connection.py\" -Encoding UTF8\n\n# Run the test\nWrite-Host \"Running probe connection test...\"\nSet-Location $probeDir\npython test-connection.py\n\nif ($LASTEXITCODE -eq 0) {\n    Write-Host \"Probe connection test completed successfully\"\n} else {\n    Write-Warning \"Probe connection test had issues, but installation can continue\"\n}\n\n# Clean up test script\nRemove-Item \"$probeDir\\test-connection.py\" -Force -ErrorAction SilentlyContinue"
        },
        "timeout": 120,
        "retry_count": 2
      },
      {
        "id": "start_service",
        "name": "Start Remote Probe Service",
        "type": "windows_powershell",
        "description": "Start the OpsConductor Remote Probe Windows service",
        "parameters": {
          "target_host": "192.168.50.211",
          "username": "{{ credentials.username }}",
          "password": "{{ credentials.password }}",
          "script": "$ErrorActionPreference = 'Stop'\n\n$serviceName = \"OpsConductorRemoteProbe\"\n\n# Start the service\nWrite-Host \"Starting $serviceName service...\"\nStart-Service -Name $serviceName\n\n# Wait a moment for service to start\nStart-Sleep -Seconds 5\n\n# Check service status\n$service = Get-Service -Name $serviceName\nWrite-Host \"Service Status: $($service.Status)\"\n\nif ($service.Status -eq 'Running') {\n    Write-Host \"✓ OpsConductor Remote Probe service started successfully\"\n    \n    # Show service details\n    $serviceDetails = Get-WmiObject -Class Win32_Service -Filter \"Name='$serviceName'\"\n    Write-Host \"Service Details:\"\n    Write-Host \"  Display Name: $($serviceDetails.DisplayName)\"\n    Write-Host \"  Description: $($serviceDetails.Description)\"\n    Write-Host \"  Start Mode: $($serviceDetails.StartMode)\"\n    Write-Host \"  State: $($serviceDetails.State)\"\n    Write-Host \"  Process ID: $($serviceDetails.ProcessId)\"\n    \n    # Check if probe is actually running by looking at logs\n    $logFile = \"C:\\Program Files\\OpsConductor\\RemoteProbe\\logs\\service-stdout.log\"\n    if (Test-Path $logFile) {\n        Write-Host \"\\nRecent log entries:\"\n        Get-Content $logFile -Tail 10 | ForEach-Object { Write-Host \"  $_\" }\n    }\n    \n} else {\n    Write-Warning \"Service is not running. Status: $($service.Status)\"\n    \n    # Try to get more information about why it failed\n    $eventLogs = Get-EventLog -LogName System -Source \"Service Control Manager\" -Newest 5 | Where-Object { $_.Message -like \"*$serviceName*\" }\n    if ($eventLogs) {\n        Write-Host \"Recent service events:\"\n        $eventLogs | ForEach-Object {\n            Write-Host \"  $($_.TimeGenerated): $($_.Message)\"\n        }\n    }\n    \n    throw \"Failed to start the remote probe service\"\n}\n\nWrite-Host \"\\n=== Installation Summary ===\"\nWrite-Host \"✓ OpsConductor Remote Probe installed successfully\"\nWrite-Host \"✓ Service created and started\"\nWrite-Host \"✓ Probe ID: windows-probe-192-168-50-211\"\nWrite-Host \"✓ Central Analyzer: http://192.168.50.210:3006\"\nWrite-Host \"✓ Installation Directory: C:\\Program Files\\OpsConductor\\RemoteProbe\"\nWrite-Host \"\\nThe remote probe is now running and should appear in your OpsConductor dashboard.\""
        },
        "timeout": 120,
        "retry_count": 2
      }
    ],
    "error_handling": {
      "on_step_failure": "continue_with_warning",
      "max_step_retries": 2,
      "retry_delay": 10
    },
    "notifications": {
      "on_success": true,
      "on_failure": true,
      "channels": ["email", "dashboard"]
    }
  }
}