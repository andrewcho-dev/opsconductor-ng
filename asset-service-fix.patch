--- a/asset-service/main.py
+++ b/asset-service/main.py
@@ -2353,11 +2353,25 @@ class ConsolidatedAssetService(BaseService):
                 plan = request.get("plan", {})
                 steps = plan.get("steps", [])
                 
+                # DEBUG: Log the full plan to see what we're receiving
+                import json
+                self.logger.info(f"ðŸ“‹ PLAN RECEIVED: {json.dumps(plan, indent=2)}")
+                
                 if not steps:
                     return {
                         "execution_id": execution_id,
                         "status": "failed",
                         "result": {},
                         "step_results": [],
                         "completed_at": datetime.utcnow().isoformat(),
                         "error_message": "No steps in plan"
                     }
                 
-                # Execute each asset step
+                # Separate asset steps from automation steps
+                asset_steps = []
+                automation_steps = []
+                
+                for idx, step in enumerate(steps):
+                    tool = step.get("tool", "unknown")
+                    if tool in ["asset-query", "asset_query", "asset-create", "asset_create", 
+                               "asset-update", "asset_update", "asset-delete", "asset_delete", 
+                               "asset-list", "asset_list"]:
+                        asset_steps.append((idx, step))
+                    else:
+                        automation_steps.append((idx, step))
+                
+                # Execute asset steps first
                 step_results = []
                 overall_success = True
+                loop_data = []  # Collect assets for loop execution
                 
-                for idx, step in enumerate(steps):
+                for idx, step in asset_steps:
                     tool = step.get("tool", "unknown")
                     inputs = step.get("inputs", {})
                     
@@ -2377,6 +2391,9 @@ class ConsolidatedAssetService(BaseService):
                         # Route to appropriate asset handler
                         if tool in ["asset-query", "asset_query"]:
                             result = await self._execute_asset_query_tool(inputs)
+                            # Store assets for loop execution
+                            if result.get("success") and result.get("assets"):
+                                loop_data = result["assets"]
                         elif tool in ["asset-create", "asset_create"]:
                             result = await self._execute_asset_create_tool(inputs)
                         elif tool in ["asset-update", "asset_update"]:
@@ -2413,6 +2430,62 @@ class ConsolidatedAssetService(BaseService):
                         })
                         overall_success = False
                 
+                # If there are automation steps, forward them to automation-service
+                if automation_steps and overall_success:
+                    self.logger.info(f"Forwarding {len(automation_steps)} automation steps to automation-service")
+                    
+                    # Build automation plan with loop data
+                    automation_plan = {
+                        "steps": [step for _, step in automation_steps],
+                        "loop_data": loop_data  # Pass assets for loop execution
+                    }
+                    
+                    automation_request = {
+                        "execution_id": execution_id,
+                        "plan": automation_plan,
+                        "tenant_id": request.get("tenant_id"),
+                        "actor_id": request.get("actor_id")
+                    }
+                    
+                    try:
+                        import httpx
+                        automation_service_url = os.getenv("AUTOMATION_SERVICE_URL", "http://automation-service:3003")
+                        
+                        async with httpx.AsyncClient(timeout=300.0) as client:
+                            self.logger.info(f"Forwarding to {automation_service_url}/execute-plan")
+                            response = await client.post(
+                                f"{automation_service_url}/execute-plan",
+                                json=automation_request
+                            )
+                            response.raise_for_status()
+                            automation_result = response.json()
+                            
+                            # Merge automation step results
+                            if automation_result.get("step_results"):
+                                step_results.extend(automation_result["step_results"])
+                            
+                            # Update overall success based on automation result
+                            if automation_result.get("status") == "failed":
+                                overall_success = False
+                                
+                            self.logger.info(f"Automation forwarding completed: {automation_result.get('status')}")
+                    
+                    except Exception as e:
+                        self.logger.error(f"Failed to forward to automation-service: {e}", exc_info=True)
+                        # Add error results for automation steps
+                        for idx, step in automation_steps:
+                            step_results.append({
+                                "step_index": idx,
+                                "tool": step.get("tool"),
+                                "status": "failed",
+                                "error": f"Failed to forward to automation-service: {str(e)}",
+                                "completed_at": datetime.utcnow().isoformat()
+                            })
+                        overall_success = False
+                
                 # Return result to ai-pipeline
                 return {
                     "execution_id": execution_id,