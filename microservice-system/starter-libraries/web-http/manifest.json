{
  "metadata": {
    "name": "web-http",
    "version": "1.0.0",
    "display_name": "Web & HTTP Tools",
    "description": "HTTP requests, web scraping, API testing, and web service interactions",
    "author": "OpsConductor Team",
    "author_email": "support@opsconductor.com",
    "homepage": "https://opsconductor.com/libraries/web-http",
    "repository": "https://github.com/opsconductor/web-http-library",
    "license": "MIT",
    "categories": [
      "web",
      "http",
      "api",
      "rest"
    ],
    "tags": [
      "http",
      "rest",
      "api",
      "web",
      "curl",
      "json",
      "xml"
    ],
    "dependencies": [],
    "min_opsconductor_version": "1.0.0",
    "is_premium": false
  },
  "steps": [
    {
      "name": "http_request",
      "display_name": "HTTP Request",
      "category": "Web/API",
      "description": "Make HTTP requests to web services and APIs",
      "icon": "\ud83c\udf10",
      "color": "#007bff",
      "inputs": 1,
      "outputs": 1,
      "parameters": {
        "method": {
          "type": "string",
          "required": true,
          "default": "GET",
          "description": "HTTP method to use",
          "options": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "HEAD",
            "OPTIONS"
          ],
          "validation": {
            "label": "HTTP Method"
          }
        },
        "url": {
          "type": "string",
          "required": true,
          "description": "Target URL for the request",
          "validation": {
            "placeholder": "https://api.example.com/users",
            "label": "URL"
          }
        },
        "headers": {
          "type": "string",
          "description": "HTTP headers (one per line, format: Name: Value)",
          "validation": {
            "placeholder": "Content-Type: application/json\nAuthorization: Bearer token123",
            "label": "Headers"
          }
        },
        "body": {
          "type": "string",
          "description": "Request body content (for POST, PUT, PATCH)",
          "validation": {
            "placeholder": "{\"name\": \"John\", \"email\": \"john@example.com\"}",
            "label": "Request Body"
          }
        },
        "timeout": {
          "type": "number",
          "default": 30,
          "description": "Request timeout",
          "validation": {
            "min": 1,
            "max": 300,
            "label": "Timeout (seconds)"
          }
        },
        "follow_redirects": {
          "type": "boolean",
          "default": true,
          "description": "Automatically follow HTTP redirects",
          "validation": {
            "label": "Follow Redirects"
          }
        },
        "verify_ssl": {
          "type": "boolean",
          "default": true,
          "description": "Verify SSL certificates",
          "validation": {
            "label": "Verify SSL"
          }
        }
      },
      "platform_support": [
        "windows",
        "linux",
        "macos"
      ],
      "required_permissions": [
        "network"
      ],
      "examples": [
        {
          "name": "Get User Data",
          "description": "Retrieve user information from API",
          "parameters": {
            "method": "GET",
            "url": "https://jsonplaceholder.typicode.com/users/1",
            "headers": "Accept: application/json"
          }
        },
        {
          "name": "Create User",
          "description": "Create a new user via API",
          "parameters": {
            "method": "POST",
            "url": "https://jsonplaceholder.typicode.com/users",
            "headers": "Content-Type: application/json",
            "body": "{\"name\": \"John Doe\", \"email\": \"john@example.com\"}"
          }
        }
      ]
    },
    {
      "name": "download_file",
      "display_name": "Download File",
      "category": "Web/API",
      "description": "Download files from web URLs",
      "icon": "\u2b07\ufe0f",
      "color": "#28a745",
      "inputs": 1,
      "outputs": 1,
      "parameters": {
        "url": {
          "type": "string",
          "required": true,
          "description": "URL of the file to download",
          "validation": {
            "placeholder": "https://example.com/file.zip",
            "label": "Download URL"
          }
        },
        "destination": {
          "type": "string",
          "required": true,
          "description": "Local path where file should be saved",
          "validation": {
            "placeholder": "C:\\Downloads\\file.zip",
            "label": "Destination Path"
          }
        },
        "headers": {
          "type": "string",
          "description": "HTTP headers for authentication or other purposes",
          "validation": {
            "placeholder": "Authorization: Bearer token123",
            "label": "Headers"
          }
        },
        "overwrite": {
          "type": "boolean",
          "default": false,
          "description": "Overwrite file if it already exists",
          "validation": {
            "label": "Overwrite Existing"
          }
        },
        "verify_checksum": {
          "type": "string",
          "description": "Expected MD5/SHA256 checksum to verify download",
          "validation": {
            "placeholder": "abc123def456...",
            "label": "Expected Checksum"
          }
        },
        "max_size_mb": {
          "type": "number",
          "default": 100,
          "description": "Maximum file size to download",
          "validation": {
            "min": 1,
            "max": 10000,
            "label": "Max Size (MB)"
          }
        }
      },
      "platform_support": [
        "windows",
        "linux",
        "macos"
      ],
      "required_permissions": [
        "network",
        "file_write"
      ],
      "examples": [
        {
          "name": "Download Software",
          "description": "Download software installer",
          "parameters": {
            "url": "https://example.com/software-installer.exe",
            "destination": "C:\\Temp\\installer.exe",
            "overwrite": true
          }
        }
      ]
    },
    {
      "name": "json_parse",
      "display_name": "Parse JSON",
      "category": "Data",
      "description": "Parse and extract data from JSON responses",
      "icon": "\ud83d\udcca",
      "color": "#ffc107",
      "inputs": 1,
      "outputs": 1,
      "parameters": {
        "json_data": {
          "type": "string",
          "required": true,
          "description": "JSON string to parse",
          "validation": {
            "placeholder": "{\"users\": [{\"name\": \"John\", \"id\": 1}]}",
            "label": "JSON Data"
          }
        },
        "json_path": {
          "type": "string",
          "description": "Path to extract specific data (JSONPath syntax)",
          "validation": {
            "placeholder": "$.users[0].name",
            "label": "JSON Path"
          }
        },
        "output_format": {
          "type": "string",
          "default": "raw",
          "description": "Format for extracted data",
          "options": [
            "raw",
            "string",
            "array",
            "object"
          ],
          "validation": {
            "label": "Output Format"
          }
        },
        "default_value": {
          "type": "string",
          "description": "Value to return if path not found",
          "validation": {
            "placeholder": "Not found",
            "label": "Default Value"
          }
        }
      },
      "platform_support": [
        "windows",
        "linux",
        "macos"
      ],
      "required_permissions": [],
      "examples": [
        {
          "name": "Extract User Name",
          "description": "Get user name from API response",
          "parameters": {
            "json_data": "{\"user\": {\"name\": \"John Doe\", \"id\": 123}}",
            "json_path": "$.user.name",
            "output_format": "string"
          }
        },
        {
          "name": "Get All User IDs",
          "description": "Extract array of user IDs",
          "parameters": {
            "json_data": "{\"users\": [{\"id\": 1}, {\"id\": 2}, {\"id\": 3}]}",
            "json_path": "$.users[*].id",
            "output_format": "array"
          }
        }
      ]
    },
    {
      "name": "xml_parse",
      "display_name": "Parse XML",
      "category": "Data",
      "description": "Parse and extract data from XML documents",
      "icon": "\ud83d\udcc4",
      "color": "#dc3545",
      "inputs": 1,
      "outputs": 1,
      "parameters": {
        "xml_data": {
          "type": "string",
          "required": true,
          "description": "XML string to parse",
          "validation": {
            "placeholder": "<users><user id=\"1\"><name>John</name></user></users>",
            "label": "XML Data"
          }
        },
        "xpath": {
          "type": "string",
          "description": "XPath to extract specific data",
          "validation": {
            "placeholder": "//user[@id='1']/name/text()",
            "label": "XPath Expression"
          }
        },
        "output_format": {
          "type": "string",
          "default": "text",
          "description": "Format for extracted data",
          "options": [
            "text",
            "element",
            "attribute",
            "array"
          ],
          "validation": {
            "label": "Output Format"
          }
        },
        "namespace_map": {
          "type": "string",
          "description": "Namespace mappings (prefix:uri, one per line)",
          "validation": {
            "placeholder": "soap:http://schemas.xmlsoap.org/soap/envelope/",
            "label": "Namespace Map"
          }
        }
      },
      "platform_support": [
        "windows",
        "linux",
        "macos"
      ],
      "required_permissions": [],
      "examples": [
        {
          "name": "Extract User Name",
          "description": "Get user name from XML response",
          "parameters": {
            "xml_data": "<user><name>John Doe</name><id>123</id></user>",
            "xpath": "//name/text()",
            "output_format": "text"
          }
        }
      ]
    },
    {
      "name": "web_scrape",
      "display_name": "Web Scraping",
      "category": "Web/API",
      "description": "Extract data from web pages using CSS selectors",
      "icon": "\ud83d\udd77\ufe0f",
      "color": "#6f42c1",
      "inputs": 1,
      "outputs": 1,
      "parameters": {
        "url": {
          "type": "string",
          "required": true,
          "description": "URL of the web page to scrape",
          "validation": {
            "placeholder": "https://example.com/page",
            "label": "Target URL"
          }
        },
        "selector": {
          "type": "string",
          "required": true,
          "description": "CSS selector to find elements",
          "validation": {
            "placeholder": ".title, #content, h1",
            "label": "CSS Selector"
          }
        },
        "attribute": {
          "type": "string",
          "description": "Attribute to extract (leave empty for text content)",
          "validation": {
            "placeholder": "href, src, title",
            "label": "Attribute"
          }
        },
        "headers": {
          "type": "string",
          "description": "HTTP headers to send with request",
          "validation": {
            "placeholder": "User-Agent: Mozilla/5.0...",
            "label": "Headers"
          }
        },
        "wait_time": {
          "type": "number",
          "default": 5,
          "description": "Time to wait for page to load",
          "validation": {
            "min": 0,
            "max": 60,
            "label": "Wait Time (seconds)"
          }
        },
        "max_results": {
          "type": "number",
          "default": 10,
          "description": "Maximum number of elements to extract",
          "validation": {
            "min": 1,
            "max": 1000,
            "label": "Max Results"
          }
        }
      },
      "platform_support": [
        "windows",
        "linux",
        "macos"
      ],
      "required_permissions": [
        "network"
      ],
      "examples": [
        {
          "name": "Extract Page Titles",
          "description": "Get all h1 titles from a page",
          "parameters": {
            "url": "https://example.com",
            "selector": "h1",
            "max_results": 5
          }
        },
        {
          "name": "Get All Links",
          "description": "Extract all links from a page",
          "parameters": {
            "url": "https://example.com",
            "selector": "a",
            "attribute": "href",
            "max_results": 20
          }
        }
      ]
    },
    {
      "name": "api_test",
      "display_name": "API Test Suite",
      "category": "Testing",
      "description": "Comprehensive API testing with assertions and validations",
      "icon": "\ud83e\uddea",
      "color": "#e83e8c",
      "inputs": 1,
      "outputs": 1,
      "parameters": {
        "base_url": {
          "type": "string",
          "required": true,
          "description": "Base URL for the API",
          "validation": {
            "placeholder": "https://api.example.com",
            "label": "Base URL"
          }
        },
        "endpoints": {
          "type": "string",
          "required": true,
          "description": "List of endpoints to test (one per line)",
          "validation": {
            "placeholder": "/users\n/users/1\n/posts",
            "label": "Endpoints to Test"
          }
        },
        "expected_status": {
          "type": "number",
          "default": 200,
          "description": "Expected HTTP status code",
          "validation": {
            "min": 100,
            "max": 599,
            "label": "Expected Status Code"
          }
        },
        "auth_header": {
          "type": "string",
          "description": "Authorization header value",
          "validation": {
            "placeholder": "Bearer token123",
            "label": "Authorization Header"
          }
        },
        "response_checks": {
          "type": "string",
          "description": "JSON paths to validate in response",
          "validation": {
            "placeholder": "$.data.length > 0\n$.status == 'success'",
            "label": "Response Checks"
          }
        },
        "timeout": {
          "type": "number",
          "default": 30,
          "description": "Request timeout for each endpoint",
          "validation": {
            "min": 1,
            "max": 300,
            "label": "Timeout (seconds)"
          }
        }
      },
      "platform_support": [
        "windows",
        "linux",
        "macos"
      ],
      "required_permissions": [
        "network"
      ],
      "examples": [
        {
          "name": "Test REST API",
          "description": "Test multiple REST API endpoints",
          "parameters": {
            "base_url": "https://jsonplaceholder.typicode.com",
            "endpoints": "/users\n/posts\n/comments",
            "expected_status": 200,
            "response_checks": "$.length > 0"
          }
        }
      ]
    }
  ]
}