name: Validate Volume Mounts

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yml'
      - '*/**.py'
      - 'frontend/src/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yml'
      - '*/**.py'
      - 'frontend/src/**'

jobs:
  validate-volume-mounts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Make validation script executable
      run: chmod +x scripts/validate-mounts.sh
      
    - name: Validate volume mounts
      run: ./scripts/validate-mounts.sh
      
    - name: Check for dangerous full directory mounts
      run: |
        # Check both compose files for dangerous mounts
        DANGER_FOUND=0
        
        for file in docker-compose.dev.yml docker-compose.clean.yml; do
          if [ -f "$file" ]; then
            if grep -E "^\s*-\s*\./[^/]+:/app\s*$" "$file"; then
              echo "‚ùå CRITICAL ERROR: Full directory volume mounts detected in $file!"
              echo "These will break container environments and cause Python version mismatches."
              echo ""
              echo "Found dangerous mounts in $file:"
              grep -E "^\s*-\s*\./[^/]+:/app\s*$" "$file"
              DANGER_FOUND=1
            fi
          fi
        done
        
        if [ $DANGER_FOUND -eq 1 ]; then
          echo ""
          echo "üîß FIX: Use selective file mounts instead."
          echo "üìñ See VOLUME_MOUNT_STRATEGY.md for examples."
          exit 1
        else
          echo "‚úÖ No dangerous full directory mounts found"
        fi
        
    - name: Comment on PR if validation fails
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ‚ùå Volume Mount Validation Failed

            Your changes contain dangerous full directory volume mounts that will break container environments.

            ### The Problem
            Full directory mounts like \`./service:/app\` override the entire container directory, including:
            - Python virtual environments
            - Installed packages  
            - Built dependencies
            - This causes Python version mismatches and missing dependencies

            ### The Solution
            Use our new simplified approach:

            **For Development (live changes):**
            \`\`\`yaml
            # Use docker-compose.dev.yml with selective mounts
            volumes:
              - ./ai-brain/main_clean.py:/app/main_clean.py
              - ./ai-brain/orchestration:/app/orchestration
              - ./shared:/app/shared
            \`\`\`

            **For Production (no mounts):**
            \`\`\`yaml
            # Use docker-compose.clean.yml with no service mounts
            # Everything baked into containers
            \`\`\`

            ### Quick Fix
            1. Run: \`./scripts/validate-mounts.sh\`
            2. Use \`./scripts/dev-mode.sh\` for development
            3. Use \`./scripts/prod-mode.sh\` for production

            üìñ See \`VOLUME_MOUNT_STRATEGY.md\` for complete documentation.
            `
          })