{
  "format_version": "1.0",
  "export_timestamp": "2025-09-08T20:15:00.000000+00:00",
  "export_metadata": {
    "exported_by": "sample",
    "opsconductor_version": "2.0.0",
    "description": "Monitoring and maintenance sample jobs",
    "job_count": 2
  },
  "jobs": [
    {
      "name": "System Monitoring",
      "description": "Automated system health monitoring",
      "version": 1,
      "metadata": {},
      "parameters": {
        "cpu_threshold": {
          "type": "number",
          "default": 80,
          "description": "CPU usage threshold percentage"
        },
        "memory_threshold": {
          "type": "number",
          "default": 85,
          "description": "Memory usage threshold percentage"
        }
      },
      "nodes": [
        {
          "id": "start_1",
          "type": "flow.start",
          "position": { "x": 150, "y": 100 },
          "data": {
            "name": "Start Monitoring",
            "trigger_type": "scheduled"
          }
        },
        {
          "id": "check_cpu",
          "type": "action.command",
          "position": { "x": 150, "y": 200 },
          "data": {
            "name": "Check CPU Usage",
            "command": "top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1",
            "shell": "bash",
            "target": "monitoring-server",
            "timeout": 30,
            "connection_type": "ssh",
            "description": "Get current CPU usage"
          }
        },
        {
          "id": "check_memory",
          "type": "action.command",
          "position": { "x": 150, "y": 300 },
          "data": {
            "name": "Check Memory Usage",
            "command": "free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'",
            "shell": "bash",
            "target": "monitoring-server",
            "timeout": 30,
            "connection_type": "ssh",
            "description": "Get current memory usage"
          }
        },
        {
          "id": "transform_data",
          "type": "data.transform",
          "position": { "x": 150, "y": 400 },
          "data": {
            "name": "Transform Metrics",
            "script": "cpu_usage = float(steps.check_cpu.output.strip())\nmemory_usage = float(steps.check_memory.output.strip())\nresult = {'cpu': cpu_usage, 'memory': memory_usage, 'alert': cpu_usage > {{cpu_threshold}} or memory_usage > {{memory_threshold}}}",
            "description": "Process monitoring data"
          }
        },
        {
          "id": "check_thresholds",
          "type": "logic.if",
          "position": { "x": 150, "y": 500 },
          "data": {
            "name": "Check Thresholds",
            "condition": "previous_step.result.alert == true",
            "description": "Check if any thresholds exceeded"
          }
        },
        {
          "id": "send_alert",
          "type": "action.notification",
          "position": { "x": 50, "y": 600 },
          "data": {
            "name": "Send Alert",
            "notification_type": "email",
            "message": "System alert: CPU {{previous_step.result.cpu}}%, Memory {{previous_step.result.memory}}%",
            "recipients": ["ops@company.com"],
            "description": "Send threshold alert"
          }
        },
        {
          "id": "log_metrics",
          "type": "action.command",
          "position": { "x": 250, "y": 600 },
          "data": {
            "name": "Log Metrics",
            "command": "echo \"$(date): CPU {{previous_step.result.cpu}}%, Memory {{previous_step.result.memory}}%\" >> /var/log/system-metrics.log",
            "shell": "bash",
            "target": "monitoring-server",
            "timeout": 30,
            "connection_type": "ssh",
            "description": "Log normal metrics"
          }
        },
        {
          "id": "end_1",
          "type": "flow.end",
          "position": { "x": 150, "y": 700 },
          "data": {
            "name": "End Monitoring",
            "status": "success"
          }
        }
      ],
      "edges": [
        {
          "id": "e1",
          "source": "start_1",
          "target": "check_cpu",
          "condition": "always"
        },
        {
          "id": "e2",
          "source": "check_cpu",
          "target": "check_memory",
          "condition": "always"
        },
        {
          "id": "e3",
          "source": "check_memory",
          "target": "transform_data",
          "condition": "always"
        },
        {
          "id": "e4",
          "source": "transform_data",
          "target": "check_thresholds",
          "condition": "always"
        },
        {
          "id": "e5",
          "source": "check_thresholds",
          "target": "send_alert",
          "condition": "true"
        },
        {
          "id": "e6",
          "source": "check_thresholds",
          "target": "log_metrics",
          "condition": "false"
        },
        {
          "id": "e7",
          "source": "send_alert",
          "target": "end_1",
          "condition": "always"
        },
        {
          "id": "e8",
          "source": "log_metrics",
          "target": "end_1",
          "condition": "always"
        }
      ]
    },
    {
      "name": "Log Cleanup",
      "description": "Automated log file cleanup and archival",
      "version": 1,
      "metadata": {},
      "parameters": {
        "log_path": {
          "type": "string",
          "default": "/var/log",
          "description": "Path to log files"
        },
        "days_old": {
          "type": "number",
          "default": 30,
          "description": "Age of logs to archive (days)"
        }
      },
      "nodes": [
        {
          "id": "start_1",
          "type": "flow.start",
          "position": { "x": 200, "y": 100 },
          "data": {
            "name": "Start Cleanup",
            "trigger_type": "scheduled"
          }
        },
        {
          "id": "find_old_logs",
          "type": "action.command",
          "position": { "x": 200, "y": 200 },
          "data": {
            "name": "Find Old Logs",
            "command": "find {{log_path}} -name '*.log' -mtime +{{days_old}} -type f",
            "shell": "bash",
            "target": "log-server",
            "timeout": 60,
            "connection_type": "ssh",
            "description": "Find logs older than specified days"
          }
        },
        {
          "id": "archive_logs",
          "type": "action.command",
          "position": { "x": 200, "y": 300 },
          "data": {
            "name": "Archive Old Logs",
            "command": "find {{log_path}} -name '*.log' -mtime +{{days_old}} -type f -exec gzip {} \\;",
            "shell": "bash",
            "target": "log-server",
            "timeout": 300,
            "connection_type": "ssh",
            "description": "Compress old log files"
          }
        },
        {
          "id": "cleanup_temp",
          "type": "action.command",
          "position": { "x": 200, "y": 400 },
          "data": {
            "name": "Cleanup Temp Files",
            "command": "find /tmp -name '*.tmp' -mtime +7 -delete",
            "shell": "bash",
            "target": "log-server",
            "timeout": 120,
            "connection_type": "ssh",
            "description": "Remove old temporary files"
          }
        },
        {
          "id": "report_cleanup",
          "type": "action.notification",
          "position": { "x": 200, "y": 500 },
          "data": {
            "name": "Report Cleanup",
            "notification_type": "email",
            "message": "Log cleanup completed. Archived logs older than {{days_old}} days in {{log_path}}",
            "recipients": ["admin@company.com"],
            "description": "Send cleanup report"
          }
        },
        {
          "id": "end_1",
          "type": "flow.end",
          "position": { "x": 200, "y": 600 },
          "data": {
            "name": "End Cleanup",
            "status": "success"
          }
        }
      ],
      "edges": [
        {
          "id": "e1",
          "source": "start_1",
          "target": "find_old_logs",
          "condition": "always"
        },
        {
          "id": "e2",
          "source": "find_old_logs",
          "target": "archive_logs",
          "condition": "always"
        },
        {
          "id": "e3",
          "source": "archive_logs",
          "target": "cleanup_temp",
          "condition": "always"
        },
        {
          "id": "e4",
          "source": "cleanup_temp",
          "target": "report_cleanup",
          "condition": "always"
        },
        {
          "id": "e5",
          "source": "report_cleanup",
          "target": "end_1",
          "condition": "always"
        }
      ]
    }
  ]
}