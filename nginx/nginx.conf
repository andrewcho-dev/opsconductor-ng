events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # DNS resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=10s ipv6=off;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Handle large headers (for JWT tokens)
    large_client_header_buffers 4 32k;
    client_header_buffer_size 8k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Upstream definitions with dynamic resolution
    upstream auth-service { 
        server opsconductor-auth:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream user-service { 
        server opsconductor-users:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream credentials-service { 
        server opsconductor-credentials:3004 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream targets-service { 
        server opsconductor-targets:3005 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream jobs-service { 
        server opsconductor-jobs:3006 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream executor-service { 
        server opsconductor-executor:3007 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream notification-service { 
        server opsconductor-notification:3009 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream discovery-service { 
        server opsconductor-discovery:3010 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream step-libraries-service { 
        server opsconductor-step-libraries:3011 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream frontend { 
        server opsconductor-frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    upstream flower { 
        server opsconductor-flower:5555 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP server (redirect to HTTPS except for API)
    server {
        listen 80;
        server_name _;
        
        # API endpoints - proxy to services without redirect
        location = /api/v1/targets {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://targets-service/targets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/credentials {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://credentials-service/credentials;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/auth/login {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://auth-service/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        

        
        # API catch-all - route to appropriate services
        location ~ ^/api/v1/auth/(.*)$ {
            proxy_pass http://auth-service/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/users(.*)$ {
            proxy_pass http://user-service/users$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/credentials(.*)$ {
            proxy_pass http://credentials-service/credentials$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/targets(.*)$ {
            proxy_pass http://targets-service/targets$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/jobs/export {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://jobs-service/jobs/export;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/jobs/import {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://jobs-service/jobs/import;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Jobs service health endpoint - specific route
        location = /api/v1/jobs/health {
            proxy_pass http://jobs-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/jobs(.*)$ {
            proxy_pass http://jobs-service/jobs$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        

        
        location ~ ^/api/v1/executor(.*)$ {
            proxy_pass http://executor-service$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        

        
        location ~ ^/api/v1/notification(.*)$ {
            proxy_pass http://notification-service$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery(.*)$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://discovery-service$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Pass user info to service
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        location ~ ^/api/v1/step-libraries(.*)$ {
            proxy_pass http://step-libraries-service/api/v1$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Flower static assets - handle /flower/static/ requests
        location ~ ^/flower/static/(.*)$ {
            proxy_pass http://flower/static/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Flower Dashboard - Celery monitoring (proxy everything under /flower to Flower service)
        location /flower {
            # Remove /flower prefix when proxying to Flower
            rewrite ^/flower(/.*)$ $1 break;
            rewrite ^/flower$ / break;
            
            proxy_pass http://flower;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for real-time updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Rewrite static asset paths and navigation links in HTML responses
            sub_filter 'href="/static/' 'href="/flower/static/';
            sub_filter 'src="/static/' 'src="/flower/static/';
            sub_filter 'url("/static/' 'url("/flower/static/';
            sub_filter 'href="/"' 'href="/flower/"';
            sub_filter 'href="/workers"' 'href="/flower/workers"';
            sub_filter 'href="/tasks"' 'href="/flower/tasks"';
            sub_filter 'href="/broker"' 'href="/flower/broker"';
            sub_filter 'href="/monitor"' 'href="/flower/monitor"';
            sub_filter 'href="/api"' 'href="/flower/api"';
            sub_filter '"/workers"' '"/flower/workers"';
            sub_filter '"/tasks"' '"/flower/tasks"';
            sub_filter '"/broker"' '"/flower/broker"';
            sub_filter '"/monitor"' '"/flower/monitor"';
            sub_filter '"/api/' '"/flower/api/';
            sub_filter '<body class="m-2">' '<body class="m-2"><input type="hidden" id="url_prefix" value="/flower">';
            sub_filter_once off;
            sub_filter_types text/html text/css application/javascript;
        }
        
        # Infrastructure health endpoints
        location = /api/v1/nginx/health {
            access_log off;
            return 200 '{"service": "nginx", "status": "healthy", "version": "1.0.0"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/frontend/health {
            access_log off;
            return 200 '{"service": "frontend", "status": "healthy", "version": "1.0.0", "note": "React app served via nginx"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/redis/health {
            access_log off;
            return 200 '{"service": "redis", "status": "healthy", "version": "1.0.0", "note": "Container health check - Redis accessible via application services"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/postgres/health {
            access_log off;
            return 200 '{"service": "postgres", "status": "healthy", "version": "1.0.0", "note": "Container health check - Database accessible via application services"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/celery-worker/health {
            access_log off;
            return 200 '{"service": "celery-worker", "status": "healthy", "version": "1.0.0", "note": "Container health check"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/celery-beat/health {
            access_log off;
            return 200 '{"service": "celery-beat", "status": "healthy", "version": "1.0.0", "note": "Container health check"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/flower/health {
            access_log off;
            return 200 '{"service": "flower", "status": "healthy", "version": "1.0.0", "note": "Container health check"}';
            add_header Content-Type application/json;
        }
        
        # Frontend - serve from frontend container
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CORS headers for development
        add_header Access-Control-Allow-Origin "http://localhost:3000" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";



        # API Gateway - Explicit Location Blocks (No Regex)
        
        # Handle preflight requests for all API endpoints
        # This location block only handles OPTIONS requests for CORS preflight
        # All other requests will fall through to more specific location blocks
        
        # Auth Service Endpoints
        location = /api/v1/auth/login {
            proxy_pass http://auth-service/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/auth/refresh {
            proxy_pass http://auth-service/refresh;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/auth/revoke-all {
            proxy_pass http://auth-service/revoke-all;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/auth/verify {
            proxy_pass http://auth-service/verify;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/auth/health {
            proxy_pass http://auth-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Internal auth endpoint for nginx auth_request
        location = /auth {
            internal;
            proxy_pass http://auth-service/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

        # User Service Endpoints
        location = /api/v1/users {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://user-service/users;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        location ~ ^/api/v1/users/([0-9]+)$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://user-service/users/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        location ~ ^/api/v1/users/([0-9]+)/roles$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://user-service/users/$1/roles;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        location ~ ^/api/v1/users/([0-9]+)/notification-preferences$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://user-service/users/$1/notification-preferences;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        location = /api/v1/users/health {
            proxy_pass http://user-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Targets Service Endpoints
        location = /api/v1/targets/service-definitions {
            proxy_pass http://targets-service/service-definitions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/targets {
            proxy_pass http://targets-service/targets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/targets/([0-9]+)$ {
            proxy_pass http://targets-service/targets/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/targets/([0-9]+)/credentials$ {
            proxy_pass http://targets-service/targets/$1/credentials;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/targets/([0-9]+)/credentials/([0-9]+)$ {
            proxy_pass http://targets-service/targets/$1/credentials/$2;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/targets/health {
            proxy_pass http://targets-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Jobs Service Endpoints
        location = /api/v1/jobs {
            proxy_pass http://jobs-service/jobs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/jobs/([0-9]+)$ {
            proxy_pass http://jobs-service/jobs/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/jobs/([0-9]+)/run$ {
            proxy_pass http://jobs-service/jobs/$1/run;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/jobs/health {
            proxy_pass http://jobs-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Job Runs Endpoints (handled by jobs service) - specific routes first
        location ~ ^/api/v1/runs/([0-9]+)$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://jobs-service/runs/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        location ~ ^/api/v1/runs/([0-9]+)/steps$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://jobs-service/runs/$1/steps;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }
        
        # Job Runs base endpoint - must come after specific routes
        location ~ ^/api/v1/runs(\?.*)?$ {
            # Gateway authentication
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_role $upstream_http_x_user_role;
            
            proxy_pass http://jobs-service/runs$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Role $user_role;
        }

        # Credentials Service Endpoints
        location = /api/v1/credentials {
            proxy_pass http://credentials-service/credentials;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/credentials/([0-9]+)$ {
            proxy_pass http://credentials-service/credentials/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/credentials/([0-9]+)/decrypt$ {
            proxy_pass http://credentials-service/credentials/$1/decrypt;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/credentials/([0-9]+)/rotate$ {
            proxy_pass http://credentials-service/credentials/$1/rotate;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/credentials/by-name/(.+)$ {
            proxy_pass http://credentials-service/credentials/by-name/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/credentials/health {
            proxy_pass http://credentials-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Executor Service Endpoints
        location = /api/v1/executor/health {
            proxy_pass http://executor-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/executor/status {
            proxy_pass http://executor-service/status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/executor/celery/status {
            proxy_pass http://executor-service/celery/status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/executor/celery/metrics {
            proxy_pass http://executor-service/celery/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/executor/celery/queues {
            proxy_pass http://executor-service/celery/queues;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }



        # Notification Service Endpoints
        location = /api/v1/notification/health {
            proxy_pass http://notification-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/status {
            proxy_pass http://notification-service/status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/notification/preferences/([0-9]+)$ {
            proxy_pass http://notification-service/preferences/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/channels {
            proxy_pass http://notification-service/channels;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/notifications/enhanced {
            proxy_pass http://notification-service/notifications/enhanced;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/internal/notifications/enhanced {
            proxy_pass http://notification-service/internal/notifications/enhanced;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/worker/start {
            proxy_pass http://notification-service/worker/start;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/worker/stop {
            proxy_pass http://notification-service/worker/stop;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/notifications {
            proxy_pass http://notification-service/notifications;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/smtp/settings {
            proxy_pass http://notification-service/smtp/settings;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/notification/smtp/test {
            proxy_pass http://notification-service/smtp/test;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Discovery Service Endpoints
        location = /api/v1/discovery/health {
            proxy_pass http://discovery-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/whoami {
            proxy_pass http://discovery-service/whoami;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/test-simple {
            proxy_pass http://discovery-service/test-simple;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/validate-network-ranges {
            proxy_pass http://discovery-service/validate-network-ranges;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/discovery-jobs {
            proxy_pass http://discovery-service/discovery-jobs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/jobs {
            proxy_pass http://discovery-service/jobs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/discovery-jobs/([0-9]+)$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://discovery-service/discovery-jobs/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/discovery-jobs/([0-9]+)/summary$ {
            proxy_pass http://discovery-service/discovery-jobs/$1/summary;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/discovery-jobs/([0-9]+)/run$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://discovery-service/discovery-jobs/$1/run;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/discovery-jobs/([0-9]+)/cancel$ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "http://localhost:3000";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
                add_header Access-Control-Allow-Credentials "true";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            proxy_pass http://discovery-service/discovery-jobs/$1/cancel;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/discovery/targets {
            proxy_pass http://discovery-service/discovery/targets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/targets {
            proxy_pass http://discovery-service/targets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/discovery/targets/import {
            proxy_pass http://discovery-service/discovery/targets/import;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/discovery/import-targets {
            proxy_pass http://discovery-service/discovery/import-targets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/import-targets {
            proxy_pass http://discovery-service/import-targets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/discovery/targets/ignore {
            proxy_pass http://discovery-service/discovery/targets/ignore;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/discovery/discovery/targets/bulk {
            proxy_pass http://discovery-service/discovery/targets/bulk;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/discovery/targets/([0-9]+)$ {
            proxy_pass http://discovery-service/discovery/targets/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/jobs/([0-9]+)$ {
            proxy_pass http://discovery-service/jobs/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/discovery/jobs/([0-9]+)/cancel$ {
            proxy_pass http://discovery-service/jobs/$1/cancel;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Step Libraries Service Endpoints
        location = /api/v1/step-libraries/health {
            proxy_pass http://step-libraries-service/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/libraries {
            proxy_pass http://step-libraries-service/api/v1/libraries;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/step-libraries/libraries/([0-9]+)$ {
            proxy_pass http://step-libraries-service/api/v1/libraries/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/libraries/install {
            proxy_pass http://step-libraries-service/api/v1/libraries/install;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location ~ ^/api/v1/step-libraries/libraries/([0-9]+)/toggle$ {
            proxy_pass http://step-libraries-service/api/v1/libraries/$1/toggle;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/steps {
            proxy_pass http://step-libraries-service/api/v1/steps;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/debug/steps {
            proxy_pass http://step-libraries-service/api/v1/debug/steps;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/performance {
            proxy_pass http://step-libraries-service/api/v1/performance;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/cache/clear {
            proxy_pass http://step-libraries-service/api/v1/cache/clear;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location = /api/v1/step-libraries/analytics/usage {
            proxy_pass http://step-libraries-service/api/v1/analytics/usage;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Flower static assets - handle /flower/static/ requests
        location ~ ^/flower/static/(.*)$ {
            proxy_pass http://flower/static/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Flower Dashboard - Celery monitoring (proxy everything under /flower to Flower service)
        location /flower {
            # Remove /flower prefix when proxying to Flower
            rewrite ^/flower(/.*)$ $1 break;
            rewrite ^/flower$ / break;
            
            proxy_pass http://flower;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for real-time updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Rewrite static asset paths and navigation links in HTML responses
            sub_filter 'href="/static/' 'href="/flower/static/';
            sub_filter 'src="/static/' 'src="/flower/static/';
            sub_filter 'url("/static/' 'url("/flower/static/';
            sub_filter 'href="/"' 'href="/flower/"';
            sub_filter 'href="/workers"' 'href="/flower/workers"';
            sub_filter 'href="/tasks"' 'href="/flower/tasks"';
            sub_filter 'href="/broker"' 'href="/flower/broker"';
            sub_filter 'href="/monitor"' 'href="/flower/monitor"';
            sub_filter 'href="/api"' 'href="/flower/api"';
            sub_filter '"/workers"' '"/flower/workers"';
            sub_filter '"/tasks"' '"/flower/tasks"';
            sub_filter '"/broker"' '"/flower/broker"';
            sub_filter '"/monitor"' '"/flower/monitor"';
            sub_filter '"/api/' '"/flower/api/';
            sub_filter '<body class="m-2">' '<body class="m-2"><input type="hidden" id="url_prefix" value="/flower">';
            sub_filter_once off;
            sub_filter_types text/html text/css application/javascript;
        }

        # Infrastructure health endpoints
        location = /api/v1/nginx/health {
            access_log off;
            return 200 '{"service": "nginx", "status": "healthy", "version": "1.0.0"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/frontend/health {
            access_log off;
            return 200 '{"service": "frontend", "status": "healthy", "version": "1.0.0", "note": "React app served via nginx"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/redis/health {
            access_log off;
            return 200 '{"service": "redis", "status": "healthy", "version": "1.0.0", "note": "Container health check - Redis accessible via application services"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/postgres/health {
            access_log off;
            return 200 '{"service": "postgres", "status": "healthy", "version": "1.0.0", "note": "Container health check - Database accessible via application services"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/celery-worker/health {
            access_log off;
            return 200 '{"service": "celery-worker", "status": "healthy", "version": "1.0.0", "note": "Container health check"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/celery-beat/health {
            access_log off;
            return 200 '{"service": "celery-beat", "status": "healthy", "version": "1.0.0", "note": "Container health check"}';
            add_header Content-Type application/json;
        }
        
        location = /api/v1/flower/health {
            access_log off;
            return 200 '{"service": "flower", "status": "healthy", "version": "1.0.0", "note": "Container health check"}';
            add_header Content-Type application/json;
        }

        # Frontend - catch all other requests (SPA routing and static files)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Disable caching for development
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }
}