{"ast":null,"code":"var _jsxFileName = \"/app/src/components/ConnectionTypeSelector.tsx\";\nimport React from 'react';\nimport { Wifi, Terminal, Shield, Globe } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionTypeSelector = ({\n  value,\n  onChange,\n  targetType\n}) => {\n  var _connectionTypes$find, _connectionTypes$find2, _connectionTypes$find3;\n  // Define available connection types based on target type\n  const getConnectionTypes = () => {\n    const baseTypes = [{\n      value: 'ssh',\n      label: 'SSH',\n      icon: /*#__PURE__*/_jsxDEV(Terminal, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 43\n      }, this),\n      description: 'Secure Shell (Linux/Unix)'\n    }, {\n      value: 'winrm',\n      label: 'WinRM',\n      icon: /*#__PURE__*/_jsxDEV(Shield, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 47\n      }, this),\n      description: 'Windows Remote Management'\n    }, {\n      value: 'rdp',\n      label: 'RDP',\n      icon: /*#__PURE__*/_jsxDEV(Globe, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 43\n      }, this),\n      description: 'Remote Desktop Protocol'\n    }, {\n      value: 'telnet',\n      label: 'Telnet',\n      icon: /*#__PURE__*/_jsxDEV(Terminal, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 49\n      }, this),\n      description: 'Telnet (Legacy)'\n    }, {\n      value: 'snmp',\n      label: 'SNMP',\n      icon: /*#__PURE__*/_jsxDEV(Wifi, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 45\n      }, this),\n      description: 'Simple Network Management Protocol'\n    }, {\n      value: 'http',\n      label: 'HTTP',\n      icon: /*#__PURE__*/_jsxDEV(Globe, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 45\n      }, this),\n      description: 'HTTP/HTTPS API'\n    }, {\n      value: 'powershell',\n      label: 'PowerShell',\n      icon: /*#__PURE__*/_jsxDEV(Terminal, {\n        size: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 57\n      }, this),\n      description: 'PowerShell Remoting'\n    }];\n\n    // Filter based on target type if provided\n    if (targetType) {\n      switch (targetType.toLowerCase()) {\n        case 'windows':\n          return baseTypes.filter(t => ['winrm', 'rdp', 'powershell', 'ssh'].includes(t.value));\n        case 'linux':\n        case 'unix':\n          return baseTypes.filter(t => ['ssh', 'telnet', 'http'].includes(t.value));\n        case 'network':\n          return baseTypes.filter(t => ['snmp', 'ssh', 'telnet', 'http'].includes(t.value));\n        default:\n          return baseTypes;\n      }\n    }\n    return baseTypes;\n  };\n  const connectionTypes = getConnectionTypes();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: value,\n      onChange: e => onChange(e.target.value),\n      style: {\n        width: '100%',\n        padding: '8px',\n        border: '1px solid #ddd',\n        borderRadius: '4px',\n        fontSize: '14px',\n        backgroundColor: 'white'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select connection type...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), connectionTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: type.value,\n        children: [type.label, \" - \", type.description]\n      }, type.value, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), value && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '8px',\n        padding: '8px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '4px',\n        fontSize: '12px',\n        color: '#666',\n        display: 'flex',\n        alignItems: 'center',\n        gap: '6px'\n      },\n      children: [(_connectionTypes$find = connectionTypes.find(t => t.value === value)) === null || _connectionTypes$find === void 0 ? void 0 : _connectionTypes$find.icon, /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [(_connectionTypes$find2 = connectionTypes.find(t => t.value === value)) === null || _connectionTypes$find2 === void 0 ? void 0 : _connectionTypes$find2.label, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), ' ', (_connectionTypes$find3 = connectionTypes.find(t => t.value === value)) === null || _connectionTypes$find3 === void 0 ? void 0 : _connectionTypes$find3.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_c = ConnectionTypeSelector;\nexport default ConnectionTypeSelector;\nvar _c;\n$RefreshReg$(_c, \"ConnectionTypeSelector\");","map":{"version":3,"names":["React","Wifi","Terminal","Shield","Globe","jsxDEV","_jsxDEV","ConnectionTypeSelector","value","onChange","targetType","_connectionTypes$find","_connectionTypes$find2","_connectionTypes$find3","getConnectionTypes","baseTypes","label","icon","size","fileName","_jsxFileName","lineNumber","columnNumber","description","toLowerCase","filter","t","includes","connectionTypes","children","e","target","style","width","padding","border","borderRadius","fontSize","backgroundColor","map","type","marginTop","color","display","alignItems","gap","find","_c","$RefreshReg$"],"sources":["/app/src/components/ConnectionTypeSelector.tsx"],"sourcesContent":["import React from 'react';\nimport { Wifi, Terminal, Shield, Globe } from 'lucide-react';\n\ninterface ConnectionTypeSelectorProps {\n  value: string;\n  onChange: (value: string) => void;\n  targetType?: string; // 'windows', 'linux', 'network', etc.\n}\n\nconst ConnectionTypeSelector: React.FC<ConnectionTypeSelectorProps> = ({\n  value,\n  onChange,\n  targetType\n}) => {\n  // Define available connection types based on target type\n  const getConnectionTypes = () => {\n    const baseTypes = [\n      { value: 'ssh', label: 'SSH', icon: <Terminal size={14} />, description: 'Secure Shell (Linux/Unix)' },\n      { value: 'winrm', label: 'WinRM', icon: <Shield size={14} />, description: 'Windows Remote Management' },\n      { value: 'rdp', label: 'RDP', icon: <Globe size={14} />, description: 'Remote Desktop Protocol' },\n      { value: 'telnet', label: 'Telnet', icon: <Terminal size={14} />, description: 'Telnet (Legacy)' },\n      { value: 'snmp', label: 'SNMP', icon: <Wifi size={14} />, description: 'Simple Network Management Protocol' },\n      { value: 'http', label: 'HTTP', icon: <Globe size={14} />, description: 'HTTP/HTTPS API' },\n      { value: 'powershell', label: 'PowerShell', icon: <Terminal size={14} />, description: 'PowerShell Remoting' }\n    ];\n\n    // Filter based on target type if provided\n    if (targetType) {\n      switch (targetType.toLowerCase()) {\n        case 'windows':\n          return baseTypes.filter(t => ['winrm', 'rdp', 'powershell', 'ssh'].includes(t.value));\n        case 'linux':\n        case 'unix':\n          return baseTypes.filter(t => ['ssh', 'telnet', 'http'].includes(t.value));\n        case 'network':\n          return baseTypes.filter(t => ['snmp', 'ssh', 'telnet', 'http'].includes(t.value));\n        default:\n          return baseTypes;\n      }\n    }\n\n    return baseTypes;\n  };\n\n  const connectionTypes = getConnectionTypes();\n\n  return (\n    <div>\n      <select\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        style={{\n          width: '100%',\n          padding: '8px',\n          border: '1px solid #ddd',\n          borderRadius: '4px',\n          fontSize: '14px',\n          backgroundColor: 'white'\n        }}\n      >\n        <option value=\"\">Select connection type...</option>\n        {connectionTypes.map((type) => (\n          <option key={type.value} value={type.value}>\n            {type.label} - {type.description}\n          </option>\n        ))}\n      </select>\n\n      {value && (\n        <div style={{\n          marginTop: '8px',\n          padding: '8px',\n          backgroundColor: '#f8f9fa',\n          borderRadius: '4px',\n          fontSize: '12px',\n          color: '#666',\n          display: 'flex',\n          alignItems: 'center',\n          gap: '6px'\n        }}>\n          {connectionTypes.find(t => t.value === value)?.icon}\n          <span>\n            <strong>{connectionTypes.find(t => t.value === value)?.label}:</strong>{' '}\n            {connectionTypes.find(t => t.value === value)?.description}\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ConnectionTypeSelector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}