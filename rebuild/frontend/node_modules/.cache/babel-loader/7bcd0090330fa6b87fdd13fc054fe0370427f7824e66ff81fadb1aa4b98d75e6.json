{"ast":null,"code":"import axios from 'axios';\n// Base API configuration\n// Explicitly construct the API URL to ensure HTTPS and correct port\n// Service port mapping for development (kept for reference)\n// const SERVICE_PORTS = {\n//   auth: 3001,\n//   users: 3002,\n//   credentials: 3004,\n//   targets: 3005,\n//   jobs: 3006,\n//   executor: 3007,\n//   notifications: 3009,\n//   discovery: 3010,\n//   stepLibraries: 3011\n// };\n\nexport const getApiBaseUrl = () => {\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // If running on development port 3000, use nginx proxy\n  if (window.location.port === '3000') {\n    return 'http://localhost';\n  }\n\n  // Use current window location but ensure correct protocol\n  const protocol = window.location.protocol;\n  const hostname = window.location.hostname;\n\n  // Only include port if it's not the standard port for the protocol\n  if (window.location.port && !(protocol === 'https:' && window.location.port === '443' || protocol === 'http:' && window.location.port === '80')) {\n    return `${protocol}//${hostname}:${window.location.port}`;\n  }\n  return `${protocol}//${hostname}`;\n};\nexport const getServiceUrl = service => {\n  // Always use the nginx proxy instead of direct service ports\n  return getApiBaseUrl();\n};\n\n// Create axios instance with dynamic baseURL\nconst api = axios.create({\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to set dynamic baseURL\napi.interceptors.request.use(config => {\n  // Set dynamic baseURL for each request\n  config.baseURL = getApiBaseUrl();\n\n  // Add access token if available (simple session-based auth)\n  const accessToken = localStorage.getItem('access_token');\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2;\n  // Handle auth errors by redirecting to login\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    console.log('Authentication required, redirecting to login');\n    clearTokens();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Simple session management functions\nexport const setSessionToken = token => {\n  localStorage.setItem('access_token', token);\n};\nexport const clearTokens = () => {\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('user');\n};\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('access_token');\n};\n\n// Auth API\nexport const authApi = {\n  login: async credentials => {\n    const response = await axios.post(`${getApiBaseUrl()}/api/v1/auth/login`, credentials);\n    return response.data;\n  },\n  logout: async () => {\n    await api.post('/api/v1/auth/logout');\n    clearTokens();\n  },\n  verify: async () => {\n    const response = await api.get('/api/v1/auth/verify');\n    return response.data;\n  }\n};\n\n// User API\nexport const userApi = {\n  list: async (skip = 0, limit = 100) => {\n    const response = await api.get('/api/v1/users', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  get: async id => {\n    const response = await api.get(`/api/v1/users/${id}`);\n    return response.data;\n  },\n  create: async userData => {\n    const response = await api.post('/api/v1/users', userData);\n    return response.data;\n  },\n  update: async (id, userData) => {\n    const response = await api.put(`/api/v1/users/${id}`, userData);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/api/v1/users/${id}`);\n  },\n  assignRole: async (id, role) => {\n    await api.post(`/api/v1/users/${id}/roles`, {\n      role\n    });\n  }\n};\n\n// Roles API\nexport const rolesApi = {\n  list: async () => {\n    return api.get('/api/v1/available-roles');\n  },\n  listFull: async () => {\n    return api.get('/api/v1/roles');\n  }\n};\n\n// Target API\nexport const targetApi = {\n  list: async (skip = 0, limit = 100) => {\n    const response = await api.get('/api/v1/targets', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  get: async id => {\n    const response = await api.get(`/api/v1/targets/${id}`);\n    return response.data;\n  },\n  create: async targetData => {\n    const response = await api.post('/api/v1/targets', targetData);\n    return response.data;\n  },\n  update: async (id, targetData) => {\n    const response = await api.put(`/api/v1/targets/${id}`, targetData);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/api/v1/targets/${id}`);\n  },\n  testWinRM: async id => {\n    const response = await api.post(`/api/v1/targets/${id}/test-winrm`);\n    return response.data;\n  },\n  testSSH: async id => {\n    const response = await api.post(`/api/v1/targets/${id}/test-ssh`);\n    return response.data;\n  }\n};\n\n// Target Group API\nexport const targetGroupApi = {\n  list: async (includeCount = false) => {\n    const response = await api.get('/api/v1/target-groups', {\n      params: {\n        include_counts: includeCount\n      }\n    });\n    return response.data;\n  },\n  getTree: async () => {\n    const response = await api.get('/api/v1/target-groups-tree');\n    return response.data;\n  },\n  get: async id => {\n    const response = await api.get(`/api/v1/target-groups/${id}`);\n    return response.data;\n  },\n  create: async groupData => {\n    const response = await api.post('/api/v1/target-groups', groupData);\n    return response.data;\n  },\n  update: async (id, groupData) => {\n    const response = await api.put(`/api/v1/target-groups/${id}`, groupData);\n    return response.data;\n  },\n  delete: async id => {\n    await api.delete(`/api/v1/target-groups/${id}`);\n  },\n  getTargets: async id => {\n    const response = await api.get(`/api/v1/target-groups/${id}/targets`);\n    return response.data;\n  },\n  addTargets: async (id, targetIds) => {\n    const response = await api.post(`/api/v1/target-groups/${id}/targets`, {\n      target_ids: targetIds\n    });\n    return response.data;\n  },\n  removeTarget: async (groupId, targetId) => {\n    await api.delete(`/api/v1/target-groups/${groupId}/targets/${targetId}`);\n  }\n};\n\n// Asset Service Target API (for getting all targets)\nexport const assetTargetApi = {\n  list: async () => {\n    const response = await api.get('/api/v1/targets');\n    return response.data;\n  }\n};\n\n// Job API\nexport const jobApi = {\n  list: async (skip = 0, limit = 100) => {\n    const response = await api.get('/api/v1/jobs', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  get: async id => {\n    const response = await api.get(`/api/v1/jobs/${id}`);\n    return response.data.data;\n  },\n  create: async jobData => {\n    const response = await api.post('/api/v1/jobs', jobData);\n    return response.data.data;\n  },\n  update: async (id, jobData) => {\n    const response = await api.put(`/api/v1/jobs/${id}`, jobData);\n    return response.data.data;\n  },\n  delete: async id => {\n    await api.delete(`/api/v1/jobs/${id}`);\n  },\n  run: async (id, parameters = {}) => {\n    const response = await api.post(`/api/v1/jobs/${id}/run`, {\n      parameters\n    });\n    return response.data;\n  },\n  export: async () => {\n    const response = await api.post('/api/v1/jobs/export', {});\n    return response.data;\n  },\n  import: async importData => {\n    const response = await api.post('/api/v1/jobs/import', importData);\n    return response.data;\n  }\n};\n\n// Job Run API\nexport const jobRunApi = {\n  list: async (skip = 0, limit = 100, jobId) => {\n    const response = await api.get('/api/v1/runs', {\n      params: {\n        skip,\n        limit,\n        job_id: jobId\n      }\n    });\n    return response.data;\n  },\n  get: async id => {\n    const response = await api.get(`/api/v1/runs/${id}`);\n    return response.data;\n  },\n  getSteps: async id => {\n    const response = await api.get(`/api/v1/runs/${id}/steps`);\n    return response.data;\n  }\n};\n\n// Health Monitoring API\nexport const healthApi = {\n  checkAllServices: async () => {\n    const startTime = Date.now();\n    try {\n      const response = await api.get('/health', {\n        timeout: 10000 // 10 second timeout for comprehensive health check\n      });\n      const responseTime = Date.now() - startTime;\n\n      // Transform the centralized health response into the expected format\n      const healthData = response.data;\n      const results = {};\n\n      // Add overall API Gateway status\n      results['api-gateway'] = {\n        status: healthData.status,\n        service: 'api-gateway',\n        responseTime,\n        message: healthData.message\n      };\n\n      // Add individual service checks from the centralized response\n      if (healthData.checks) {\n        healthData.checks.forEach(check => {\n          // Map service names from the health check response\n          let serviceName = check.service || check.name || 'unknown';\n\n          // Normalize service names to match frontend expectations\n          if (serviceName.includes('identity')) {\n            results['auth'] = {\n              ...check,\n              service: 'auth',\n              responseTime\n            };\n            results['users'] = {\n              ...check,\n              service: 'users',\n              responseTime\n            };\n          } else if (serviceName.includes('asset')) {\n            results['credentials'] = {\n              ...check,\n              service: 'credentials',\n              responseTime\n            };\n            results['targets'] = {\n              ...check,\n              service: 'targets',\n              responseTime\n            };\n            results['discovery'] = {\n              ...check,\n              service: 'discovery',\n              responseTime\n            };\n          } else if (serviceName.includes('automation')) {\n            results['jobs'] = {\n              ...check,\n              service: 'jobs',\n              responseTime\n            };\n            results['executor'] = {\n              ...check,\n              service: 'executor',\n              responseTime\n            };\n            results['step-libraries'] = {\n              ...check,\n              service: 'step-libraries',\n              responseTime\n            };\n          } else if (serviceName.includes('communication')) {\n            results['notification'] = {\n              ...check,\n              service: 'notification',\n              responseTime\n            };\n          } else {\n            // For database, redis, etc.\n            results[serviceName.toLowerCase()] = {\n              ...check,\n              service: serviceName.toLowerCase(),\n              responseTime\n            };\n          }\n        });\n      }\n\n      // Add default status for services not explicitly reported\n      const expectedServices = ['auth', 'users', 'credentials', 'targets', 'jobs', 'executor', 'notification', 'discovery', 'step-libraries', 'redis', 'postgres'];\n      expectedServices.forEach(service => {\n        if (!results[service]) {\n          results[service] = {\n            status: 'unknown',\n            service,\n            responseTime,\n            message: 'Service status not reported'\n          };\n        }\n      });\n      return results;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n\n      // Return error status for all services if health check fails\n      const services = ['api-gateway', 'auth', 'users', 'credentials', 'targets', 'jobs', 'executor', 'notification', 'discovery', 'step-libraries', 'redis', 'postgres'];\n      const results = {};\n      services.forEach(service => {\n        results[service] = {\n          status: 'unhealthy',\n          service,\n          responseTime,\n          error: errorMessage\n        };\n      });\n      return results;\n    }\n  },\n  checkService: async service => {\n    // For individual service checks, use the centralized health endpoint\n    // and extract the specific service status\n    try {\n      const allServices = await healthApi.checkAllServices();\n      return allServices[service] || {\n        status: 'unknown',\n        service,\n        error: 'Service not found in health report'\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        service,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  },\n  getSystemStats: async () => {\n    try {\n      // Get system stats from the centralized health endpoint\n      const healthResponse = await api.get('/health');\n      const healthData = healthResponse.data;\n\n      // Extract system statistics from health data\n      const stats = {\n        overall_status: healthData.status,\n        services_count: healthData.checks ? healthData.checks.length : 0,\n        healthy_services: healthData.checks ? healthData.checks.filter(c => c.status === 'healthy').length : 0,\n        unhealthy_services: healthData.checks ? healthData.checks.filter(c => c.status === 'unhealthy').length : 0,\n        timestamp: new Date().toISOString(),\n        message: healthData.message || 'System health check completed'\n      };\n      return stats;\n    } catch (error) {\n      return {\n        error: 'Failed to fetch system stats',\n        overall_status: 'unhealthy',\n        services_count: 0,\n        healthy_services: 0,\n        unhealthy_services: 0,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Notification Preferences API\nexport const notificationApi = {\n  // User notification preferences\n  getUserPreferences: async userId => {\n    const response = await api.get(`/api/v1/users/${userId}/notification-preferences`);\n    return response.data;\n  },\n  updateUserPreferences: async (userId, preferences) => {\n    const response = await api.put(`/api/v1/users/${userId}/notification-preferences`, preferences);\n    return response.data;\n  },\n  // Notification channels\n  getChannels: async () => {\n    const response = await api.get('/api/v1/channels');\n    return response.data;\n  },\n  // SMTP settings (admin only)\n  getSMTPSettings: async () => {\n    const response = await api.get('/api/v1/notifications/smtp');\n    return response.data;\n  },\n  updateSMTPSettings: async settings => {\n    const response = await api.post('/api/v1/notifications/smtp', settings);\n    return response.data;\n  },\n  testSMTPSettings: async testRequest => {\n    const response = await api.post('/api/v1/notifications/smtp/test', testRequest);\n    return response.data;\n  }\n};\n\n// Discovery API\nexport const discoveryApi = {\n  // Discovery Jobs\n  listJobs: async (skip = 0, limit = 100) => {\n    var _response$data$jobs;\n    const response = await api.get('/api/v1/jobs', {\n      params: {\n        skip,\n        limit,\n        job_type: 'discovery'\n      }\n    });\n\n    // Transform automation jobs to discovery job format for compatibility\n    const discoveryJobs = ((_response$data$jobs = response.data.jobs) === null || _response$data$jobs === void 0 ? void 0 : _response$data$jobs.map(job => {\n      var _job$workflow_definit, _job$workflow_definit2, _job$workflow_definit3, _job$workflow_definit4;\n      return {\n        id: job.id,\n        name: job.name,\n        description: job.description,\n        target_range: ((_job$workflow_definit = job.workflow_definition) === null || _job$workflow_definit === void 0 ? void 0 : (_job$workflow_definit2 = _job$workflow_definit.inputs) === null || _job$workflow_definit2 === void 0 ? void 0 : (_job$workflow_definit3 = _job$workflow_definit2.cidr_ranges) === null || _job$workflow_definit3 === void 0 ? void 0 : _job$workflow_definit3.join(', ')) || 'N/A',\n        scan_type: 'network_scan',\n        // Default for discovery jobs\n        status: 'pending',\n        // Will be updated by progress polling\n        configuration: ((_job$workflow_definit4 = job.workflow_definition) === null || _job$workflow_definit4 === void 0 ? void 0 : _job$workflow_definit4.inputs) || {},\n        created_by: job.created_by,\n        created_at: job.created_at,\n        updated_at: job.updated_at,\n        results: {}\n      };\n    })) || [];\n    return {\n      discovery_jobs: discoveryJobs,\n      total: response.data.total || 0,\n      skip: response.data.skip || 0,\n      limit: response.data.limit || 100\n    };\n  },\n  getJob: async id => {\n    const response = await api.get(`/api/v1/discovery/discovery-jobs/${id}`);\n    return response.data;\n  },\n  createJob: async jobData => {\n    const response = await api.post('/api/v1/discovery/discovery-jobs', jobData);\n    return response.data;\n  },\n  updateJob: async (id, jobData) => {\n    const response = await api.put(`/api/v1/discovery/discovery-jobs/${id}`, jobData);\n    return response.data;\n  },\n  deleteJob: async id => {\n    await api.delete(`/api/v1/discovery/discovery-jobs/${id}`);\n  },\n  runJob: async id => {\n    var _response$data$data, _response$data$data2;\n    const response = await api.post(`/api/v1/jobs/${id}/run`);\n    return {\n      message: response.data.message,\n      task_id: (_response$data$data = response.data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.task_id,\n      status_url: (_response$data$data2 = response.data.data) === null || _response$data$data2 === void 0 ? void 0 : _response$data$data2.status_url\n    };\n  },\n  cancelJob: async id => {\n    const response = await api.post(`/api/v1/discovery/discovery-jobs/${id}/cancel`);\n    return response.data;\n  },\n  getJobProgress: async (id, taskId) => {\n    if (taskId) {\n      var _celeryData$result, _celeryData$result2;\n      // Use direct Celery status if we have task_id\n      const response = await api.get(`/api/v1/tasks/${taskId}/status`);\n      const celeryData = response.data;\n\n      // Transform Celery response to expected format\n      return {\n        status: celeryData.status === 'SUCCESS' ? 'completed' : celeryData.status === 'FAILURE' ? 'failed' : celeryData.status === 'PENDING' ? 'running' : celeryData.status.toLowerCase(),\n        message: ((_celeryData$result = celeryData.result) === null || _celeryData$result === void 0 ? void 0 : _celeryData$result.message) || `Task ${celeryData.status}`,\n        result: celeryData.result,\n        ready: celeryData.ready,\n        successful: celeryData.successful,\n        failed: celeryData.failed,\n        progress: ((_celeryData$result2 = celeryData.result) === null || _celeryData$result2 === void 0 ? void 0 : _celeryData$result2.progress) || (celeryData.ready ? 100 : 0)\n      };\n    } else {\n      // Fallback to job execution status\n      const response = await api.get(`/api/v1/jobs/${id}/execution-status`);\n      return {\n        status: response.data.status || 'unknown',\n        message: response.data.message || 'No status available',\n        progress: 0\n      };\n    }\n  },\n  // Discovered Targets\n  listTargets: async (skip = 0, limit = 100, jobId, status) => {\n    const response = await api.get('/api/v1/discovered-targets', {\n      params: {\n        skip,\n        limit,\n        job_id: jobId,\n        status\n      }\n    });\n    return response.data;\n  },\n  getTarget: async id => {\n    const response = await api.get(`/api/v1/discovered-targets/${id}`);\n    return response.data.data;\n  },\n  updateTarget: async (id, targetData) => {\n    const response = await api.put(`/api/v1/discovered-targets/${id}`, targetData);\n    return response.data;\n  },\n  deleteTarget: async id => {\n    await api.delete(`/api/v1/discovered-targets/${id}`);\n  },\n  importTargets: async importRequest => {\n    const response = await api.post('/api/v1/discovery/import-targets', importRequest);\n    return response.data;\n  },\n  ignoreTargets: async targetIds => {\n    const response = await api.post('/api/v1/discovered-targets/ignore', {\n      target_ids: targetIds\n    });\n    return response.data;\n  },\n  bulkDeleteTargets: async targetIds => {\n    const response = await api.post('/api/v1/discovered-targets/bulk-delete', {\n      target_ids: targetIds\n    });\n    return response.data;\n  },\n  // Discovery Templates\n  listTemplates: async (skip = 0, limit = 100) => {\n    const response = await api.get('/api/v1/discovery/templates', {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  getTemplate: async id => {\n    const response = await api.get(`/api/v1/discovery/templates/${id}`);\n    return response.data;\n  },\n  createTemplate: async templateData => {\n    const response = await api.post('/api/v1/discovery/templates', templateData);\n    return response.data;\n  },\n  updateTemplate: async (id, templateData) => {\n    const response = await api.put(`/api/v1/discovery/templates/${id}`, templateData);\n    return response.data;\n  },\n  deleteTemplate: async id => {\n    await api.delete(`/api/v1/discovery/templates/${id}`);\n  },\n  // Network Range Validation\n  validateNetworkRanges: async ranges => {\n    const response = await api.post('/api/v1/discovery/validate-network-ranges', ranges);\n    return response.data;\n  }\n};\n\n// Celery Monitoring API\nexport const celeryApi = {\n  getStatus: async () => {\n    const response = await api.get('/api/v1/executor/celery/status');\n    return response.data;\n  },\n  getMetrics: async () => {\n    const response = await api.get('/api/v1/executor/celery/metrics');\n    return response.data;\n  },\n  getQueues: async () => {\n    const response = await api.get('/api/v1/executor/celery/queues');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getApiBaseUrl","process","env","REACT_APP_API_URL","window","location","port","protocol","hostname","getServiceUrl","service","api","create","headers","interceptors","request","use","config","baseURL","accessToken","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","status","console","log","clearTokens","href","setSessionToken","token","setItem","removeItem","isAuthenticated","authApi","login","credentials","post","data","logout","verify","get","userApi","list","skip","limit","params","id","userData","update","put","delete","assignRole","role","rolesApi","listFull","targetApi","targetData","testWinRM","testSSH","targetGroupApi","includeCount","include_counts","getTree","groupData","getTargets","addTargets","targetIds","target_ids","removeTarget","groupId","targetId","assetTargetApi","jobApi","jobData","run","parameters","export","import","importData","jobRunApi","jobId","job_id","getSteps","healthApi","checkAllServices","startTime","Date","now","timeout","responseTime","healthData","results","message","checks","forEach","check","serviceName","name","includes","toLowerCase","expectedServices","errorMessage","Error","services","checkService","allServices","getSystemStats","healthResponse","stats","overall_status","services_count","length","healthy_services","filter","c","unhealthy_services","timestamp","toISOString","notificationApi","getUserPreferences","userId","updateUserPreferences","preferences","getChannels","getSMTPSettings","updateSMTPSettings","settings","testSMTPSettings","testRequest","discoveryApi","listJobs","_response$data$jobs","job_type","discoveryJobs","jobs","map","job","_job$workflow_definit","_job$workflow_definit2","_job$workflow_definit3","_job$workflow_definit4","description","target_range","workflow_definition","inputs","cidr_ranges","join","scan_type","configuration","created_by","created_at","updated_at","discovery_jobs","total","getJob","createJob","updateJob","deleteJob","runJob","_response$data$data","_response$data$data2","task_id","status_url","cancelJob","getJobProgress","taskId","_celeryData$result","_celeryData$result2","celeryData","result","ready","successful","failed","progress","listTargets","getTarget","updateTarget","deleteTarget","importTargets","importRequest","ignoreTargets","bulkDeleteTargets","listTemplates","getTemplate","createTemplate","templateData","updateTemplate","deleteTemplate","validateNetworkRanges","ranges","celeryApi","getStatus","getMetrics","getQueues"],"sources":["/app/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport {\n  User, UserCreate, UserUpdate, UserListResponse,\n  Credential, CredentialCreate, CredentialListResponse, CredentialDecrypted,\n  Target, TargetCreate, TargetListResponse, WinRMTestResult, SSHTestResult,\n  Job, JobCreate, JobListResponse,\n  JobRun, JobRunListResponse, JobRunStep,\n\n  LoginRequest, AuthResponse,\n  NotificationPreferences, NotificationPreferencesResponse, NotificationChannel,\n  SMTPSettings, SMTPSettingsResponse, SMTPTestRequest, SMTPTestResponse,\n  DiscoveryJob, DiscoveryJobCreate, DiscoveryJobListResponse,\n  DiscoveredTarget, DiscoveredTargetListResponse, TargetImportRequest,\n  DiscoveryTemplate, DiscoveryTemplateCreate, DiscoveryTemplateListResponse\n} from '../types';\n\n// Base API configuration\n// Explicitly construct the API URL to ensure HTTPS and correct port\n// Service port mapping for development (kept for reference)\n// const SERVICE_PORTS = {\n//   auth: 3001,\n//   users: 3002,\n//   credentials: 3004,\n//   targets: 3005,\n//   jobs: 3006,\n//   executor: 3007,\n//   notifications: 3009,\n//   discovery: 3010,\n//   stepLibraries: 3011\n// };\n\nexport const getApiBaseUrl = () => {\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n  \n  // If running on development port 3000, use nginx proxy\n  if (window.location.port === '3000') {\n    return 'http://localhost';\n  }\n  \n  // Use current window location but ensure correct protocol\n  const protocol = window.location.protocol;\n  const hostname = window.location.hostname;\n  \n  // Only include port if it's not the standard port for the protocol\n  if (window.location.port && \n      !((protocol === 'https:' && window.location.port === '443') || \n        (protocol === 'http:' && window.location.port === '80'))) {\n    return `${protocol}//${hostname}:${window.location.port}`;\n  }\n  \n  return `${protocol}//${hostname}`;\n};\n\nexport const getServiceUrl = (service: string) => {\n  // Always use the nginx proxy instead of direct service ports\n  return getApiBaseUrl();\n};\n\n// Create axios instance with dynamic baseURL\nconst api = axios.create({\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to set dynamic baseURL\napi.interceptors.request.use(\n  (config) => {\n    // Set dynamic baseURL for each request\n    config.baseURL = getApiBaseUrl();\n    \n    // Add access token if available (simple session-based auth)\n    const accessToken = localStorage.getItem('access_token');\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    // Handle auth errors by redirecting to login\n    if (error.response?.status === 401 || error.response?.status === 403) {\n      console.log('Authentication required, redirecting to login');\n      clearTokens();\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Simple session management functions\nexport const setSessionToken = (token: string) => {\n  localStorage.setItem('access_token', token);\n};\n\nexport const clearTokens = () => {\n  localStorage.removeItem('access_token');\n  localStorage.removeItem('user');\n};\n\nexport const isAuthenticated = (): boolean => {\n  return !!localStorage.getItem('access_token');\n};\n\n// Auth API\nexport const authApi = {\n  login: async (credentials: LoginRequest): Promise<AuthResponse> => {\n    const response: AxiosResponse<AuthResponse> = await axios.post(`${getApiBaseUrl()}/api/v1/auth/login`, credentials);\n    return response.data;\n  },\n\n  logout: async (): Promise<void> => {\n    await api.post('/api/v1/auth/logout');\n    clearTokens();\n  },\n\n  verify: async (): Promise<{ valid: boolean; user: User }> => {\n    const response = await api.get('/api/v1/auth/verify');\n    return response.data;\n  }\n};\n\n// User API\nexport const userApi = {\n  list: async (skip = 0, limit = 100): Promise<UserListResponse> => {\n    const response: AxiosResponse<UserListResponse> = await api.get('/api/v1/users', {\n      params: { skip, limit }\n    });\n    return response.data;\n  },\n\n  get: async (id: number): Promise<User> => {\n    const response: AxiosResponse<User> = await api.get(`/api/v1/users/${id}`);\n    return response.data;\n  },\n\n  create: async (userData: UserCreate): Promise<User> => {\n    const response: AxiosResponse<User> = await api.post('/api/v1/users', userData);\n    return response.data;\n  },\n\n  update: async (id: number, userData: UserUpdate): Promise<User> => {\n    const response: AxiosResponse<User> = await api.put(`/api/v1/users/${id}`, userData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/users/${id}`);\n  },\n\n  assignRole: async (id: number, role: string): Promise<void> => {\n    await api.post(`/api/v1/users/${id}/roles`, { role });\n  }\n};\n\n// Roles API\nexport const rolesApi = {\n  list: async (): Promise<AxiosResponse<{success: boolean, data: Array<{id: number, name: string, description: string}>}>> => {\n    return api.get('/api/v1/available-roles');\n  },\n\n  listFull: async (): Promise<AxiosResponse<{success: boolean, data: Array<{id: number, name: string, description: string, permissions: string[], is_active: boolean, created_at: string, updated_at: string}>}>> => {\n    return api.get('/api/v1/roles');\n  }\n};\n\n\n\n// Target API\nexport const targetApi = {\n  list: async (skip = 0, limit = 100): Promise<TargetListResponse> => {\n    const response: AxiosResponse<TargetListResponse> = await api.get('/api/v1/targets', {\n      params: { skip, limit }\n    });\n    return response.data;\n  },\n\n  get: async (id: number): Promise<Target> => {\n    const response: AxiosResponse<Target> = await api.get(`/api/v1/targets/${id}`);\n    return response.data;\n  },\n\n  create: async (targetData: TargetCreate): Promise<Target> => {\n    const response: AxiosResponse<Target> = await api.post('/api/v1/targets', targetData);\n    return response.data;\n  },\n\n  update: async (id: number, targetData: Partial<TargetCreate>): Promise<Target> => {\n    const response: AxiosResponse<Target> = await api.put(`/api/v1/targets/${id}`, targetData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/targets/${id}`);\n  },\n\n  testWinRM: async (id: number): Promise<WinRMTestResult> => {\n    const response = await api.post(`/api/v1/targets/${id}/test-winrm`);\n    return response.data;\n  },\n\n  testSSH: async (id: number): Promise<SSHTestResult> => {\n    const response = await api.post(`/api/v1/targets/${id}/test-ssh`);\n    return response.data;\n  }\n};\n\n// Target Group API\nexport const targetGroupApi = {\n  list: async (includeCount = false): Promise<any> => {\n    const response = await api.get('/api/v1/target-groups', {\n      params: { include_counts: includeCount }\n    });\n    return response.data;\n  },\n\n  getTree: async (): Promise<any> => {\n    const response = await api.get('/api/v1/target-groups-tree');\n    return response.data;\n  },\n\n  get: async (id: number): Promise<any> => {\n    const response = await api.get(`/api/v1/target-groups/${id}`);\n    return response.data;\n  },\n\n  create: async (groupData: any): Promise<any> => {\n    const response = await api.post('/api/v1/target-groups', groupData);\n    return response.data;\n  },\n\n  update: async (id: number, groupData: any): Promise<any> => {\n    const response = await api.put(`/api/v1/target-groups/${id}`, groupData);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/target-groups/${id}`);\n  },\n\n  getTargets: async (id: number): Promise<any> => {\n    const response = await api.get(`/api/v1/target-groups/${id}/targets`);\n    return response.data;\n  },\n\n  addTargets: async (id: number, targetIds: number[]): Promise<any> => {\n    const response = await api.post(`/api/v1/target-groups/${id}/targets`, {\n      target_ids: targetIds\n    });\n    return response.data;\n  },\n\n  removeTarget: async (groupId: number, targetId: number): Promise<void> => {\n    await api.delete(`/api/v1/target-groups/${groupId}/targets/${targetId}`);\n  }\n};\n\n// Asset Service Target API (for getting all targets)\nexport const assetTargetApi = {\n  list: async (): Promise<any> => {\n    const response = await api.get('/api/v1/targets');\n    return response.data;\n  }\n};\n\n// Job API\nexport const jobApi = {\n  list: async (skip = 0, limit = 100): Promise<JobListResponse> => {\n    const response: AxiosResponse<JobListResponse> = await api.get('/api/v1/jobs', {\n      params: { skip, limit }\n    });\n    return response.data;\n  },\n\n  get: async (id: number): Promise<Job> => {\n    const response: AxiosResponse<{success: boolean, data: Job}> = await api.get(`/api/v1/jobs/${id}`);\n    return response.data.data;\n  },\n\n  create: async (jobData: JobCreate): Promise<Job> => {\n    const response: AxiosResponse<{success: boolean, message: string, data: Job}> = await api.post('/api/v1/jobs', jobData);\n    return response.data.data;\n  },\n\n  update: async (id: number, jobData: Partial<JobCreate>): Promise<Job> => {\n    const response: AxiosResponse<{success: boolean, message: string, data: Job}> = await api.put(`/api/v1/jobs/${id}`, jobData);\n    return response.data.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/jobs/${id}`);\n  },\n\n  run: async (id: number, parameters: Record<string, any> = {}): Promise<JobRun> => {\n    const response: AxiosResponse<JobRun> = await api.post(`/api/v1/jobs/${id}/run`, { parameters });\n    return response.data;\n  },\n\n  export: async (): Promise<any> => {\n    const response: AxiosResponse<any> = await api.post('/api/v1/jobs/export', {});\n    return response.data;\n  },\n\n  import: async (importData: any): Promise<any> => {\n    const response: AxiosResponse<any> = await api.post('/api/v1/jobs/import', importData);\n    return response.data;\n  }\n};\n\n// Job Run API\nexport const jobRunApi = {\n  list: async (skip = 0, limit = 100, jobId?: number): Promise<JobRunListResponse> => {\n    const response: AxiosResponse<JobRunListResponse> = await api.get('/api/v1/runs', {\n      params: { skip, limit, job_id: jobId }\n    });\n    return response.data;\n  },\n\n  get: async (id: number): Promise<JobRun> => {\n    const response: AxiosResponse<JobRun> = await api.get(`/api/v1/runs/${id}`);\n    return response.data;\n  },\n\n  getSteps: async (id: number): Promise<JobRunStep[]> => {\n    const response: AxiosResponse<JobRunStep[]> = await api.get(`/api/v1/runs/${id}/steps`);\n    return response.data;\n  }\n};\n\n\n\n// Health Monitoring API\nexport const healthApi = {\n  checkAllServices: async (): Promise<Record<string, any>> => {\n    const startTime = Date.now();\n    try {\n      const response = await api.get('/health', {\n        timeout: 10000 // 10 second timeout for comprehensive health check\n      });\n      const responseTime = Date.now() - startTime;\n      \n      // Transform the centralized health response into the expected format\n      const healthData = response.data;\n      const results: Record<string, any> = {};\n      \n      // Add overall API Gateway status\n      results['api-gateway'] = {\n        status: healthData.status,\n        service: 'api-gateway',\n        responseTime,\n        message: healthData.message\n      };\n      \n      // Add individual service checks from the centralized response\n      if (healthData.checks) {\n        healthData.checks.forEach((check: any) => {\n          // Map service names from the health check response\n          let serviceName = check.service || check.name || 'unknown';\n          \n          // Normalize service names to match frontend expectations\n          if (serviceName.includes('identity')) {\n            results['auth'] = { ...check, service: 'auth', responseTime };\n            results['users'] = { ...check, service: 'users', responseTime };\n          } else if (serviceName.includes('asset')) {\n            results['credentials'] = { ...check, service: 'credentials', responseTime };\n            results['targets'] = { ...check, service: 'targets', responseTime };\n            results['discovery'] = { ...check, service: 'discovery', responseTime };\n          } else if (serviceName.includes('automation')) {\n            results['jobs'] = { ...check, service: 'jobs', responseTime };\n            results['executor'] = { ...check, service: 'executor', responseTime };\n            results['step-libraries'] = { ...check, service: 'step-libraries', responseTime };\n          } else if (serviceName.includes('communication')) {\n            results['notification'] = { ...check, service: 'notification', responseTime };\n          } else {\n            // For database, redis, etc.\n            results[serviceName.toLowerCase()] = { ...check, service: serviceName.toLowerCase(), responseTime };\n          }\n        });\n      }\n      \n      // Add default status for services not explicitly reported\n      const expectedServices = [\n        'auth', 'users', 'credentials', 'targets', 'jobs', 'executor', \n        'notification', 'discovery', 'step-libraries', 'redis', 'postgres'\n      ];\n      \n      expectedServices.forEach(service => {\n        if (!results[service]) {\n          results[service] = {\n            status: 'unknown',\n            service,\n            responseTime,\n            message: 'Service status not reported'\n          };\n        }\n      });\n      \n      return results;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      // Return error status for all services if health check fails\n      const services = [\n        'api-gateway', 'auth', 'users', 'credentials', 'targets', 'jobs', 'executor',\n        'notification', 'discovery', 'step-libraries', 'redis', 'postgres'\n      ];\n      \n      const results: Record<string, any> = {};\n      services.forEach(service => {\n        results[service] = {\n          status: 'unhealthy',\n          service,\n          responseTime,\n          error: errorMessage\n        };\n      });\n      \n      return results;\n    }\n  },\n\n  checkService: async (service: string): Promise<{ status: string; service: string; responseTime?: number; error?: string }> => {\n    // For individual service checks, use the centralized health endpoint\n    // and extract the specific service status\n    try {\n      const allServices = await healthApi.checkAllServices();\n      return allServices[service] || {\n        status: 'unknown',\n        service,\n        error: 'Service not found in health report'\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        service,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  },\n\n  getSystemStats: async (): Promise<any> => {\n    try {\n      // Get system stats from the centralized health endpoint\n      const healthResponse = await api.get('/health');\n      const healthData = healthResponse.data;\n      \n      // Extract system statistics from health data\n      const stats = {\n        overall_status: healthData.status,\n        services_count: healthData.checks ? healthData.checks.length : 0,\n        healthy_services: healthData.checks ? healthData.checks.filter((c: any) => c.status === 'healthy').length : 0,\n        unhealthy_services: healthData.checks ? healthData.checks.filter((c: any) => c.status === 'unhealthy').length : 0,\n        timestamp: new Date().toISOString(),\n        message: healthData.message || 'System health check completed'\n      };\n      \n      return stats;\n    } catch (error) {\n      return { \n        error: 'Failed to fetch system stats',\n        overall_status: 'unhealthy',\n        services_count: 0,\n        healthy_services: 0,\n        unhealthy_services: 0,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// Notification Preferences API\nexport const notificationApi = {\n  // User notification preferences\n  getUserPreferences: async (userId: number): Promise<NotificationPreferencesResponse> => {\n    const response = await api.get(`/api/v1/users/${userId}/notification-preferences`);\n    return response.data;\n  },\n\n  updateUserPreferences: async (userId: number, preferences: NotificationPreferences): Promise<NotificationPreferencesResponse> => {\n    const response = await api.put(`/api/v1/users/${userId}/notification-preferences`, preferences);\n    return response.data;\n  },\n\n  // Notification channels\n  getChannels: async (): Promise<NotificationChannel[]> => {\n    const response = await api.get('/api/v1/channels');\n    return response.data;\n  },\n\n  // SMTP settings (admin only)\n  getSMTPSettings: async (): Promise<SMTPSettingsResponse> => {\n    const response = await api.get('/api/v1/notifications/smtp');\n    return response.data;\n  },\n\n  updateSMTPSettings: async (settings: SMTPSettings): Promise<SMTPSettingsResponse> => {\n    const response = await api.post('/api/v1/notifications/smtp', settings);\n    return response.data;\n  },\n\n  testSMTPSettings: async (testRequest: SMTPTestRequest): Promise<SMTPTestResponse> => {\n    const response = await api.post('/api/v1/notifications/smtp/test', testRequest);\n    return response.data;\n  }\n};\n\n// Discovery API\nexport const discoveryApi = {\n  // Discovery Jobs\n  listJobs: async (skip = 0, limit = 100): Promise<DiscoveryJobListResponse> => {\n    const response: AxiosResponse<JobListResponse> = await api.get('/api/v1/jobs', {\n      params: { skip, limit, job_type: 'discovery' }\n    });\n    \n    // Transform automation jobs to discovery job format for compatibility\n    const discoveryJobs = response.data.jobs?.map(job => ({\n      id: job.id,\n      name: job.name,\n      description: job.description,\n      target_range: job.workflow_definition?.inputs?.cidr_ranges?.join(', ') || 'N/A',\n      scan_type: 'network_scan', // Default for discovery jobs\n      status: 'pending' as const, // Will be updated by progress polling\n      configuration: job.workflow_definition?.inputs || {},\n      created_by: job.created_by,\n      created_at: job.created_at,\n      updated_at: job.updated_at,\n      results: {}\n    })) || [];\n    \n    return {\n      discovery_jobs: discoveryJobs,\n      total: response.data.total || 0,\n      skip: response.data.skip || 0,\n      limit: response.data.limit || 100\n    };\n  },\n\n  getJob: async (id: number): Promise<DiscoveryJob> => {\n    const response: AxiosResponse<DiscoveryJob> = await api.get(`/api/v1/discovery/discovery-jobs/${id}`);\n    return response.data;\n  },\n\n  createJob: async (jobData: DiscoveryJobCreate): Promise<DiscoveryJob> => {\n    const response: AxiosResponse<DiscoveryJob> = await api.post('/api/v1/discovery/discovery-jobs', jobData);\n    return response.data;\n  },\n\n  updateJob: async (id: number, jobData: Partial<DiscoveryJobCreate>): Promise<DiscoveryJob> => {\n    const response: AxiosResponse<DiscoveryJob> = await api.put(`/api/v1/discovery/discovery-jobs/${id}`, jobData);\n    return response.data;\n  },\n\n  deleteJob: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/discovery/discovery-jobs/${id}`);\n  },\n\n  runJob: async (id: number): Promise<{ message: string; task_id?: string; status_url?: string }> => {\n    const response: AxiosResponse<{ success: boolean; message: string; data: any }> = await api.post(`/api/v1/jobs/${id}/run`);\n    return {\n      message: response.data.message,\n      task_id: response.data.data?.task_id,\n      status_url: response.data.data?.status_url\n    };\n  },\n\n  cancelJob: async (id: number): Promise<{ message: string }> => {\n    const response: AxiosResponse<{ message: string }> = await api.post(`/api/v1/discovery/discovery-jobs/${id}/cancel`);\n    return response.data;\n  },\n\n  getJobProgress: async (id: number, taskId?: string): Promise<{\n    status: string;\n    progress?: number;\n    total?: number;\n    message: string;\n    phase?: string;\n    targets_found?: number;\n    targets_scanned?: number;\n    total_targets?: number;\n    current_target?: string;\n    result?: any;\n    ready?: boolean;\n    successful?: boolean;\n    failed?: boolean;\n  }> => {\n    if (taskId) {\n      // Use direct Celery status if we have task_id\n      const response = await api.get(`/api/v1/tasks/${taskId}/status`);\n      const celeryData = response.data;\n      \n      // Transform Celery response to expected format\n      return {\n        status: celeryData.status === 'SUCCESS' ? 'completed' : \n                celeryData.status === 'FAILURE' ? 'failed' : \n                celeryData.status === 'PENDING' ? 'running' : celeryData.status.toLowerCase(),\n        message: celeryData.result?.message || `Task ${celeryData.status}`,\n        result: celeryData.result,\n        ready: celeryData.ready,\n        successful: celeryData.successful,\n        failed: celeryData.failed,\n        progress: celeryData.result?.progress || (celeryData.ready ? 100 : 0)\n      };\n    } else {\n      // Fallback to job execution status\n      const response = await api.get(`/api/v1/jobs/${id}/execution-status`);\n      return {\n        status: response.data.status || 'unknown',\n        message: response.data.message || 'No status available',\n        progress: 0\n      };\n    }\n  },\n\n  // Discovered Targets\n  listTargets: async (skip = 0, limit = 100, jobId?: number, status?: string): Promise<DiscoveredTargetListResponse> => {\n    const response: AxiosResponse<DiscoveredTargetListResponse> = await api.get('/api/v1/discovered-targets', {\n      params: { skip, limit, job_id: jobId, status }\n    });\n    return response.data;\n  },\n\n  getTarget: async (id: number): Promise<DiscoveredTarget> => {\n    const response: AxiosResponse<{success: boolean, data: DiscoveredTarget}> = await api.get(`/api/v1/discovered-targets/${id}`);\n    return response.data.data;\n  },\n\n  updateTarget: async (id: number, targetData: Partial<DiscoveredTarget>): Promise<DiscoveredTarget> => {\n    const response: AxiosResponse<DiscoveredTarget> = await api.put(`/api/v1/discovered-targets/${id}`, targetData);\n    return response.data;\n  },\n\n  deleteTarget: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/discovered-targets/${id}`);\n  },\n\n  importTargets: async (importRequest: TargetImportRequest): Promise<{ imported: number; failed: number; details: any[] }> => {\n    const response = await api.post('/api/v1/discovery/import-targets', importRequest);\n    return response.data;\n  },\n\n  ignoreTargets: async (targetIds: number[]): Promise<{ ignored: number }> => {\n    const response = await api.post('/api/v1/discovered-targets/ignore', { target_ids: targetIds });\n    return response.data;\n  },\n\n  bulkDeleteTargets: async (targetIds: number[]): Promise<{ deleted: number }> => {\n    const response = await api.post('/api/v1/discovered-targets/bulk-delete', { \n      target_ids: targetIds\n    });\n    return response.data;\n  },\n\n  // Discovery Templates\n  listTemplates: async (skip = 0, limit = 100): Promise<DiscoveryTemplateListResponse> => {\n    const response: AxiosResponse<DiscoveryTemplateListResponse> = await api.get('/api/v1/discovery/templates', {\n      params: { skip, limit }\n    });\n    return response.data;\n  },\n\n  getTemplate: async (id: number): Promise<DiscoveryTemplate> => {\n    const response: AxiosResponse<DiscoveryTemplate> = await api.get(`/api/v1/discovery/templates/${id}`);\n    return response.data;\n  },\n\n  createTemplate: async (templateData: DiscoveryTemplateCreate): Promise<DiscoveryTemplate> => {\n    const response: AxiosResponse<DiscoveryTemplate> = await api.post('/api/v1/discovery/templates', templateData);\n    return response.data;\n  },\n\n  updateTemplate: async (id: number, templateData: Partial<DiscoveryTemplateCreate>): Promise<DiscoveryTemplate> => {\n    const response: AxiosResponse<DiscoveryTemplate> = await api.put(`/api/v1/discovery/templates/${id}`, templateData);\n    return response.data;\n  },\n\n  deleteTemplate: async (id: number): Promise<void> => {\n    await api.delete(`/api/v1/discovery/templates/${id}`);\n  },\n\n  // Network Range Validation\n  validateNetworkRanges: async (ranges: { ranges: string[] }): Promise<any> => {\n    const response = await api.post('/api/v1/discovery/validate-network-ranges', ranges);\n    return response.data;\n  }\n};\n\n// Celery Monitoring API\nexport const celeryApi = {\n  getStatus: async (): Promise<any> => {\n    const response = await api.get('/api/v1/executor/celery/status');\n    return response.data;\n  },\n\n  getMetrics: async (): Promise<any> => {\n    const response = await api.get('/api/v1/executor/celery/metrics');\n    return response.data;\n  },\n\n  getQueues: async (): Promise<any> => {\n    const response = await api.get('/api/v1/executor/celery/queues');\n    return response.data;\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAgB5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE;IACjC,OAAOF,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtC;;EAEA;EACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,MAAM,EAAE;IACnC,OAAO,kBAAkB;EAC3B;;EAEA;EACA,MAAMC,QAAQ,GAAGH,MAAM,CAACC,QAAQ,CAACE,QAAQ;EACzC,MAAMC,QAAQ,GAAGJ,MAAM,CAACC,QAAQ,CAACG,QAAQ;;EAEzC;EACA,IAAIJ,MAAM,CAACC,QAAQ,CAACC,IAAI,IACpB,EAAGC,QAAQ,KAAK,QAAQ,IAAIH,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,KAAK,IACvDC,QAAQ,KAAK,OAAO,IAAIH,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,IAAK,CAAC,EAAE;IAC9D,OAAO,GAAGC,QAAQ,KAAKC,QAAQ,IAAIJ,MAAM,CAACC,QAAQ,CAACC,IAAI,EAAE;EAC3D;EAEA,OAAO,GAAGC,QAAQ,KAAKC,QAAQ,EAAE;AACnC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAIC,OAAe,IAAK;EAChD;EACA,OAAOV,aAAa,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,MAAMW,GAAG,GAAGZ,KAAK,CAACa,MAAM,CAAC;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACAA,MAAM,CAACC,OAAO,GAAGlB,aAAa,CAAC,CAAC;;EAEhC;EACA,MAAMmB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACxD,IAAIF,WAAW,EAAE;IACfF,MAAM,CAACJ,OAAO,CAACS,aAAa,GAAG,UAAUH,WAAW,EAAE;EACxD;EACA,OAAOF,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACG,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACf;EACA,IAAI,EAAAD,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,EAAAD,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IACpEC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC5DC,WAAW,CAAC,CAAC;IACb5B,MAAM,CAACC,QAAQ,CAAC4B,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMW,eAAe,GAAIC,KAAa,IAAK;EAChDf,YAAY,CAACgB,OAAO,CAAC,cAAc,EAAED,KAAK,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMH,WAAW,GAAGA,CAAA,KAAM;EAC/BZ,YAAY,CAACiB,UAAU,CAAC,cAAc,CAAC;EACvCjB,YAAY,CAACiB,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAe;EAC5C,OAAO,CAAC,CAAClB,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMkB,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAAyB,IAA4B;IACjE,MAAMf,QAAqC,GAAG,MAAM3B,KAAK,CAAC2C,IAAI,CAAC,GAAG1C,aAAa,CAAC,CAAC,oBAAoB,EAAEyC,WAAW,CAAC;IACnH,OAAOf,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDC,MAAM,EAAE,MAAAA,CAAA,KAA2B;IACjC,MAAMjC,GAAG,CAAC+B,IAAI,CAAC,qBAAqB,CAAC;IACrCV,WAAW,CAAC,CAAC;EACf,CAAC;EAEDa,MAAM,EAAE,MAAAA,CAAA,KAAqD;IAC3D,MAAMnB,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,qBAAqB,CAAC;IACrD,OAAOpB,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,OAAO,GAAG;EACrBC,IAAI,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,KAAgC;IAChE,MAAMxB,QAAyC,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,eAAe,EAAE;MAC/EK,MAAM,EAAE;QAAEF,IAAI;QAAEC;MAAM;IACxB,CAAC,CAAC;IACF,OAAOxB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDG,GAAG,EAAE,MAAOM,EAAU,IAAoB;IACxC,MAAM1B,QAA6B,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,iBAAiBM,EAAE,EAAE,CAAC;IAC1E,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED/B,MAAM,EAAE,MAAOyC,QAAoB,IAAoB;IACrD,MAAM3B,QAA6B,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,eAAe,EAAEW,QAAQ,CAAC;IAC/E,OAAO3B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDW,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAEC,QAAoB,KAAoB;IACjE,MAAM3B,QAA6B,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,iBAAiBH,EAAE,EAAE,EAAEC,QAAQ,CAAC;IACpF,OAAO3B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDa,MAAM,EAAE,MAAOJ,EAAU,IAAoB;IAC3C,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,iBAAiBJ,EAAE,EAAE,CAAC;EACzC,CAAC;EAEDK,UAAU,EAAE,MAAAA,CAAOL,EAAU,EAAEM,IAAY,KAAoB;IAC7D,MAAM/C,GAAG,CAAC+B,IAAI,CAAC,iBAAiBU,EAAE,QAAQ,EAAE;MAAEM;IAAK,CAAC,CAAC;EACvD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBX,IAAI,EAAE,MAAAA,CAAA,KAAsH;IAC1H,OAAOrC,GAAG,CAACmC,GAAG,CAAC,yBAAyB,CAAC;EAC3C,CAAC;EAEDc,QAAQ,EAAE,MAAAA,CAAA,KAAyM;IACjN,OAAOjD,GAAG,CAACmC,GAAG,CAAC,eAAe,CAAC;EACjC;AACF,CAAC;;AAID;AACA,OAAO,MAAMe,SAAS,GAAG;EACvBb,IAAI,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,KAAkC;IAClE,MAAMxB,QAA2C,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,iBAAiB,EAAE;MACnFK,MAAM,EAAE;QAAEF,IAAI;QAAEC;MAAM;IACxB,CAAC,CAAC;IACF,OAAOxB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDG,GAAG,EAAE,MAAOM,EAAU,IAAsB;IAC1C,MAAM1B,QAA+B,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,mBAAmBM,EAAE,EAAE,CAAC;IAC9E,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED/B,MAAM,EAAE,MAAOkD,UAAwB,IAAsB;IAC3D,MAAMpC,QAA+B,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,iBAAiB,EAAEoB,UAAU,CAAC;IACrF,OAAOpC,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDW,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAEU,UAAiC,KAAsB;IAChF,MAAMpC,QAA+B,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,mBAAmBH,EAAE,EAAE,EAAEU,UAAU,CAAC;IAC1F,OAAOpC,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDa,MAAM,EAAE,MAAOJ,EAAU,IAAoB;IAC3C,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,mBAAmBJ,EAAE,EAAE,CAAC;EAC3C,CAAC;EAEDW,SAAS,EAAE,MAAOX,EAAU,IAA+B;IACzD,MAAM1B,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,mBAAmBU,EAAE,aAAa,CAAC;IACnE,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDqB,OAAO,EAAE,MAAOZ,EAAU,IAA6B;IACrD,MAAM1B,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,mBAAmBU,EAAE,WAAW,CAAC;IACjE,OAAO1B,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,cAAc,GAAG;EAC5BjB,IAAI,EAAE,MAAAA,CAAOkB,YAAY,GAAG,KAAK,KAAmB;IAClD,MAAMxC,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,uBAAuB,EAAE;MACtDK,MAAM,EAAE;QAAEgB,cAAc,EAAED;MAAa;IACzC,CAAC,CAAC;IACF,OAAOxC,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDyB,OAAO,EAAE,MAAAA,CAAA,KAA0B;IACjC,MAAM1C,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,4BAA4B,CAAC;IAC5D,OAAOpB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDG,GAAG,EAAE,MAAOM,EAAU,IAAmB;IACvC,MAAM1B,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,yBAAyBM,EAAE,EAAE,CAAC;IAC7D,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED/B,MAAM,EAAE,MAAOyD,SAAc,IAAmB;IAC9C,MAAM3C,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,uBAAuB,EAAE2B,SAAS,CAAC;IACnE,OAAO3C,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDW,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAEiB,SAAc,KAAmB;IAC1D,MAAM3C,QAAQ,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,yBAAyBH,EAAE,EAAE,EAAEiB,SAAS,CAAC;IACxE,OAAO3C,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDa,MAAM,EAAE,MAAOJ,EAAU,IAAoB;IAC3C,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,yBAAyBJ,EAAE,EAAE,CAAC;EACjD,CAAC;EAEDkB,UAAU,EAAE,MAAOlB,EAAU,IAAmB;IAC9C,MAAM1B,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,yBAAyBM,EAAE,UAAU,CAAC;IACrE,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED4B,UAAU,EAAE,MAAAA,CAAOnB,EAAU,EAAEoB,SAAmB,KAAmB;IACnE,MAAM9C,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,yBAAyBU,EAAE,UAAU,EAAE;MACrEqB,UAAU,EAAED;IACd,CAAC,CAAC;IACF,OAAO9C,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED+B,YAAY,EAAE,MAAAA,CAAOC,OAAe,EAAEC,QAAgB,KAAoB;IACxE,MAAMjE,GAAG,CAAC6C,MAAM,CAAC,yBAAyBmB,OAAO,YAAYC,QAAQ,EAAE,CAAC;EAC1E;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG;EAC5B7B,IAAI,EAAE,MAAAA,CAAA,KAA0B;IAC9B,MAAMtB,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,iBAAiB,CAAC;IACjD,OAAOpB,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMmC,MAAM,GAAG;EACpB9B,IAAI,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,KAA+B;IAC/D,MAAMxB,QAAwC,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,cAAc,EAAE;MAC7EK,MAAM,EAAE;QAAEF,IAAI;QAAEC;MAAM;IACxB,CAAC,CAAC;IACF,OAAOxB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDG,GAAG,EAAE,MAAOM,EAAU,IAAmB;IACvC,MAAM1B,QAAsD,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gBAAgBM,EAAE,EAAE,CAAC;IAClG,OAAO1B,QAAQ,CAACiB,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED/B,MAAM,EAAE,MAAOmE,OAAkB,IAAmB;IAClD,MAAMrD,QAAuE,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,cAAc,EAAEqC,OAAO,CAAC;IACvH,OAAOrD,QAAQ,CAACiB,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDW,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAE2B,OAA2B,KAAmB;IACvE,MAAMrD,QAAuE,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,gBAAgBH,EAAE,EAAE,EAAE2B,OAAO,CAAC;IAC5H,OAAOrD,QAAQ,CAACiB,IAAI,CAACA,IAAI;EAC3B,CAAC;EAEDa,MAAM,EAAE,MAAOJ,EAAU,IAAoB;IAC3C,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,gBAAgBJ,EAAE,EAAE,CAAC;EACxC,CAAC;EAED4B,GAAG,EAAE,MAAAA,CAAO5B,EAAU,EAAE6B,UAA+B,GAAG,CAAC,CAAC,KAAsB;IAChF,MAAMvD,QAA+B,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,gBAAgBU,EAAE,MAAM,EAAE;MAAE6B;IAAW,CAAC,CAAC;IAChG,OAAOvD,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDuC,MAAM,EAAE,MAAAA,CAAA,KAA0B;IAChC,MAAMxD,QAA4B,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;IAC9E,OAAOhB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDwC,MAAM,EAAE,MAAOC,UAAe,IAAmB;IAC/C,MAAM1D,QAA4B,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,qBAAqB,EAAE0C,UAAU,CAAC;IACtF,OAAO1D,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM0C,SAAS,GAAG;EACvBrC,IAAI,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,EAAEoC,KAAc,KAAkC;IAClF,MAAM5D,QAA2C,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,cAAc,EAAE;MAChFK,MAAM,EAAE;QAAEF,IAAI;QAAEC,KAAK;QAAEqC,MAAM,EAAED;MAAM;IACvC,CAAC,CAAC;IACF,OAAO5D,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDG,GAAG,EAAE,MAAOM,EAAU,IAAsB;IAC1C,MAAM1B,QAA+B,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gBAAgBM,EAAE,EAAE,CAAC;IAC3E,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED6C,QAAQ,EAAE,MAAOpC,EAAU,IAA4B;IACrD,MAAM1B,QAAqC,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gBAAgBM,EAAE,QAAQ,CAAC;IACvF,OAAO1B,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAID;AACA,OAAO,MAAM8C,SAAS,GAAG;EACvBC,gBAAgB,EAAE,MAAAA,CAAA,KAA0C;IAC1D,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5B,IAAI;MACF,MAAMnE,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,SAAS,EAAE;QACxCgD,OAAO,EAAE,KAAK,CAAC;MACjB,CAAC,CAAC;MACF,MAAMC,YAAY,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;;MAE3C;MACA,MAAMK,UAAU,GAAGtE,QAAQ,CAACiB,IAAI;MAChC,MAAMsD,OAA4B,GAAG,CAAC,CAAC;;MAEvC;MACAA,OAAO,CAAC,aAAa,CAAC,GAAG;QACvBpE,MAAM,EAAEmE,UAAU,CAACnE,MAAM;QACzBnB,OAAO,EAAE,aAAa;QACtBqF,YAAY;QACZG,OAAO,EAAEF,UAAU,CAACE;MACtB,CAAC;;MAED;MACA,IAAIF,UAAU,CAACG,MAAM,EAAE;QACrBH,UAAU,CAACG,MAAM,CAACC,OAAO,CAAEC,KAAU,IAAK;UACxC;UACA,IAAIC,WAAW,GAAGD,KAAK,CAAC3F,OAAO,IAAI2F,KAAK,CAACE,IAAI,IAAI,SAAS;;UAE1D;UACA,IAAID,WAAW,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;YACpCP,OAAO,CAAC,MAAM,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,MAAM;cAAEqF;YAAa,CAAC;YAC7DE,OAAO,CAAC,OAAO,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,OAAO;cAAEqF;YAAa,CAAC;UACjE,CAAC,MAAM,IAAIO,WAAW,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;YACxCP,OAAO,CAAC,aAAa,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,aAAa;cAAEqF;YAAa,CAAC;YAC3EE,OAAO,CAAC,SAAS,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,SAAS;cAAEqF;YAAa,CAAC;YACnEE,OAAO,CAAC,WAAW,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,WAAW;cAAEqF;YAAa,CAAC;UACzE,CAAC,MAAM,IAAIO,WAAW,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE;YAC7CP,OAAO,CAAC,MAAM,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,MAAM;cAAEqF;YAAa,CAAC;YAC7DE,OAAO,CAAC,UAAU,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,UAAU;cAAEqF;YAAa,CAAC;YACrEE,OAAO,CAAC,gBAAgB,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,gBAAgB;cAAEqF;YAAa,CAAC;UACnF,CAAC,MAAM,IAAIO,WAAW,CAACE,QAAQ,CAAC,eAAe,CAAC,EAAE;YAChDP,OAAO,CAAC,cAAc,CAAC,GAAG;cAAE,GAAGI,KAAK;cAAE3F,OAAO,EAAE,cAAc;cAAEqF;YAAa,CAAC;UAC/E,CAAC,MAAM;YACL;YACAE,OAAO,CAACK,WAAW,CAACG,WAAW,CAAC,CAAC,CAAC,GAAG;cAAE,GAAGJ,KAAK;cAAE3F,OAAO,EAAE4F,WAAW,CAACG,WAAW,CAAC,CAAC;cAAEV;YAAa,CAAC;UACrG;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMW,gBAAgB,GAAG,CACvB,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAC7D,cAAc,EAAE,WAAW,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,CACnE;MAEDA,gBAAgB,CAACN,OAAO,CAAC1F,OAAO,IAAI;QAClC,IAAI,CAACuF,OAAO,CAACvF,OAAO,CAAC,EAAE;UACrBuF,OAAO,CAACvF,OAAO,CAAC,GAAG;YACjBmB,MAAM,EAAE,SAAS;YACjBnB,OAAO;YACPqF,YAAY;YACZG,OAAO,EAAE;UACX,CAAC;QACH;MACF,CAAC,CAAC;MAEF,OAAOD,OAAO;IAChB,CAAC,CAAC,OAAO1E,KAAK,EAAE;MACd,MAAMwE,YAAY,GAAGH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MAC3C,MAAMgB,YAAY,GAAGpF,KAAK,YAAYqF,KAAK,GAAGrF,KAAK,CAAC2E,OAAO,GAAG,eAAe;;MAE7E;MACA,MAAMW,QAAQ,GAAG,CACf,aAAa,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAC5E,cAAc,EAAE,WAAW,EAAE,gBAAgB,EAAE,OAAO,EAAE,UAAU,CACnE;MAED,MAAMZ,OAA4B,GAAG,CAAC,CAAC;MACvCY,QAAQ,CAACT,OAAO,CAAC1F,OAAO,IAAI;QAC1BuF,OAAO,CAACvF,OAAO,CAAC,GAAG;UACjBmB,MAAM,EAAE,WAAW;UACnBnB,OAAO;UACPqF,YAAY;UACZxE,KAAK,EAAEoF;QACT,CAAC;MACH,CAAC,CAAC;MAEF,OAAOV,OAAO;IAChB;EACF,CAAC;EAEDa,YAAY,EAAE,MAAOpG,OAAe,IAA0F;IAC5H;IACA;IACA,IAAI;MACF,MAAMqG,WAAW,GAAG,MAAMtB,SAAS,CAACC,gBAAgB,CAAC,CAAC;MACtD,OAAOqB,WAAW,CAACrG,OAAO,CAAC,IAAI;QAC7BmB,MAAM,EAAE,SAAS;QACjBnB,OAAO;QACPa,KAAK,EAAE;MACT,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QACLM,MAAM,EAAE,WAAW;QACnBnB,OAAO;QACPa,KAAK,EAAEA,KAAK,YAAYqF,KAAK,GAAGrF,KAAK,CAAC2E,OAAO,GAAG;MAClD,CAAC;IACH;EACF,CAAC;EAEDc,cAAc,EAAE,MAAAA,CAAA,KAA0B;IACxC,IAAI;MACF;MACA,MAAMC,cAAc,GAAG,MAAMtG,GAAG,CAACmC,GAAG,CAAC,SAAS,CAAC;MAC/C,MAAMkD,UAAU,GAAGiB,cAAc,CAACtE,IAAI;;MAEtC;MACA,MAAMuE,KAAK,GAAG;QACZC,cAAc,EAAEnB,UAAU,CAACnE,MAAM;QACjCuF,cAAc,EAAEpB,UAAU,CAACG,MAAM,GAAGH,UAAU,CAACG,MAAM,CAACkB,MAAM,GAAG,CAAC;QAChEC,gBAAgB,EAAEtB,UAAU,CAACG,MAAM,GAAGH,UAAU,CAACG,MAAM,CAACoB,MAAM,CAAEC,CAAM,IAAKA,CAAC,CAAC3F,MAAM,KAAK,SAAS,CAAC,CAACwF,MAAM,GAAG,CAAC;QAC7GI,kBAAkB,EAAEzB,UAAU,CAACG,MAAM,GAAGH,UAAU,CAACG,MAAM,CAACoB,MAAM,CAAEC,CAAM,IAAKA,CAAC,CAAC3F,MAAM,KAAK,WAAW,CAAC,CAACwF,MAAM,GAAG,CAAC;QACjHK,SAAS,EAAE,IAAI9B,IAAI,CAAC,CAAC,CAAC+B,WAAW,CAAC,CAAC;QACnCzB,OAAO,EAAEF,UAAU,CAACE,OAAO,IAAI;MACjC,CAAC;MAED,OAAOgB,KAAK;IACd,CAAC,CAAC,OAAO3F,KAAK,EAAE;MACd,OAAO;QACLA,KAAK,EAAE,8BAA8B;QACrC4F,cAAc,EAAE,WAAW;QAC3BC,cAAc,EAAE,CAAC;QACjBE,gBAAgB,EAAE,CAAC;QACnBG,kBAAkB,EAAE,CAAC;QACrBC,SAAS,EAAE,IAAI9B,IAAI,CAAC,CAAC,CAAC+B,WAAW,CAAC;MACpC,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACAC,kBAAkB,EAAE,MAAOC,MAAc,IAA+C;IACtF,MAAMpG,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,iBAAiBgF,MAAM,2BAA2B,CAAC;IAClF,OAAOpG,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDoF,qBAAqB,EAAE,MAAAA,CAAOD,MAAc,EAAEE,WAAoC,KAA+C;IAC/H,MAAMtG,QAAQ,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,iBAAiBuE,MAAM,2BAA2B,EAAEE,WAAW,CAAC;IAC/F,OAAOtG,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED;EACAsF,WAAW,EAAE,MAAAA,CAAA,KAA4C;IACvD,MAAMvG,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,kBAAkB,CAAC;IAClD,OAAOpB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED;EACAuF,eAAe,EAAE,MAAAA,CAAA,KAA2C;IAC1D,MAAMxG,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,4BAA4B,CAAC;IAC5D,OAAOpB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDwF,kBAAkB,EAAE,MAAOC,QAAsB,IAAoC;IACnF,MAAM1G,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,4BAA4B,EAAE0F,QAAQ,CAAC;IACvE,OAAO1G,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED0F,gBAAgB,EAAE,MAAOC,WAA4B,IAAgC;IACnF,MAAM5G,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,iCAAiC,EAAE4F,WAAW,CAAC;IAC/E,OAAO5G,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM4F,YAAY,GAAG;EAC1B;EACAC,QAAQ,EAAE,MAAAA,CAAOvF,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,KAAwC;IAAA,IAAAuF,mBAAA;IAC5E,MAAM/G,QAAwC,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,cAAc,EAAE;MAC7EK,MAAM,EAAE;QAAEF,IAAI;QAAEC,KAAK;QAAEwF,QAAQ,EAAE;MAAY;IAC/C,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAa,GAAG,EAAAF,mBAAA,GAAA/G,QAAQ,CAACiB,IAAI,CAACiG,IAAI,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAoBI,GAAG,CAACC,GAAG;MAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAAA,OAAK;QACpD9F,EAAE,EAAE0F,GAAG,CAAC1F,EAAE;QACVmD,IAAI,EAAEuC,GAAG,CAACvC,IAAI;QACd4C,WAAW,EAAEL,GAAG,CAACK,WAAW;QAC5BC,YAAY,EAAE,EAAAL,qBAAA,GAAAD,GAAG,CAACO,mBAAmB,cAAAN,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBO,MAAM,cAAAN,sBAAA,wBAAAC,sBAAA,GAA/BD,sBAAA,CAAiCO,WAAW,cAAAN,sBAAA,uBAA5CA,sBAAA,CAA8CO,IAAI,CAAC,IAAI,CAAC,KAAI,KAAK;QAC/EC,SAAS,EAAE,cAAc;QAAE;QAC3B5H,MAAM,EAAE,SAAkB;QAAE;QAC5B6H,aAAa,EAAE,EAAAR,sBAAA,GAAAJ,GAAG,CAACO,mBAAmB,cAAAH,sBAAA,uBAAvBA,sBAAA,CAAyBI,MAAM,KAAI,CAAC,CAAC;QACpDK,UAAU,EAAEb,GAAG,CAACa,UAAU;QAC1BC,UAAU,EAAEd,GAAG,CAACc,UAAU;QAC1BC,UAAU,EAAEf,GAAG,CAACe,UAAU;QAC1B5D,OAAO,EAAE,CAAC;MACZ,CAAC;IAAA,CAAC,CAAC,KAAI,EAAE;IAET,OAAO;MACL6D,cAAc,EAAEnB,aAAa;MAC7BoB,KAAK,EAAErI,QAAQ,CAACiB,IAAI,CAACoH,KAAK,IAAI,CAAC;MAC/B9G,IAAI,EAAEvB,QAAQ,CAACiB,IAAI,CAACM,IAAI,IAAI,CAAC;MAC7BC,KAAK,EAAExB,QAAQ,CAACiB,IAAI,CAACO,KAAK,IAAI;IAChC,CAAC;EACH,CAAC;EAED8G,MAAM,EAAE,MAAO5G,EAAU,IAA4B;IACnD,MAAM1B,QAAqC,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,oCAAoCM,EAAE,EAAE,CAAC;IACrG,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDsH,SAAS,EAAE,MAAOlF,OAA2B,IAA4B;IACvE,MAAMrD,QAAqC,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,kCAAkC,EAAEqC,OAAO,CAAC;IACzG,OAAOrD,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDuH,SAAS,EAAE,MAAAA,CAAO9G,EAAU,EAAE2B,OAAoC,KAA4B;IAC5F,MAAMrD,QAAqC,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,oCAAoCH,EAAE,EAAE,EAAE2B,OAAO,CAAC;IAC9G,OAAOrD,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDwH,SAAS,EAAE,MAAO/G,EAAU,IAAoB;IAC9C,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,oCAAoCJ,EAAE,EAAE,CAAC;EAC5D,CAAC;EAEDgH,MAAM,EAAE,MAAOhH,EAAU,IAA0E;IAAA,IAAAiH,mBAAA,EAAAC,oBAAA;IACjG,MAAM5I,QAAyE,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,gBAAgBU,EAAE,MAAM,CAAC;IAC1H,OAAO;MACL8C,OAAO,EAAExE,QAAQ,CAACiB,IAAI,CAACuD,OAAO;MAC9BqE,OAAO,GAAAF,mBAAA,GAAE3I,QAAQ,CAACiB,IAAI,CAACA,IAAI,cAAA0H,mBAAA,uBAAlBA,mBAAA,CAAoBE,OAAO;MACpCC,UAAU,GAAAF,oBAAA,GAAE5I,QAAQ,CAACiB,IAAI,CAACA,IAAI,cAAA2H,oBAAA,uBAAlBA,oBAAA,CAAoBE;IAClC,CAAC;EACH,CAAC;EAEDC,SAAS,EAAE,MAAOrH,EAAU,IAAmC;IAC7D,MAAM1B,QAA4C,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,oCAAoCU,EAAE,SAAS,CAAC;IACpH,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED+H,cAAc,EAAE,MAAAA,CAAOtH,EAAU,EAAEuH,MAAe,KAc5C;IACJ,IAAIA,MAAM,EAAE;MAAA,IAAAC,kBAAA,EAAAC,mBAAA;MACV;MACA,MAAMnJ,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,iBAAiB6H,MAAM,SAAS,CAAC;MAChE,MAAMG,UAAU,GAAGpJ,QAAQ,CAACiB,IAAI;;MAEhC;MACA,OAAO;QACLd,MAAM,EAAEiJ,UAAU,CAACjJ,MAAM,KAAK,SAAS,GAAG,WAAW,GAC7CiJ,UAAU,CAACjJ,MAAM,KAAK,SAAS,GAAG,QAAQ,GAC1CiJ,UAAU,CAACjJ,MAAM,KAAK,SAAS,GAAG,SAAS,GAAGiJ,UAAU,CAACjJ,MAAM,CAAC4E,WAAW,CAAC,CAAC;QACrFP,OAAO,EAAE,EAAA0E,kBAAA,GAAAE,UAAU,CAACC,MAAM,cAAAH,kBAAA,uBAAjBA,kBAAA,CAAmB1E,OAAO,KAAI,QAAQ4E,UAAU,CAACjJ,MAAM,EAAE;QAClEkJ,MAAM,EAAED,UAAU,CAACC,MAAM;QACzBC,KAAK,EAAEF,UAAU,CAACE,KAAK;QACvBC,UAAU,EAAEH,UAAU,CAACG,UAAU;QACjCC,MAAM,EAAEJ,UAAU,CAACI,MAAM;QACzBC,QAAQ,EAAE,EAAAN,mBAAA,GAAAC,UAAU,CAACC,MAAM,cAAAF,mBAAA,uBAAjBA,mBAAA,CAAmBM,QAAQ,MAAKL,UAAU,CAACE,KAAK,GAAG,GAAG,GAAG,CAAC;MACtE,CAAC;IACH,CAAC,MAAM;MACL;MACA,MAAMtJ,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gBAAgBM,EAAE,mBAAmB,CAAC;MACrE,OAAO;QACLvB,MAAM,EAAEH,QAAQ,CAACiB,IAAI,CAACd,MAAM,IAAI,SAAS;QACzCqE,OAAO,EAAExE,QAAQ,CAACiB,IAAI,CAACuD,OAAO,IAAI,qBAAqB;QACvDiF,QAAQ,EAAE;MACZ,CAAC;IACH;EACF,CAAC;EAED;EACAC,WAAW,EAAE,MAAAA,CAAOnI,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,EAAEoC,KAAc,EAAEzD,MAAe,KAA4C;IACpH,MAAMH,QAAqD,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,4BAA4B,EAAE;MACxGK,MAAM,EAAE;QAAEF,IAAI;QAAEC,KAAK;QAAEqC,MAAM,EAAED,KAAK;QAAEzD;MAAO;IAC/C,CAAC,CAAC;IACF,OAAOH,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED0I,SAAS,EAAE,MAAOjI,EAAU,IAAgC;IAC1D,MAAM1B,QAAmE,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,8BAA8BM,EAAE,EAAE,CAAC;IAC7H,OAAO1B,QAAQ,CAACiB,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED2I,YAAY,EAAE,MAAAA,CAAOlI,EAAU,EAAEU,UAAqC,KAAgC;IACpG,MAAMpC,QAAyC,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,8BAA8BH,EAAE,EAAE,EAAEU,UAAU,CAAC;IAC/G,OAAOpC,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED4I,YAAY,EAAE,MAAOnI,EAAU,IAAoB;IACjD,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,8BAA8BJ,EAAE,EAAE,CAAC;EACtD,CAAC;EAEDoI,aAAa,EAAE,MAAOC,aAAkC,IAAoE;IAC1H,MAAM/J,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,kCAAkC,EAAE+I,aAAa,CAAC;IAClF,OAAO/J,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED+I,aAAa,EAAE,MAAOlH,SAAmB,IAAmC;IAC1E,MAAM9C,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,mCAAmC,EAAE;MAAE+B,UAAU,EAAED;IAAU,CAAC,CAAC;IAC/F,OAAO9C,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDgJ,iBAAiB,EAAE,MAAOnH,SAAmB,IAAmC;IAC9E,MAAM9C,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,wCAAwC,EAAE;MACxE+B,UAAU,EAAED;IACd,CAAC,CAAC;IACF,OAAO9C,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED;EACAiJ,aAAa,EAAE,MAAAA,CAAO3I,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,KAA6C;IACtF,MAAMxB,QAAsD,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,6BAA6B,EAAE;MAC1GK,MAAM,EAAE;QAAEF,IAAI;QAAEC;MAAM;IACxB,CAAC,CAAC;IACF,OAAOxB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDkJ,WAAW,EAAE,MAAOzI,EAAU,IAAiC;IAC7D,MAAM1B,QAA0C,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,+BAA+BM,EAAE,EAAE,CAAC;IACrG,OAAO1B,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDmJ,cAAc,EAAE,MAAOC,YAAqC,IAAiC;IAC3F,MAAMrK,QAA0C,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,6BAA6B,EAAEqJ,YAAY,CAAC;IAC9G,OAAOrK,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDqJ,cAAc,EAAE,MAAAA,CAAO5I,EAAU,EAAE2I,YAA8C,KAAiC;IAChH,MAAMrK,QAA0C,GAAG,MAAMf,GAAG,CAAC4C,GAAG,CAAC,+BAA+BH,EAAE,EAAE,EAAE2I,YAAY,CAAC;IACnH,OAAOrK,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAEDsJ,cAAc,EAAE,MAAO7I,EAAU,IAAoB;IACnD,MAAMzC,GAAG,CAAC6C,MAAM,CAAC,+BAA+BJ,EAAE,EAAE,CAAC;EACvD,CAAC;EAED;EACA8I,qBAAqB,EAAE,MAAOC,MAA4B,IAAmB;IAC3E,MAAMzK,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,IAAI,CAAC,2CAA2C,EAAEyJ,MAAM,CAAC;IACpF,OAAOzK,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMyJ,SAAS,GAAG;EACvBC,SAAS,EAAE,MAAAA,CAAA,KAA0B;IACnC,MAAM3K,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gCAAgC,CAAC;IAChE,OAAOpB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED2J,UAAU,EAAE,MAAAA,CAAA,KAA0B;IACpC,MAAM5K,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,iCAAiC,CAAC;IACjE,OAAOpB,QAAQ,CAACiB,IAAI;EACtB,CAAC;EAED4J,SAAS,EAAE,MAAAA,CAAA,KAA0B;IACnC,MAAM7K,QAAQ,GAAG,MAAMf,GAAG,CAACmC,GAAG,CAAC,gCAAgC,CAAC;IAChE,OAAOpB,QAAQ,CAACiB,IAAI;EACtB;AACF,CAAC;AAED,eAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}