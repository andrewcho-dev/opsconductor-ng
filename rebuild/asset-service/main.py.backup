#!/usr/bin/env python3
"""
OpsConductor Asset Service
Handles targets, credentials, and discovery
Consolidates: target-service + credential-service + discovery-service
"""

import sys
import os
from typing import List, Optional
from fastapi import Query, HTTPException, status
from pydantic import BaseModel
from datetime import datetime
sys.path.append('/app/shared')
from base_service import BaseService

# ============================================================================
# MODELS
# ============================================================================

# Enhanced Target Models (for frontend compatibility)
class TargetServiceCreate(BaseModel):
    service_type: str
    port: int
    is_default: bool = False
    is_secure: bool = False
    is_enabled: bool = True
    notes: Optional[str] = None
    
    # Embedded credential fields
    credential_type: Optional[str] = None  # 'username_password', 'ssh_key', 'api_key', 'bearer_token'
    username: Optional[str] = None
    password: Optional[str] = None  # Will be encrypted in backend
    private_key: Optional[str] = None  # Will be encrypted in backend
    public_key: Optional[str] = None
    api_key: Optional[str] = None  # Will be encrypted in backend
    bearer_token: Optional[str] = None  # Will be encrypted in backend
    certificate: Optional[str] = None  # Will be encrypted in backend
    passphrase: Optional[str] = None  # Will be encrypted in backend
    domain: Optional[str] = None  # For Windows domain authentication

class TargetService(BaseModel):
    id: int
    target_id: int
    service_type: str
    port: int
    is_default: bool = False
    is_secure: bool = False
    is_enabled: bool = True
    notes: Optional[str] = None
    
    # Embedded credential fields (decrypted for API responses)
    credential_type: Optional[str] = None
    username: Optional[str] = None
    password: Optional[str] = None  # Will be masked in responses
    private_key: Optional[str] = None  # Will be masked in responses
    public_key: Optional[str] = None
    api_key: Optional[str] = None  # Will be masked in responses
    bearer_token: Optional[str] = None  # Will be masked in responses
    certificate: Optional[str] = None  # Will be masked in responses
    passphrase: Optional[str] = None  # Will be masked in responses
    domain: Optional[str] = None
    
    # Connection status fields
    connection_status: Optional[str] = 'unknown'
    last_tested_at: Optional[str] = None
    
    created_at: str

class TargetServiceSummary(BaseModel):
    """Simplified service model for target list view - only shows credential type, not sensitive data"""
    id: int
    target_id: int
    service_type: str
    port: int
    is_default: bool = False
    is_secure: bool = False
    is_enabled: bool = True
    notes: Optional[str] = None
    
    # Only credential type, no sensitive data
    credential_type: Optional[str] = None
    
    # Connection status fields
    connection_status: Optional[str] = 'unknown'
    last_tested_at: Optional[str] = None
    
    created_at: str

class EnhancedTargetCreate(BaseModel):
    name: str
    hostname: str
    ip_address: Optional[str] = None
    os_type: Optional[str] = 'other'
    os_version: Optional[str] = None
    description: Optional[str] = None
    tags: List[str] = []
    services: List[TargetServiceCreate] = []

class EnhancedTargetUpdate(BaseModel):
    name: Optional[str] = None
    hostname: Optional[str] = None
    ip_address: Optional[str] = None
    os_type: Optional[str] = None
    os_version: Optional[str] = None
    description: Optional[str] = None
    tags: Optional[List[str]] = None
    services: Optional[List[TargetServiceCreate]] = None

class EnhancedTarget(BaseModel):
    id: int
    name: str
    hostname: str
    ip_address: Optional[str] = None
    os_type: Optional[str] = None
    os_version: Optional[str] = None
    description: Optional[str] = None
    tags: List[str] = []
    services: List[TargetService] = []
    created_at: str
    updated_at: Optional[str] = None

class EnhancedTargetSummary(BaseModel):
    """Simplified target model for list view - services only show credential type"""
    id: int
    name: str
    hostname: str
    ip_address: Optional[str] = None
    os_type: Optional[str] = None
    os_version: Optional[str] = None
    description: Optional[str] = None
    tags: List[str] = []
    services: List[TargetServiceSummary] = []
    created_at: str
    updated_at: Optional[str] = None

class EnhancedTargetListResponse(BaseModel):
    targets: List[EnhancedTargetSummary]
    total: int
    skip: int
    limit: int

# ============================================================================
# SERVICE TYPE TO CREDENTIAL TYPE MAPPING
# ============================================================================

SERVICE_CREDENTIAL_MAPPING = {
    'ssh': ['ssh_key', 'username_password'],
    'sftp': ['ssh_key', 'username_password'],
    'rdp': ['username_password'],
    'winrm': ['username_password'],
    'winrm_https': ['username_password'],
    'wmi': ['username_password'],
    'smb': ['username_password'],
    'http': ['api_key', 'username_password', 'bearer_token'],
    'https': ['api_key', 'username_password', 'bearer_token'],
    'http_alt': ['api_key', 'username_password', 'bearer_token'],
    'https_alt': ['api_key', 'username_password', 'bearer_token'],
    'mysql': ['username_password'],
    'postgresql': ['username_password'],
    'sql_server': ['username_password'],
    'oracle': ['username_password'],
    'mongodb': ['username_password'],
    'redis': ['username_password'],
    'smtp': ['username_password'],
    'smtps': ['username_password'],
    'smtp_submission': ['username_password'],
    'imap': ['username_password'],
    'imaps': ['username_password'],
    'pop3': ['username_password'],
    'pop3s': ['username_password'],
    'ftp': ['username_password'],
    'ftps': ['username_password'],
    'dns': ['username_password'],
    'snmp': ['username_password'],
    'ntp': ['username_password'],
    'telnet': ['username_password'],
    'vnc': ['username_password']
}

# ============================================================================
# VALIDATION FUNCTIONS
# ============================================================================

def validate_services(services: List[TargetServiceCreate]) -> None:
    """Validate service configuration"""
    if not services:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="At least one service is required"
        )
    
    # Check for exactly one default service
    default_count = sum(1 for service in services if service.is_default)
    if default_count == 0:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Exactly one service must be marked as default"
        )
    elif default_count > 1:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Only one service can be marked as default"
        )
    
    # Validate credential types for each service
    for service in services:
        if service.credential_type:
            allowed_types = SERVICE_CREDENTIAL_MAPPING.get(service.service_type, [])
            if service.credential_type not in allowed_types:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Credential type '{service.credential_type}' is not allowed for service type '{service.service_type}'. Allowed types: {allowed_types}"
                )

class Target(BaseModel):
    id: int
    name: str
    host: str
    port: Optional[int] = None
    platform: str
    credential_id: Optional[int] = None
    group_id: Optional[int] = None
    tags: List[str] = []
    metadata: dict = {}
    is_active: bool
    last_seen: Optional[str] = None
    created_by: int
    created_at: str
    updated_at: str

class TargetCreate(BaseModel):
    name: str
    host: str
    port: Optional[int] = None
    platform: str
    credential_id: Optional[int] = None
    group_id: Optional[int] = None
    tags: List[str] = []
    metadata: dict = {}
    is_active: bool = True

class TargetUpdate(BaseModel):
    name: Optional[str] = None
    host: Optional[str] = None
    port: Optional[int] = None
    platform: Optional[str] = None
    credential_id: Optional[int] = None
    group_id: Optional[int] = None
    tags: Optional[List[str]] = None
    metadata: Optional[dict] = None
    is_active: Optional[bool] = None

class TargetListResponse(BaseModel):
    targets: List[Target]
    total: int
    skip: int
    limit: int



class DiscoveryJob(BaseModel):
    id: int
    name: str
    target_range: str  # Changed from network_range to match DB
    scan_type: str
    status: str
    configuration: dict = {}
    results: dict = {}
    started_at: Optional[str] = None
    completed_at: Optional[str] = None
    created_by: int
    created_at: str

class DiscoveryCreate(BaseModel):
    name: str
    target_range: str  # Changed from network_range to match DB
    scan_type: str = "ping"
    configuration: dict = {}

class DiscoveryUpdate(BaseModel):
    status: Optional[str] = None
    configuration: Optional[dict] = None
    results: Optional[dict] = None

class DiscoveryListResponse(BaseModel):
    discovery_jobs: List[DiscoveryJob]
    total: int
    skip: int
    limit: int

class DiscoveredService(BaseModel):
    protocol: str
    port: int
    service_name: Optional[str] = None
    version: Optional[str] = None
    is_secure: Optional[bool] = False

class DiscoveredTarget(BaseModel):
    id: int
    discovery_job_id: int
    hostname: Optional[str] = None
    ip_address: str
    os_type: Optional[str] = None
    os_version: Optional[str] = None
    services: List[DiscoveredService] = []
    preferred_service: Optional[DiscoveredService] = None
    system_info: dict = {}
    duplicate_status: str = "unique"  # 'unique' | 'duplicate' | 'similar'
    existing_target_id: Optional[int] = None
    import_status: str = "pending"  # 'pending' | 'imported' | 'ignored' | 'duplicate_skipped'
    discovered_at: str

class DiscoveredTargetUpdate(BaseModel):
    hostname: Optional[str] = None
    os_type: Optional[str] = None
    os_version: Optional[str] = None
    import_status: Optional[str] = None

class DiscoveredTargetListResponse(BaseModel):
    targets: List[DiscoveredTarget]
    total: int

class AssetService(BaseService):
    def __init__(self):
        super().__init__("asset-service", "1.0.0", 3002)
        self._setup_routes()

    def _setup_routes(self):
        """Setup all API routes"""
        
        # ============================================================================
        # TARGET CRUD ENDPOINTS
        # ============================================================================
        
        @self.app.get("/targets", response_model=EnhancedTargetListResponse)
        async def list_targets(
            skip: int = Query(0, ge=0),
            limit: int = Query(100, ge=1, le=1000)
        ):
            """List all targets (using enhanced system)"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get total count
                    total = await conn.fetchval("SELECT COUNT(*) FROM assets.enhanced_targets")
                    
                    # Get targets with pagination
                    target_rows = await conn.fetch("""
                        SELECT id, name, hostname, ip_address, os_type, os_version,
                               description, tags, created_at, updated_at
                        FROM assets.enhanced_targets 
                        ORDER BY created_at DESC 
                        LIMIT $1 OFFSET $2
                    """, limit, skip)
                    
                    targets = []
                    for row in target_rows:
                        # Get services for this target (list view - only credential type, no sensitive data)
                        service_rows = await conn.fetch("""
                            SELECT id, service_type, port, is_default, is_secure, is_enabled, notes,
                                   credential_type, connection_status, last_tested_at, created_at
                            FROM assets.target_services 
                            WHERE target_id = $1
                            ORDER BY is_default DESC, service_type, port
                        """, row['id'])
                        
                        services = []
                        for service_row in service_rows:
                            services.append(TargetServiceSummary(
                                id=service_row['id'],
                                target_id=row['id'],
                                service_type=service_row['service_type'],
                                port=service_row['port'],
                                is_default=service_row['is_default'],
                                is_secure=service_row['is_secure'],
                                is_enabled=service_row['is_enabled'],
                                notes=service_row['notes'],
                                credential_type=service_row['credential_type'],
                                connection_status=service_row['connection_status'],
                                last_tested_at=service_row['last_tested_at'].isoformat() if service_row['last_tested_at'] else None,
                                created_at=service_row['created_at'].isoformat()
                            ))
                        
                        import json
                        targets.append(EnhancedTargetSummary(
                            id=row['id'],
                            name=row['name'],
                            hostname=row['hostname'],
                            ip_address=row['ip_address'],
                            os_type=row['os_type'],
                            os_version=row['os_version'],
                            description=row['description'],
                            tags=json.loads(row['tags']) if row['tags'] else [],
                            services=services,
                            created_at=row['created_at'].isoformat(),
                            updated_at=row['updated_at'].isoformat() if row['updated_at'] else None
                        ))
                    
                    return EnhancedTargetListResponse(
                        targets=targets,
                        total=total,
                        skip=skip,
                        limit=limit
                    )
            except Exception as e:
                self.logger.error("Failed to fetch targets", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to fetch targets"
                )

        @self.app.post("/targets", response_model=dict)
        async def create_target(target_data: EnhancedTargetCreate):
            """Create a new target (using enhanced system)"""
            try:
                # Validate services
                validate_services(target_data.services)
                
                async with self.db.pool.acquire() as conn:
                    async with conn.transaction():
                        import json
                        
                        # Create the target
                        target_row = await conn.fetchrow("""
                            INSERT INTO assets.enhanced_targets 
                            (name, hostname, ip_address, os_type, os_version, description, tags)
                            VALUES ($1, $2, $3, $4, $5, $6, $7)
                            RETURNING id, name, hostname, ip_address, os_type, os_version,
                                      description, tags, created_at, updated_at
                        """, target_data.name, target_data.hostname, target_data.ip_address,
                             target_data.os_type, target_data.os_version, target_data.description,
                             json.dumps(target_data.tags or []))
                        
                        # Create services
                        services = []
                        for service_data in target_data.services:
                            # TODO: Add encryption for sensitive fields
                            service_row = await conn.fetchrow("""
                                INSERT INTO assets.target_services 
                                (target_id, service_type, port, is_default, is_secure, is_enabled, notes,
                                 credential_type, username, password_encrypted, private_key_encrypted,
                                 public_key, api_key_encrypted, bearer_token_encrypted, certificate_encrypted,
                                 passphrase_encrypted, domain)
                                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
                                RETURNING id, service_type, port, is_default, is_secure, is_enabled, notes,
                                          credential_type, username, password_encrypted, private_key_encrypted,
                                          public_key, api_key_encrypted, bearer_token_encrypted, certificate_encrypted,
                                          passphrase_encrypted, domain, created_at
                            """, target_row['id'], service_data.service_type, service_data.port,
                                 service_data.is_default, service_data.is_secure, service_data.is_enabled, 
                                 service_data.notes, service_data.credential_type, service_data.username,
                                 service_data.password, service_data.private_key, service_data.public_key,
                                 service_data.api_key, service_data.bearer_token, service_data.certificate,
                                 service_data.passphrase, service_data.domain)
                            
                            services.append(TargetService(
                                id=service_row['id'],
                                target_id=target_row['id'],
                                service_type=service_row['service_type'],
                                port=service_row['port'],
                                is_default=service_row['is_default'],
                                is_secure=service_row['is_secure'],
                                is_enabled=service_row['is_enabled'],
                                notes=service_row['notes'],
                                credential_type=service_row['credential_type'],
                                username=service_row['username'],
                                password="***" if service_row['password_encrypted'] else None,  # Mask password
                                private_key="***" if service_row['private_key_encrypted'] else None,  # Mask key
                                public_key=service_row['public_key'],
                                api_key="***" if service_row['api_key_encrypted'] else None,  # Mask API key
                                bearer_token="***" if service_row['bearer_token_encrypted'] else None,  # Mask token
                                certificate="***" if service_row['certificate_encrypted'] else None,  # Mask cert
                                passphrase="***" if service_row['passphrase_encrypted'] else None,  # Mask passphrase
                                domain=service_row['domain'],
                                created_at=service_row['created_at'].isoformat()
                            ))
                        
                        target = EnhancedTarget(
                            id=target_row['id'],
                            name=target_row['name'],
                            hostname=target_row['hostname'],
                            ip_address=target_row['ip_address'],
                            os_type=target_row['os_type'],
                            os_version=target_row['os_version'],
                            description=target_row['description'],
                            tags=json.loads(target_row['tags']) if target_row['tags'] else [],
                            services=services,
                            created_at=target_row['created_at'].isoformat(),
                            updated_at=target_row['updated_at'].isoformat() if target_row['updated_at'] else None
                        )
                        
                        return {"success": True, "message": "Target created", "data": target}
            except Exception as e:
                self.logger.error("Failed to create target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to create target"
                )

        @self.app.get("/targets/{target_id}", response_model=dict)
        async def get_target(target_id: int):
            """Get target by ID (using enhanced system)"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get target
                    target_row = await conn.fetchrow("""
                        SELECT id, name, hostname, ip_address, os_type, os_version,
                               description, tags, created_at, updated_at
                        FROM assets.enhanced_targets 
                        WHERE id = $1
                    """, target_id)
                    
                    if not target_row:
                        raise HTTPException(
                            status_code=status.HTTP_404_NOT_FOUND,
                            detail="Target not found"
                        )
                    
                    # Get services
                    service_rows = await conn.fetch("""
                        SELECT id, service_type, port, is_default, is_secure, is_enabled, notes,
                               credential_type, username, password_encrypted, private_key_encrypted,
                               public_key, api_key_encrypted, bearer_token_encrypted, certificate_encrypted,
                               passphrase_encrypted, domain, connection_status, last_tested_at, created_at
                        FROM assets.target_services 
                        WHERE target_id = $1
                        ORDER BY is_default DESC, service_type, port
                    """, target_id)
                    
                    services = []
                    for service_row in service_rows:
                        services.append(TargetService(
                            id=service_row['id'],
                            target_id=target_id,
                            service_type=service_row['service_type'],
                            port=service_row['port'],
                            is_default=service_row['is_default'],
                            is_secure=service_row['is_secure'],
                            is_enabled=service_row['is_enabled'],
                            notes=service_row['notes'],
                            credential_type=service_row['credential_type'],
                            username=service_row['username'],
                            password="***" if service_row['password_encrypted'] else None,
                            private_key="***" if service_row['private_key_encrypted'] else None,
                            public_key=service_row['public_key'],
                            api_key="***" if service_row['api_key_encrypted'] else None,
                            bearer_token="***" if service_row['bearer_token_encrypted'] else None,
                            certificate="***" if service_row['certificate_encrypted'] else None,
                            passphrase="***" if service_row['passphrase_encrypted'] else None,
                            domain=service_row['domain'],
                            connection_status=service_row['connection_status'],
                            last_tested_at=service_row['last_tested_at'].isoformat() if service_row['last_tested_at'] else None,
                            created_at=service_row['created_at'].isoformat()
                        ))
                    
                    import json
                    target = EnhancedTarget(
                        id=target_row['id'],
                        name=target_row['name'],
                        hostname=target_row['hostname'],
                        ip_address=target_row['ip_address'],
                        os_type=target_row['os_type'],
                        os_version=target_row['os_version'],
                        description=target_row['description'],
                        tags=json.loads(target_row['tags']) if target_row['tags'] else [],
                        services=services,
                        created_at=target_row['created_at'].isoformat(),
                        updated_at=target_row['updated_at'].isoformat() if target_row['updated_at'] else None
                    )
                    
                    return {"success": True, "data": target}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to get target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to get target"
                )

        @self.app.put("/targets/{target_id}", response_model=dict)
        async def update_target(target_id: int, target_data: EnhancedTargetUpdate):
            """Update target (using enhanced system)"""
            try:
                # Validate services if provided
                if target_data.services is not None:
                    validate_services(target_data.services)
                
                async with self.db.pool.acquire() as conn:
                    async with conn.transaction():
                        # Check if target exists
                        exists = await conn.fetchval("SELECT id FROM assets.enhanced_targets WHERE id = $1", target_id)
                        if not exists:
                            raise HTTPException(
                                status_code=status.HTTP_404_NOT_FOUND,
                                detail="Target not found"
                            )
                        
                        # Build update query dynamically
                        update_fields = []
                        update_values = []
                        param_count = 1
                        
                        if target_data.name is not None:
                            update_fields.append(f"name = ${param_count}")
                            update_values.append(target_data.name)
                            param_count += 1
                        
                        if target_data.hostname is not None:
                            update_fields.append(f"hostname = ${param_count}")
                            update_values.append(target_data.hostname)
                            param_count += 1
                        
                        if target_data.ip_address is not None:
                            update_fields.append(f"ip_address = ${param_count}")
                            update_values.append(target_data.ip_address)
                            param_count += 1
                        
                        if target_data.os_type is not None:
                            update_fields.append(f"os_type = ${param_count}")
                            update_values.append(target_data.os_type)
                            param_count += 1
                        
                        if target_data.os_version is not None:
                            update_fields.append(f"os_version = ${param_count}")
                            update_values.append(target_data.os_version)
                            param_count += 1
                        
                        if target_data.description is not None:
                            update_fields.append(f"description = ${param_count}")
                            update_values.append(target_data.description)
                            param_count += 1
                        
                        if target_data.tags is not None:
                            import json
                            update_fields.append(f"tags = ${param_count}")
                            update_values.append(json.dumps(target_data.tags))
                            param_count += 1
                        
                        # Always update the updated_at timestamp if there are any changes
                        if update_fields or target_data.services is not None:
                            if update_fields:
                                update_fields.append(f"updated_at = ${param_count}")
                                update_values.append(datetime.utcnow())
                                update_values.append(target_id)
                                
                                query = f"""
                                    UPDATE assets.enhanced_targets 
                                    SET {', '.join(update_fields)}
                                    WHERE id = ${param_count + 1}
                                    RETURNING id, name, hostname, ip_address, os_type, os_version,
                                              description, tags, created_at, updated_at
                                """
                                
                                target_row = await conn.fetchrow(query, *update_values)
                            else:
                                # Only services are being updated, just update timestamp
                                target_row = await conn.fetchrow("""
                                    UPDATE assets.enhanced_targets 
                                    SET updated_at = $1
                                    WHERE id = $2
                                    RETURNING id, name, hostname, ip_address, os_type, os_version,
                                              description, tags, created_at, updated_at
                                """, datetime.utcnow(), target_id)
                            
                            # Handle services update if provided
                            if target_data.services is not None:
                                # Delete existing services
                                await conn.execute("DELETE FROM assets.target_services WHERE target_id = $1", target_id)
                                
                                # Create new services
                                for service_data in target_data.services:
                                    await conn.execute("""
                                        INSERT INTO assets.target_services 
                                        (target_id, service_type, port, is_default, is_secure, is_enabled, notes,
                                         credential_type, username, password_encrypted, private_key_encrypted,
                                         public_key, api_key_encrypted, bearer_token_encrypted, certificate_encrypted,
                                         passphrase_encrypted, domain)
                                        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
                                    """, target_id, service_data.service_type, service_data.port,
                                         service_data.is_default, service_data.is_secure, service_data.is_enabled, 
                                         service_data.notes, service_data.credential_type, service_data.username,
                                         service_data.password, service_data.private_key, service_data.public_key,
                                         service_data.api_key, service_data.bearer_token, service_data.certificate,
                                         service_data.passphrase, service_data.domain)
                            
                            # Get updated services
                            service_rows = await conn.fetch("""
                                SELECT id, service_type, port, is_default, is_secure, is_enabled, notes,
                                       credential_type, username, password_encrypted, private_key_encrypted,
                                       public_key, api_key_encrypted, bearer_token_encrypted, certificate_encrypted,
                                       passphrase_encrypted, domain, created_at
                                FROM assets.target_services 
                                WHERE target_id = $1
                                ORDER BY is_default DESC, service_type, port
                            """, target_id)
                            
                            services = []
                            for service_row in service_rows:
                                services.append(TargetService(
                                    id=service_row['id'],
                                    target_id=target_id,
                                    service_type=service_row['service_type'],
                                    port=service_row['port'],
                                    is_default=service_row['is_default'],
                                    is_secure=service_row['is_secure'],
                                    is_enabled=service_row['is_enabled'],
                                    notes=service_row['notes'],
                                    credential_type=service_row['credential_type'],
                                    username=service_row['username'],
                                    password="***" if service_row['password_encrypted'] else None,
                                    private_key="***" if service_row['private_key_encrypted'] else None,
                                    public_key=service_row['public_key'],
                                    api_key="***" if service_row['api_key_encrypted'] else None,
                                    bearer_token="***" if service_row['bearer_token_encrypted'] else None,
                                    certificate="***" if service_row['certificate_encrypted'] else None,
                                    passphrase="***" if service_row['passphrase_encrypted'] else None,
                                    domain=service_row['domain'],
                                    created_at=service_row['created_at'].isoformat()
                                ))
                            
                            import json
                            target = EnhancedTarget(
                                id=target_row['id'],
                                name=target_row['name'],
                                hostname=target_row['hostname'],
                                ip_address=target_row['ip_address'],
                                os_type=target_row['os_type'],
                                os_version=target_row['os_version'],
                                description=target_row['description'],
                                tags=json.loads(target_row['tags']) if target_row['tags'] else [],
                                services=services,
                                created_at=target_row['created_at'].isoformat(),
                                updated_at=target_row['updated_at'].isoformat() if target_row['updated_at'] else None
                            )
                            
                            return {"success": True, "message": "Target updated", "data": target}
                        else:
                            return {"success": True, "message": "No changes made"}
                        
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to update target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to update target"
                )

        @self.app.delete("/targets/{target_id}", response_model=dict)
        async def delete_target(target_id: int):
            """Delete target (using enhanced system)"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Check if target exists
                    exists = await conn.fetchval("SELECT id FROM assets.enhanced_targets WHERE id = $1", target_id)
                    if not exists:
                        raise HTTPException(
                            status_code=status.HTTP_404_NOT_FOUND,
                            detail="Target not found"
                        )
                    
                    # Delete target (services will be deleted by CASCADE)
                    await conn.execute("DELETE FROM assets.enhanced_targets WHERE id = $1", target_id)
                    
                    return {"success": True, "message": "Target deleted"}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to delete target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to delete target"
                )

        @self.app.post("/targets/{target_id}/test-connection", response_model=dict)
        async def test_target_connection(target_id: int):
            """Test connection to target"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get target details with credential
                    target_row = await conn.fetchrow("""
                        SELECT t.id, t.name, t.host, t.port, t.target_type, t.credential_id,
                               c.credential_type, c.encrypted_data
                        FROM assets.targets t
                        LEFT JOIN assets.credentials c ON t.credential_id = c.id
                        WHERE t.id = $1 AND t.is_active = true
                    """, target_id)
                    
                    if not target_row:
                        raise HTTPException(status_code=404, detail="Target not found or inactive")
                    
                    # Determine connection type based on target type and port
                    connection_type = self._determine_connection_type(
                        target_row['target_type'], 
                        target_row['port']
                    )
                    
                    # Test connection based on type
                    test_result = await self._test_connection(
                        host=target_row['host'],
                        port=target_row['port'],
                        connection_type=connection_type,
                        credential_data=target_row['encrypted_data']
                    )
                    
                    # Update target's last_tested timestamp
                    await conn.execute(
                        "UPDATE assets.targets SET metadata = COALESCE(metadata, '{}')::jsonb || $1::jsonb WHERE id = $2",
                        '{"last_tested": "' + datetime.utcnow().isoformat() + '"}',
                        target_id
                    )
                    
                    return {
                        "success": True,
                        "data": {
                            "target_id": target_id,
                            "target_name": target_row['name'],
                            "host": target_row['host'],
                            "port": target_row['port'],
                            "connection_type": connection_type,
                            "status": test_result['status'],
                            "message": test_result['message'],
                            "response_time_ms": test_result.get('response_time_ms'),
                            "tested_at": datetime.utcnow().isoformat()
                        }
                    }
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to test target connection", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to test target connection"
                )

        @self.app.post("/targets/services/{service_id}/test-connection", response_model=dict)
        async def test_service_connection(service_id: int):
            """Test connection to a specific service (enhanced system)"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get service details with target info (enhanced schema)
                    service_row = await conn.fetchrow("""
                        SELECT s.id, s.target_id, s.service_type, s.port, s.is_enabled,
                               s.credential_type, s.username, s.password_encrypted, 
                               s.private_key_encrypted, s.api_key_encrypted, 
                               s.bearer_token_encrypted, s.certificate_encrypted,
                               s.passphrase_encrypted, s.domain,
                               t.name as target_name, t.hostname, t.ip_address, t.os_type
                        FROM assets.target_services s
                        JOIN assets.enhanced_targets t ON s.target_id = t.id
                        WHERE s.id = $1 AND s.is_enabled = true
                    """, service_id)
                    
                    if not service_row:
                        raise HTTPException(status_code=404, detail="Service not found or disabled")
                    
                    # Determine connection type based on service type and port
                    connection_type = self._determine_connection_type(
                        service_row['service_type'], 
                        service_row['port']
                    )
                    
                    # Build credential data from embedded fields
                    credential_data = None
                    if service_row['credential_type']:
                        import json
                        credential_dict = {
                            'type': service_row['credential_type'],
                            'username': service_row['username'],
                            'password': service_row['password_encrypted'],
                            'private_key': service_row['private_key_encrypted'],
                            'api_key': service_row['api_key_encrypted'],
                            'bearer_token': service_row['bearer_token_encrypted'],
                            'certificate': service_row['certificate_encrypted'],
                            'passphrase': service_row['passphrase_encrypted'],
                            'domain': service_row['domain']
                        }
                        credential_data = json.dumps(credential_dict)
                    
                    # Use hostname or IP address for connection
                    host = service_row['hostname'] or service_row['ip_address']
                    
                    # Test connection based on type
                    test_result = await self._test_connection(
                        host=host,
                        port=service_row['port'],
                        connection_type=connection_type,
                        credential_data=credential_data
                    )
                    
                    # Update service's connection status and last tested timestamp
                    connection_status = 'connected' if test_result['status'] == 'success' else 'failed'
                    
                    from datetime import datetime
                    
                    await conn.execute("""
                        UPDATE assets.target_services 
                        SET connection_status = $1, last_tested_at = $2
                        WHERE id = $3
                    """, connection_status, datetime.utcnow(), service_id)
                    
                    return {
                        "success": True,
                        "data": {
                            "service_id": service_id,
                            "target_name": service_row['target_name'],
                            "service_type": service_row['service_type'],
                            "host": host,
                            "port": service_row['port'],
                            "connection_type": connection_type,
                            "status": test_result['status'],
                            "message": test_result['message'],
                            "response_time_ms": test_result.get('response_time_ms'),
                            "connection_status": connection_status,
                            "tested_at": datetime.utcnow().isoformat()
                        }
                    }
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to test service connection", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to test service connection"
                )



        # ============================================================================
        # DISCOVERY CRUD ENDPOINTS
        # ============================================================================
        
        @self.app.get("/discovery/discovery-jobs", response_model=DiscoveryListResponse)
        async def list_discovery_jobs(
            skip: int = Query(0, ge=0),
            limit: int = Query(100, ge=1, le=1000)
        ):
            """List all discovery jobs"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get total count
                    total = await conn.fetchval("SELECT COUNT(*) FROM assets.discovery_scans")
                    
                    # Get discovery jobs with pagination
                    rows = await conn.fetch("""
                        SELECT id, name, target_range, scan_type, status, configuration, results,
                               started_at, completed_at, created_by, created_at
                        FROM assets.discovery_scans 
                        ORDER BY created_at DESC 
                        LIMIT $1 OFFSET $2
                    """, limit, skip)
                    
                    discovery_jobs = []
                    for row in rows:
                        import json
                        discovery_jobs.append(DiscoveryJob(
                            id=row['id'],
                            name=row['name'],
                            target_range=row['target_range'],
                            scan_type=row['scan_type'],
                            status=row['status'],
                            configuration=json.loads(row['configuration']) if row['configuration'] else {},
                            results=json.loads(row['results']) if row['results'] else {},
                            started_at=row['started_at'].isoformat() if row['started_at'] else None,
                            completed_at=row['completed_at'].isoformat() if row['completed_at'] else None,
                            created_by=row['created_by'],
                            created_at=row['created_at'].isoformat()
                        ))
                    
                    return DiscoveryListResponse(
                        discovery_jobs=discovery_jobs,
                        total=total,
                        skip=skip,
                        limit=limit
                    )
            except Exception as e:
                self.logger.error("Failed to fetch discovery jobs", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to fetch discovery jobs"
                )

        @self.app.get("/discovery/discovery-jobs", response_model=DiscoveryListResponse)
        async def create_credential(credential_data: CredentialCreate):
            """Create a new credential"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Encrypt sensitive data (simplified for demo)
                    encrypted_password = f"encrypted_{credential_data.password}" if credential_data.password else None
                    encrypted_key = f"encrypted_{credential_data.private_key}" if credential_data.private_key else None
                    
                    import json
                    # Create encrypted data structure
                    encrypted_data = {
                        "password": encrypted_password,
                        "private_key": encrypted_key,
                        "username": getattr(credential_data, 'username', None)
                    }
                    
                    row = await conn.fetchrow("""
                        INSERT INTO assets.credentials (name, credential_type, encrypted_data, 
                                               description, metadata, is_active, created_by)
                        VALUES ($1, $2, $3, $4, $5, $6, 1)
                        RETURNING id, name, credential_type, description, metadata,
                                  is_active, created_by, created_at, updated_at
                    """, credential_data.name, credential_data.credential_type, json.dumps(encrypted_data),
                         credential_data.description, json.dumps(credential_data.metadata or {}), credential_data.is_active)
                    
                    credential = Credential(
                        id=row['id'],
                        name=row['name'],
                        credential_type=row['credential_type'],
                        username=getattr(credential_data, 'username', None),
                        description=row['description'],
                        metadata=json.loads(row['metadata']) if row['metadata'] else {},
                        is_active=row['is_active'],
                        created_by=row['created_by'],
                        created_at=row['created_at'].isoformat(),
                        updated_at=row['updated_at'].isoformat() if row['updated_at'] else None
                    )
                    
                    return {"success": True, "message": "Credential created", "data": credential}
            except Exception as e:
                self.logger.error("Failed to create credential", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to create credential"
                )

        @self.app.get("/credentials/{credential_id}", response_model=dict)
        async def get_credential(credential_id: int):
            """Get credential by ID"""
            try:
                async with self.db.pool.acquire() as conn:
                    row = await conn.fetchrow("""
                        SELECT id, name, credential_type, encrypted_data, description, metadata,
                               is_active, created_by, created_at, updated_at
                        FROM assets.credentials WHERE id = $1
                    """, credential_id)
                    
                    if not row:
                        raise HTTPException(status_code=404, detail="Credential not found")
                    
                    import json
                    # Extract username from encrypted_data if available
                    try:
                        encrypted_data = json.loads(row['encrypted_data']) if row['encrypted_data'] else {}
                    except (json.JSONDecodeError, TypeError):
                        encrypted_data = {}
                    username = encrypted_data.get('username')
                    
                    credential = Credential(
                        id=row['id'],
                        name=row['name'],
                        credential_type=row['credential_type'],
                        username=username,
                        description=row['description'],
                        metadata=json.loads(row['metadata']) if row['metadata'] else {},
                        is_active=row['is_active'],
                        created_by=row['created_by'],
                        created_at=row['created_at'].isoformat(),
                        updated_at=row['updated_at'].isoformat() if row['updated_at'] else None
                    )
                    
                    return {"success": True, "data": credential}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to get credential", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to get credential"
                )

        @self.app.put("/credentials/{credential_id}", response_model=dict)
        async def update_credential(credential_id: int, credential_data: CredentialUpdate):
            """Update credential"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Build dynamic update query
                    updates = []
                    values = []
                    param_count = 1
                    
                    if credential_data.name is not None:
                        updates.append(f"name = ${param_count}")
                        values.append(credential_data.name)
                        param_count += 1
                    if credential_data.credential_type is not None:
                        updates.append(f"credential_type = ${param_count}")
                        values.append(credential_data.credential_type)
                        param_count += 1
                    # Handle encrypted_data field
                    encrypted_data = {}
                    if credential_data.username is not None:
                        encrypted_data['username'] = credential_data.username
                    if credential_data.password is not None:
                        encrypted_data['password'] = f"encrypted_{credential_data.password}"
                    if credential_data.private_key is not None:
                        encrypted_data['private_key'] = f"encrypted_{credential_data.private_key}"
                    
                    if encrypted_data:
                        import json
                        updates.append(f"encrypted_data = ${param_count}")
                        values.append(json.dumps(encrypted_data))
                        param_count += 1
                    if credential_data.description is not None:
                        updates.append(f"description = ${param_count}")
                        values.append(credential_data.description)
                        param_count += 1
                    if credential_data.metadata is not None:
                        import json
                        updates.append(f"metadata = ${param_count}")
                        values.append(json.dumps(credential_data.metadata))
                        param_count += 1
                    if credential_data.is_active is not None:
                        updates.append(f"is_active = ${param_count}")
                        values.append(credential_data.is_active)
                        param_count += 1
                    
                    if not updates:
                        raise HTTPException(status_code=400, detail="No fields to update")
                    
                    updates.append(f"updated_at = ${param_count}")
                    values.append(datetime.utcnow())
                    param_count += 1
                    values.append(credential_id)
                    
                    query = f"""
                        UPDATE assets.credentials 
                        SET {', '.join(updates)}
                        WHERE id = ${param_count}
                        RETURNING id, name, credential_type, encrypted_data, description, metadata,
                                  is_active, created_by, created_at, updated_at
                    """
                    
                    row = await conn.fetchrow(query, *values)
                    
                    if not row:
                        raise HTTPException(status_code=404, detail="Credential not found")
                    
                    import json
                    # Extract username from encrypted_data if available
                    try:
                        encrypted_data = json.loads(row['encrypted_data']) if row['encrypted_data'] else {}
                    except (json.JSONDecodeError, TypeError):
                        encrypted_data = {}
                    username = encrypted_data.get('username')
                    
                    credential = Credential(
                        id=row['id'],
                        name=row['name'],
                        credential_type=row['credential_type'],
                        username=username,
                        description=row['description'],
                        metadata=json.loads(row['metadata']) if row['metadata'] else {},
                        is_active=row['is_active'],
                        created_by=row['created_by'],
                        created_at=row['created_at'].isoformat(),
                        updated_at=row['updated_at'].isoformat() if row['updated_at'] else None
                    )
                    
                    return {"success": True, "message": "Credential updated", "data": credential}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to update credential", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to update credential"
                )

        @self.app.delete("/credentials/{credential_id}", response_model=dict)
        async def delete_credential(credential_id: int):
            """Delete credential"""
            try:
                async with self.db.pool.acquire() as conn:
                    result = await conn.execute(
                        "DELETE FROM assets.credentials WHERE id = $1", credential_id
                    )
                    
                    if result == "DELETE 0":
                        raise HTTPException(status_code=404, detail="Credential not found")
                    
                    return {"success": True, "message": "Credential deleted"}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to delete credential", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to delete credential"
                )

        @self.app.get("/credentials/{credential_id}/decrypt", response_model=dict)
        async def decrypt_credential(credential_id: int):
            """Decrypt credential data (admin only)"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get credential
                    credential_row = await conn.fetchrow("""
                        SELECT id, name, credential_type, encrypted_data, description, 
                               is_active, created_by, created_at, updated_at
                        FROM assets.credentials 
                        WHERE id = $1
                    """, credential_id)
                    
                    if not credential_row:
                        raise HTTPException(status_code=404, detail="Credential not found")
                    
                    # Decrypt the credential data
                    decrypted_data = self._decrypt_credential_data(credential_row['encrypted_data'])
                    
                    return {
                        "success": True,
                        "data": {
                            "id": credential_row['id'],
                            "name": credential_row['name'],
                            "credential_type": credential_row['credential_type'],
                            "decrypted_data": decrypted_data,
                            "description": credential_row['description'],
                            "is_active": credential_row['is_active'],
                            "created_by": credential_row['created_by'],
                            "created_at": credential_row['created_at'].isoformat(),
                            "updated_at": credential_row['updated_at'].isoformat() if credential_row['updated_at'] else None
                        }
                    }
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to decrypt credential", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to decrypt credential"
                )

        # ============================================================================
        # DISCOVERY CRUD ENDPOINTS
        # ============================================================================
        
        @self.app.get("/discovery/discovery-jobs", response_model=DiscoveryListResponse)
        async def list_discovery_jobs(
            skip: int = Query(0, ge=0),
            limit: int = Query(100, ge=1, le=1000)
        ):
            """List all discovery jobs"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Get total count
                    total = await conn.fetchval("SELECT COUNT(*) FROM assets.discovery_scans")
                    
                    # Get discovery jobs with pagination
                    rows = await conn.fetch("""
                        SELECT id, name, target_range, scan_type, status, configuration, results,
                               started_at, completed_at, created_by, created_at
                        FROM assets.discovery_scans 
                        ORDER BY created_at DESC 
                        LIMIT $1 OFFSET $2
                    """, limit, skip)
                    
                    discovery_jobs = []
                    for row in rows:
                        import json
                        discovery_jobs.append(DiscoveryJob(
                            id=row['id'],
                            name=row['name'],
                            target_range=row['target_range'],
                            scan_type=row['scan_type'],
                            status=row['status'],
                            configuration=row['configuration'] if isinstance(row['configuration'], dict) else (json.loads(row['configuration']) if row['configuration'] else {}),
                            results=row['results'] if isinstance(row['results'], dict) else (json.loads(row['results']) if row['results'] else {}),
                            started_at=row['started_at'].isoformat() if row['started_at'] else None,
                            completed_at=row['completed_at'].isoformat() if row['completed_at'] else None,
                            created_by=row['created_by'],
                            created_at=row['created_at'].isoformat()
                        ))
                    
                    return DiscoveryListResponse(
                        discovery_jobs=discovery_jobs,
                        total=total,
                        skip=skip,
                        limit=limit
                    )
            except Exception as e:
                self.logger.error("Failed to fetch discovery jobs", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to fetch discovery jobs"
                )

        @self.app.post("/discovery/discovery-jobs", response_model=dict)
        async def create_discovery_job(discovery_data: DiscoveryCreate):
            """Create a new discovery job"""
            try:
                async with self.db.pool.acquire() as conn:
                    import json
                    row = await conn.fetchrow("""
                        INSERT INTO assets.discovery_scans (name, target_range, scan_type, status, 
                                                          configuration, created_by)
                        VALUES ($1, $2, $3, 'pending', $4, 1)
                        RETURNING id, name, target_range, scan_type, status, configuration, results,
                                  started_at, completed_at, created_by, created_at
                    """, discovery_data.name, discovery_data.target_range, discovery_data.scan_type,
                         json.dumps(discovery_data.configuration))
                    
                    import json
                    discovery_job = DiscoveryJob(
                        id=row['id'],
                        name=row['name'],
                        target_range=row['target_range'],
                        scan_type=row['scan_type'],
                        status=row['status'],
                        configuration=row['configuration'] if isinstance(row['configuration'], dict) else (json.loads(row['configuration']) if row['configuration'] else {}),
                        results=row['results'] if isinstance(row['results'], dict) else (json.loads(row['results']) if row['results'] else {}),
                        started_at=row['started_at'].isoformat() if row['started_at'] else None,
                        completed_at=row['completed_at'].isoformat() if row['completed_at'] else None,
                        created_by=row['created_by'],
                        created_at=row['created_at'].isoformat()
                    )
                    
                    return {"success": True, "message": "Discovery job created", "data": discovery_job}
            except Exception as e:
                self.logger.error("Failed to create discovery job", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to create discovery job"
                )

        @self.app.get("/discovery/discovery-jobs/{discovery_id}", response_model=dict)
        async def get_discovery_job(discovery_id: int):
            """Get discovery job by ID"""
            try:
                async with self.db.pool.acquire() as conn:
                    row = await conn.fetchrow("""
                        SELECT id, name, target_range, scan_type, status, configuration, results,
                               started_at, completed_at, created_by, created_at
                        FROM assets.discovery_scans WHERE id = $1
                    """, discovery_id)
                    
                    if not row:
                        raise HTTPException(status_code=404, detail="Discovery job not found")
                    
                    import json
                    discovery_job = DiscoveryJob(
                        id=row['id'],
                        name=row['name'],
                        target_range=row['target_range'],
                        scan_type=row['scan_type'],
                        status=row['status'],
                        configuration=row['configuration'] if isinstance(row['configuration'], dict) else (json.loads(row['configuration']) if row['configuration'] else {}),
                        results=row['results'] if isinstance(row['results'], dict) else (json.loads(row['results']) if row['results'] else {}),
                        started_at=row['started_at'].isoformat() if row['started_at'] else None,
                        completed_at=row['completed_at'].isoformat() if row['completed_at'] else None,
                        created_by=row['created_by'],
                        created_at=row['created_at'].isoformat()
                    )
                    
                    return {"success": True, "data": discovery_job}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to get discovery job", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to get discovery job"
                )

        @self.app.put("/discovery/discovery-jobs/{discovery_id}", response_model=dict)
        async def update_discovery_job(discovery_id: int, discovery_data: DiscoveryUpdate):
            """Update discovery job"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Build dynamic update query
                    updates = []
                    values = []
                    param_count = 1
                    
                    if discovery_data.status is not None:
                        updates.append(f"status = ${param_count}")
                        values.append(discovery_data.status)
                        param_count += 1
                        
                        # Set started_at if status is running
                        if discovery_data.status == 'running':
                            updates.append(f"started_at = ${param_count}")
                            values.append(datetime.utcnow())
                            param_count += 1
                        # Set completed_at if status is completed or failed
                        elif discovery_data.status in ['completed', 'failed']:
                            updates.append(f"completed_at = ${param_count}")
                            values.append(datetime.utcnow())
                            param_count += 1
                    
                    if discovery_data.configuration is not None:
                        import json
                        updates.append(f"configuration = ${param_count}")
                        values.append(json.dumps(discovery_data.configuration))
                        param_count += 1
                    
                    if discovery_data.results is not None:
                        import json
                        updates.append(f"results = ${param_count}")
                        values.append(json.dumps(discovery_data.results))
                        param_count += 1
                    
                    if not updates:
                        raise HTTPException(status_code=400, detail="No fields to update")
                    
                    values.append(discovery_id)
                    
                    query = f"""
                        UPDATE assets.discovery_scans 
                        SET {', '.join(updates)}
                        WHERE id = ${param_count}
                        RETURNING id, name, target_range, scan_type, status, configuration, results,
                                  started_at, completed_at, created_by, created_at
                    """
                    
                    row = await conn.fetchrow(query, *values)
                    
                    if not row:
                        raise HTTPException(status_code=404, detail="Discovery job not found")
                    
                    import json
                    discovery_job = DiscoveryJob(
                        id=row['id'],
                        name=row['name'],
                        target_range=row['target_range'],
                        scan_type=row['scan_type'],
                        status=row['status'],
                        configuration=row['configuration'] if isinstance(row['configuration'], dict) else (json.loads(row['configuration']) if row['configuration'] else {}),
                        results=row['results'] if isinstance(row['results'], dict) else (json.loads(row['results']) if row['results'] else {}),
                        started_at=row['started_at'].isoformat() if row['started_at'] else None,
                        completed_at=row['completed_at'].isoformat() if row['completed_at'] else None,
                        created_by=row['created_by'],
                        created_at=row['created_at'].isoformat()
                    )
                    
                    return {"success": True, "message": "Discovery job updated", "data": discovery_job}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to update discovery job", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to update discovery job"
                )

        @self.app.post("/discovery/discovery-jobs/{discovery_id}/run", response_model=dict)
        async def run_discovery_job(discovery_id: int):
            """Run/start a discovery job"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Check if job exists
                    job = await conn.fetchrow(
                        "SELECT id, status FROM assets.discovery_scans WHERE id = $1", discovery_id
                    )
                    
                    if not job:
                        raise HTTPException(status_code=404, detail="Discovery job not found")
                    
                    if job['status'] == 'running':
                        raise HTTPException(status_code=400, detail="Job is already running")
                    
                    # Update job status to running
                    await conn.execute("""
                        UPDATE assets.discovery_scans 
                        SET status = 'running', started_at = NOW()
                        WHERE id = $1
                    """, discovery_id)
                    
                    return {"success": True, "message": "Discovery job started"}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to run discovery job", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to run discovery job"
                )

        @self.app.post("/discovery/discovery-jobs/{discovery_id}/cancel", response_model=dict)
        async def cancel_discovery_job(discovery_id: int):
            """Cancel a running discovery job"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Check if job exists
                    job = await conn.fetchrow(
                        "SELECT id, status FROM assets.discovery_scans WHERE id = $1", discovery_id
                    )
                    
                    if not job:
                        raise HTTPException(status_code=404, detail="Discovery job not found")
                    
                    if job['status'] != 'running':
                        raise HTTPException(status_code=400, detail="Job is not running")
                    
                    # Update job status to cancelled
                    await conn.execute("""
                        UPDATE assets.discovery_scans 
                        SET status = 'cancelled', completed_at = NOW()
                        WHERE id = $1
                    """, discovery_id)
                    
                    return {"success": True, "message": "Discovery job cancelled"}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to cancel discovery job", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to cancel discovery job"
                )

        @self.app.delete("/discovery/discovery-jobs/{discovery_id}", response_model=dict)
        async def delete_discovery_job(discovery_id: int):
            """Delete discovery job"""
            try:
                async with self.db.pool.acquire() as conn:
                    result = await conn.execute(
                        "DELETE FROM discovery_jobs WHERE id = $1", discovery_id
                    )
                    
                    if result == "DELETE 0":
                        raise HTTPException(status_code=404, detail="Discovery job not found")
                    
                    return {"success": True, "message": "Discovery job deleted"}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to delete discovery job", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to delete discovery job"
                )

        # ============================================================================
        # DISCOVERED TARGETS ENDPOINTS
        # ============================================================================
        
        @self.app.get("/discovery/targets", response_model=DiscoveredTargetListResponse)
        async def list_discovered_targets(
            skip: int = Query(0, ge=0),
            limit: int = Query(100, ge=1, le=1000),
            job_id: Optional[int] = Query(None),
            status: Optional[str] = Query(None)
        ):
            """List discovered targets"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Build query with filters
                    where_conditions = []
                    params = []
                    param_count = 1
                    
                    if job_id is not None:
                        where_conditions.append(f"discovery_job_id = ${param_count}")
                        params.append(job_id)
                        param_count += 1
                    
                    if status is not None:
                        where_conditions.append(f"import_status = ${param_count}")
                        params.append(status)
                        param_count += 1
                    
                    where_clause = " WHERE " + " AND ".join(where_conditions) if where_conditions else ""
                    
                    # Get total count
                    count_query = f"SELECT COUNT(*) FROM assets.discovered_targets{where_clause}"
                    total = await conn.fetchval(count_query, *params)
                    
                    # Get targets with pagination
                    query = f"""
                        SELECT id, discovery_job_id, hostname, ip_address, os_type, os_version,
                               services, system_info, duplicate_status, existing_target_id,
                               import_status, discovered_at
                        FROM assets.discovered_targets
                        {where_clause}
                        ORDER BY discovered_at DESC 
                        LIMIT ${param_count} OFFSET ${param_count + 1}
                    """
                    params.extend([limit, skip])
                    rows = await conn.fetch(query, *params)
                    
                    targets = []
                    for row in rows:
                        import json
                        services_data = row['services'] if isinstance(row['services'], list) else (json.loads(row['services']) if row['services'] else [])
                        services = [DiscoveredService(**service) for service in services_data]
                        
                        targets.append(DiscoveredTarget(
                            id=row['id'],
                            discovery_job_id=row['discovery_job_id'],
                            hostname=row['hostname'],
                            ip_address=str(row['ip_address']),
                            os_type=row['os_type'],
                            os_version=row['os_version'],
                            services=services,
                            preferred_service=services[0] if services else None,
                            system_info=row['system_info'] if isinstance(row['system_info'], dict) else (json.loads(row['system_info']) if row['system_info'] else {}),
                            duplicate_status=row['duplicate_status'],
                            existing_target_id=row['existing_target_id'],
                            import_status=row['import_status'],
                            discovered_at=row['discovered_at'].isoformat()
                        ))
                    
                    return DiscoveredTargetListResponse(targets=targets, total=total)
            except Exception as e:
                self.logger.error("Failed to fetch discovered targets", error=str(e))
                # Return empty list instead of error for better UX
                return DiscoveredTargetListResponse(targets=[], total=0)

        @self.app.get("/discovery/targets/{target_id}", response_model=dict)
        async def get_discovered_target(target_id: int):
            """Get discovered target by ID"""
            try:
                async with self.db.pool.acquire() as conn:
                    row = await conn.fetchrow("""
                        SELECT id, discovery_job_id, hostname, ip_address, os_type, os_version,
                               services, system_info, duplicate_status, existing_target_id,
                               import_status, discovered_at
                        FROM assets.discovered_targets WHERE id = $1
                    """, target_id)
                    
                    if not row:
                        raise HTTPException(status_code=404, detail="Discovered target not found")
                    
                    import json
                    services_data = row['services'] if isinstance(row['services'], list) else (json.loads(row['services']) if row['services'] else [])
                    services = [DiscoveredService(**service) for service in services_data]
                    
                    target = DiscoveredTarget(
                        id=row['id'],
                        discovery_job_id=row['discovery_job_id'],
                        hostname=row['hostname'],
                        ip_address=str(row['ip_address']),
                        os_type=row['os_type'],
                        os_version=row['os_version'],
                        services=services,
                        preferred_service=services[0] if services else None,
                        system_info=row['system_info'] if isinstance(row['system_info'], dict) else (json.loads(row['system_info']) if row['system_info'] else {}),
                        duplicate_status=row['duplicate_status'],
                        existing_target_id=row['existing_target_id'],
                        import_status=row['import_status'],
                        discovered_at=row['discovered_at'].isoformat()
                    )
                    
                    return {"success": True, "data": target}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to get discovered target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to get discovered target"
                )

        @self.app.put("/discovery/targets/{target_id}", response_model=dict)
        async def update_discovered_target(target_id: int, target_data: DiscoveredTargetUpdate):
            """Update discovered target"""
            try:
                async with self.db.pool.acquire() as conn:
                    # Build dynamic update query
                    updates = []
                    values = []
                    param_count = 1
                    
                    if target_data.hostname is not None:
                        updates.append(f"hostname = ${param_count}")
                        values.append(target_data.hostname)
                        param_count += 1
                    
                    if target_data.os_type is not None:
                        updates.append(f"os_type = ${param_count}")
                        values.append(target_data.os_type)
                        param_count += 1
                    
                    if target_data.os_version is not None:
                        updates.append(f"os_version = ${param_count}")
                        values.append(target_data.os_version)
                        param_count += 1
                    
                    if target_data.import_status is not None:
                        updates.append(f"import_status = ${param_count}")
                        values.append(target_data.import_status)
                        param_count += 1
                    
                    if not updates:
                        raise HTTPException(status_code=400, detail="No fields to update")
                    
                    values.append(target_id)
                    
                    query = f"""
                        UPDATE assets.discovered_targets 
                        SET {', '.join(updates)}
                        WHERE id = ${param_count}
                        RETURNING id, discovery_job_id, hostname, ip_address, os_type, os_version,
                                  services, system_info, duplicate_status, existing_target_id,
                                  import_status, discovered_at
                    """
                    
                    row = await conn.fetchrow(query, *values)
                    
                    if not row:
                        raise HTTPException(status_code=404, detail="Discovered target not found")
                    
                    import json
                    services_data = row['services'] if isinstance(row['services'], list) else (json.loads(row['services']) if row['services'] else [])
                    services = [DiscoveredService(**service) for service in services_data]
                    
                    target = DiscoveredTarget(
                        id=row['id'],
                        discovery_job_id=row['discovery_job_id'],
                        hostname=row['hostname'],
                        ip_address=str(row['ip_address']),
                        os_type=row['os_type'],
                        os_version=row['os_version'],
                        services=services,
                        preferred_service=services[0] if services else None,
                        system_info=row['system_info'] if isinstance(row['system_info'], dict) else (json.loads(row['system_info']) if row['system_info'] else {}),
                        duplicate_status=row['duplicate_status'],
                        existing_target_id=row['existing_target_id'],
                        import_status=row['import_status'],
                        discovered_at=row['discovered_at'].isoformat()
                    )
                    
                    return {"success": True, "message": "Target updated", "data": target}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to update discovered target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to update discovered target"
                )

        @self.app.delete("/discovery/targets/{target_id}", response_model=dict)
        async def delete_discovered_target(target_id: int):
            """Delete discovered target"""
            try:
                async with self.db.pool.acquire() as conn:
                    result = await conn.execute(
                        "DELETE FROM assets.discovered_targets WHERE id = $1", target_id
                    )
                    
                    if result == "DELETE 0":
                        raise HTTPException(status_code=404, detail="Discovered target not found")
                    
                    return {"success": True, "message": "Target deleted"}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to delete discovered target", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to delete discovered target"
                )

        @self.app.post("/discovery/targets/ignore", response_model=dict)
        async def ignore_targets(request: dict):
            """Mark targets as ignored"""
            try:
                target_ids = request.get('target_ids', [])
                if not target_ids:
                    raise HTTPException(status_code=400, detail="No target IDs provided")
                
                async with self.db.pool.acquire() as conn:
                    result = await conn.execute("""
                        UPDATE assets.discovered_targets 
                        SET import_status = 'ignored'
                        WHERE id = ANY($1)
                    """, target_ids)
                    
                    return {"success": True, "ignored": len(target_ids)}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to ignore targets", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to ignore targets"
                )

        @self.app.post("/discovery/targets/bulk-delete", response_model=dict)
        async def bulk_delete_targets(request: dict):
            """Bulk delete targets"""
            try:
                target_ids = request.get('target_ids', [])
                if not target_ids:
                    raise HTTPException(status_code=400, detail="No target IDs provided")
                
                async with self.db.pool.acquire() as conn:
                    result = await conn.execute("""
                        DELETE FROM assets.discovered_targets 
                        WHERE id = ANY($1)
                    """, target_ids)
                    
                    # Extract the number of deleted rows from the result
                    deleted_count = int(result.split()[-1]) if result.startswith('DELETE') else 0
                    
                    return {"success": True, "deleted": deleted_count}
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to bulk delete targets", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to bulk delete targets"
                )

        @self.app.post("/discovery/import-targets", response_model=dict)
        async def import_targets(request: dict):
            """Import discovered targets as managed targets"""
            try:
                target_ids = request.get('target_ids', [])
                if not target_ids:
                    raise HTTPException(status_code=400, detail="No target IDs provided")
                
                imported_count = 0
                failed_count = 0
                details = []
                
                async with self.db.pool.acquire() as conn:
                    for target_id in target_ids:
                        try:
                            # Get discovered target
                            discovered = await conn.fetchrow("""
                                SELECT hostname, ip_address, os_type, os_version, services, system_info
                                FROM assets.discovered_targets WHERE id = $1
                            """, target_id)
                            
                            if not discovered:
                                failed_count += 1
                                details.append(f"Target {target_id} not found")
                                continue
                            
                            # Insert into managed targets (mapping to existing schema)
                            target_name = discovered['hostname'] or f"Target-{str(discovered['ip_address'])}"
                            description = f"Imported from discovery - {discovered['os_type']} {discovered['os_version']}"
                            
                            import json
                            metadata = {
                                'os_type': discovered['os_type'],
                                'os_version': discovered['os_version'],
                                'services': discovered['services'] if isinstance(discovered['services'], list) else (json.loads(discovered['services']) if discovered['services'] else []),
                                'system_info': discovered['system_info'] if isinstance(discovered['system_info'], dict) else (json.loads(discovered['system_info']) if discovered['system_info'] else {}),
                                'imported_from_discovery': True
                            }
                            
                            await conn.execute("""
                                INSERT INTO assets.targets (name, description, host, target_type, 
                                                           connection_type, metadata, created_by)
                                VALUES ($1, $2, $3, $4, $5, $6, 1)
                            """, target_name, description, str(discovered['ip_address']), 
                                 'server', 'ssh', json.dumps(metadata))
                            
                            # Update discovered target status
                            await conn.execute("""
                                UPDATE assets.discovered_targets 
                                SET import_status = 'imported'
                                WHERE id = $1
                            """, target_id)
                            
                            imported_count += 1
                            details.append(f"Target {target_id} imported successfully")
                            
                        except Exception as e:
                            failed_count += 1
                            details.append(f"Target {target_id} failed: {str(e)}")
                
                return {
                    "success": True,
                    "imported": imported_count,
                    "failed": failed_count,
                    "details": details
                }
            except HTTPException:
                raise
            except Exception as e:
                self.logger.error("Failed to import targets", error=str(e))
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail="Failed to import targets"
                )

    # ============================================================================
    # CREDENTIAL ENCRYPTION/DECRYPTION HELPER METHODS
    # ============================================================================
    
    def _decrypt_credential_data(self, encrypted_data: str) -> dict:
        """Decrypt credential data"""
        import json
        import base64
        
        try:
            # For now, we'll assume the data is base64 encoded JSON
            # In a real implementation, you'd use proper encryption (AES, etc.)
            if not encrypted_data:
                return {}
            
            # Try to decode as base64 first
            try:
                decoded_bytes = base64.b64decode(encrypted_data)
                decoded_str = decoded_bytes.decode('utf-8')
                return json.loads(decoded_str)
            except:
                # If base64 decoding fails, try to parse as JSON directly
                return json.loads(encrypted_data)
                
        except Exception as e:
            self.logger.error("Failed to decrypt credential data", error=str(e))
            return {"error": "Failed to decrypt credential data"}
    
    def _encrypt_credential_data(self, credential_data: dict) -> str:
        """Encrypt credential data"""
        import json
        import base64
        
        try:
            # For now, we'll just base64 encode the JSON
            # In a real implementation, you'd use proper encryption (AES, etc.)
            json_str = json.dumps(credential_data)
            encoded_bytes = base64.b64encode(json_str.encode('utf-8'))
            return encoded_bytes.decode('utf-8')
        except Exception as e:
            self.logger.error("Failed to encrypt credential data", error=str(e))
            return ""

    # ============================================================================
    # CONNECTION TESTING HELPER METHODS
    # ============================================================================
    
    def _determine_connection_type(self, target_type: str, port: int) -> str:
        """Determine connection type based on target type and port"""
        if target_type:
            target_type_lower = target_type.lower()
            if 'windows' in target_type_lower:
                return 'winrm' if port in [5985, 5986] else 'rdp'
            elif 'linux' in target_type_lower or 'unix' in target_type_lower:
                return 'ssh'
        
        # Fallback to port-based detection
        port_mappings = {
            22: 'ssh',
            23: 'telnet',
            80: 'http',
            443: 'https',
            3389: 'rdp',
            5985: 'winrm',
            5986: 'winrm'
        }
        
        return port_mappings.get(port, 'tcp')
    
    async def _test_connection(self, host: str, port: int, connection_type: str, credential_data: str = None) -> dict:
        """Test connection to target based on connection type"""
        import asyncio
        import socket
        import time
        
        start_time = time.time()
        
        try:
            if connection_type == 'tcp':
                # Basic TCP connection test
                return await self._test_tcp_connection(host, port, start_time)
            elif connection_type == 'ssh':
                return await self._test_ssh_connection(host, port, credential_data, start_time)
            elif connection_type == 'winrm':
                return await self._test_winrm_connection(host, port, credential_data, start_time)
            elif connection_type in ['http', 'https']:
                return await self._test_http_connection(host, port, connection_type, start_time)
            else:
                # Default to TCP test
                return await self._test_tcp_connection(host, port, start_time)
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            return {
                "status": "failed",
                "message": f"Connection test failed: {str(e)}",
                "response_time_ms": response_time
            }
    
    async def _test_tcp_connection(self, host: str, port: int, start_time: float) -> dict:
        """Test basic TCP connection"""
        import asyncio
        import socket
        import time
        
        try:
            # Create socket with timeout
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)  # 10 second timeout
            
            result = sock.connect_ex((host, port))
            sock.close()
            
            response_time = int((time.time() - start_time) * 1000)
            
            if result == 0:
                return {
                    "status": "success",
                    "message": f"TCP connection to {host}:{port} successful",
                    "response_time_ms": response_time
                }
            else:
                return {
                    "status": "failed",
                    "message": f"TCP connection to {host}:{port} failed (error code: {result})",
                    "response_time_ms": response_time
                }
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            return {
                "status": "failed",
                "message": f"TCP connection test failed: {str(e)}",
                "response_time_ms": response_time
            }
    
    async def _test_ssh_connection(self, host: str, port: int, credential_data: str, start_time: float) -> dict:
        """Test SSH connection"""
        # For now, just do a TCP test to port 22
        # In a real implementation, you'd use paramiko or similar
        tcp_result = await self._test_tcp_connection(host, port, start_time)
        if tcp_result["status"] == "success":
            tcp_result["message"] = f"SSH port {port} is reachable on {host}"
        return tcp_result
    
    async def _test_winrm_connection(self, host: str, port: int, credential_data: str, start_time: float) -> dict:
        """Test WinRM connection"""
        # For now, just do a TCP test to WinRM ports
        # In a real implementation, you'd use pywinrm or similar
        tcp_result = await self._test_tcp_connection(host, port, start_time)
        if tcp_result["status"] == "success":
            tcp_result["message"] = f"WinRM port {port} is reachable on {host}"
        return tcp_result
    
    async def _test_http_connection(self, host: str, port: int, protocol: str, start_time: float) -> dict:
        """Test HTTP/HTTPS connection"""
        import aiohttp
        import time
        
        try:
            url = f"{protocol}://{host}:{port}"
            timeout = aiohttp.ClientTimeout(total=10)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    response_time = int((time.time() - start_time) * 1000)
                    return {
                        "status": "success",
                        "message": f"{protocol.upper()} connection to {host}:{port} successful (HTTP {response.status})",
                        "response_time_ms": response_time
                    }
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            return {
                "status": "failed",
                "message": f"{protocol.upper()} connection test failed: {str(e)}",
                "response_time_ms": response_time
            }

if __name__ == "__main__":
    service = AssetService()
    service.run()