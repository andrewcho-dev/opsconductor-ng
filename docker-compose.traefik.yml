# OpsConductor V3 - Phase 5: Traefik Reverse Proxy
# Advanced reverse proxy with SSL automation and service discovery

services:
  # Traefik Reverse Proxy
  traefik:
    build: ./traefik
    container_name: opsconductor-traefik
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Forward proxy for outbound connections
      - "8081:8081"  # Traefik dashboard
    environment:
      - TRAEFIK_LOG_LEVEL=INFO
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_DEBUG=true
      - TRAEFIK_METRICS_PROMETHEUS=true
    volumes:
      # Docker socket for service discovery
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Configuration files
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      # SSL certificates storage
      - traefik_letsencrypt:/letsencrypt
      # Logs
      - traefik_logs:/var/log/traefik
    networks:
      - opsconductor-net
    depends_on:
      - kong
      - frontend
    labels:
      # Traefik configuration via labels
      - "traefik.enable=true"
      
      # Dashboard router
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=traefik"
      
      # Dashboard authentication
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$2y$$10$$2b2cu/0P6eBi4Ej1iBXXhOaohvZabfQANjU7fCzCqz9OeUPuVJ3Pu"
      
      # Metrics endpoint
      - "traefik.http.routers.metrics.rule=Path(`/metrics`)"
      - "traefik.http.routers.metrics.service=prometheus@internal"
      - "traefik.http.routers.metrics.entrypoints=traefik"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Kong Gateway (from main compose with Traefik labels)
  kong:
    build: ./kong
    container_name: opsconductor-kong
    ports:
      - "3000:8000"  # Kong proxy port (map to 3000 to replace old API Gateway)
      - "8001:8001"  # Kong admin API port
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_PLUGINS: "bundled"
    depends_on:
      - redis
    networks:
      - opsconductor-net
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml:ro
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      
      # API routes
      - "traefik.http.routers.kong-api.rule=PathPrefix(`/api/`)"
      - "traefik.http.routers.kong-api.service=kong-api"
      - "traefik.http.routers.kong-api.entrypoints=web,websecure"
      - "traefik.http.routers.kong-api.middlewares=api-rate-limit,api-headers"
      
      # Health check route
      - "traefik.http.routers.kong-health.rule=Path(`/health`)"
      - "traefik.http.routers.kong-health.service=kong-api"
      - "traefik.http.routers.kong-health.entrypoints=web,websecure"
      
      # Service definition
      - "traefik.http.services.kong-api.loadbalancer.server.port=8000"
      - "traefik.http.services.kong-api.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.kong-api.loadbalancer.healthcheck.interval=30s"
      
      # Rate limiting middleware
      - "traefik.http.middlewares.api-rate-limit.ratelimit.burst=100"
      - "traefik.http.middlewares.api-rate-limit.ratelimit.average=1000"
      
      # API headers middleware
      - "traefik.http.middlewares.api-headers.headers.customrequestheaders.X-Forwarded-Proto=http"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.api-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"

  # Frontend (from main compose with Traefik labels)
  frontend:
    build: ./frontend
    container_name: opsconductor-frontend
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    networks:
      - opsconductor-net
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/.env:/app/.env
    restart: unless-stopped
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      
      # Frontend routes (lower priority than API)
      - "traefik.http.routers.frontend.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.routers.frontend.middlewares=frontend-headers,frontend-compress"
      
      # Service definition
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.services.frontend.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend.loadbalancer.healthcheck.interval=30s"
      
      # Frontend headers middleware
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.frontend-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      
      # Compression middleware
      - "traefik.http.middlewares.frontend-compress.compress=true"

  # Required infrastructure services
  redis:
    image: redis:7.4-alpine
    container_name: opsconductor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - opsconductor-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Automation Service for WebSocket support
  automation-service:
    build: ./automation-service
    container_name: opsconductor-automation
    ports:
      - "3003:3003"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_SCHEMA: automation
      REDIS_URL: redis://redis:6379/3
      IDENTITY_SERVICE_URL: http://identity-service:3001
      ASSET_SERVICE_URL: http://asset-service:3002
      COMMUNICATION_SERVICE_URL: http://communication-service:3004
      ASSET_SERVICE_ENCRYPTION_KEY: GHPOePf-DBdVW5QOAW3jmv6ZNIyLMZmoMAat1ZmDbQI=
    depends_on:
      - redis
    networks:
      - opsconductor-net
    volumes:
      - ./automation-service/main.py:/app/main.py
      - ./automation-service/worker.py:/app/worker.py
      - ./automation-service/celery_monitor.py:/app/celery_monitor.py
      - ./automation-service/websocket_manager.py:/app/websocket_manager.py
      - ./automation-service/libraries:/app/libraries
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      
      # WebSocket routes
      - "traefik.http.routers.automation-ws.rule=PathPrefix(`/api/v1/automation/monitoring/ws`)"
      - "traefik.http.routers.automation-ws.service=automation-ws"
      - "traefik.http.routers.automation-ws.entrypoints=web,websecure"
      - "traefik.http.routers.automation-ws.middlewares=websocket-headers"
      
      # Service definition
      - "traefik.http.services.automation-ws.loadbalancer.server.port=3003"
      
      # WebSocket headers middleware
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Connection=upgrade"
      - "traefik.http.middlewares.websocket-headers.headers.customrequestheaders.Upgrade=websocket"

networks:
  opsconductor-net:
    driver: bridge

volumes:
  traefik_letsencrypt:
    driver: local
  traefik_logs:
    driver: local
  redis_data:
    driver: local