{"ast":null,"code":"import axios from 'axios';\nimport { getServiceUrl } from './api';\n// Create axios instance for targets service\nconst enhancedApi = axios.create({\n  baseURL: `${getServiceUrl('targets')}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token (same as main api.ts)\nenhancedApi.interceptors.request.use(config => {\n  // Always get fresh token from localStorage\n  const currentToken = localStorage.getItem('access_token');\n  if (currentToken) {\n    config.headers.Authorization = `Bearer ${currentToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for error handling (same as main api.ts)\nenhancedApi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n\n  // Handle both 401 (Unauthorized) and 403 (Forbidden) errors\n  if ((((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // For now, just redirect to login since we're using session tokens\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Service Definitions API\nexport const serviceDefinitionApi = {\n  list: async (category, commonOnly) => {\n    const params = new URLSearchParams();\n    if (category) params.append('category', category);\n    if (commonOnly) params.append('common_only', 'true');\n    const response = await enhancedApi.get(`/service-definitions?${params.toString()}`);\n    return response.data;\n  },\n  getCategories: async () => {\n    const response = await serviceDefinitionApi.list();\n    const categories = [...new Set(response.services.map(s => s.category))];\n    return categories.sort();\n  }\n};\n\n// Enhanced Targets API\nexport const enhancedTargetApi = {\n  list: async (filters, skip = 0, limit = 100) => {\n    const params = new URLSearchParams();\n    params.append('skip', skip.toString());\n    params.append('limit', limit.toString());\n    if (filters !== null && filters !== void 0 && filters.os_type) params.append('os_type', filters.os_type);\n    if (filters !== null && filters !== void 0 && filters.service_type) params.append('service_type', filters.service_type);\n    if (filters !== null && filters !== void 0 && filters.tag) params.append('tag', filters.tag);\n    const response = await enhancedApi.get(`/targets?${params.toString()}`);\n    return response.data;\n  },\n  get: async id => {\n    const response = await enhancedApi.get(`/targets/${id}`);\n    return response.data;\n  },\n  create: async target => {\n    const response = await enhancedApi.post('/targets', target);\n    return response.data;\n  },\n  update: async (id, target) => {\n    const response = await enhancedApi.put(`/targets/${id}`, target);\n    return response.data;\n  },\n  delete: async id => {\n    await enhancedApi.delete(`/targets/${id}`);\n  }\n};\n\n// Target Services API\nexport const targetServiceApi = {\n  add: async (targetId, service) => {\n    const response = await enhancedApi.post(`/targets/${targetId}/services`, service);\n    return response.data;\n  },\n  update: async (targetId, serviceId, service) => {\n    const response = await enhancedApi.put(`/targets/${targetId}/services/${serviceId}`, service);\n    return response.data;\n  },\n  delete: async (targetId, serviceId) => {\n    await enhancedApi.delete(`/targets/${targetId}/services/${serviceId}`);\n  },\n  testConnection: async serviceId => {\n    const response = await enhancedApi.post(`/targets/services/${serviceId}/test-connection`);\n    return response.data;\n  },\n  bulkOperation: async operation => {\n    const response = await enhancedApi.post('/targets/services/bulk', operation);\n    return response.data;\n  }\n};\n\n// Target Credentials API\nexport const targetCredentialApi = {\n  add: async (targetId, credential) => {\n    const response = await enhancedApi.post(`/targets/${targetId}/credentials`, credential);\n    return response.data;\n  },\n  update: async (targetId, credentialId, credential) => {\n    const response = await enhancedApi.put(`/targets/${targetId}/credentials/${credentialId}`, credential);\n    return response.data;\n  },\n  delete: async (targetId, credentialId) => {\n    await enhancedApi.delete(`/targets/${targetId}/credentials/${credentialId}`);\n  }\n};\n\n// Migration API\nexport const migrationApi = {\n  migrateSchema: async () => {\n    const response = await enhancedApi.post('/targets/migrate-schema');\n    return response.data;\n  }\n};\n\n// Health check\nexport const enhancedHealthApi = {\n  check: async () => {\n    const response = await enhancedApi.get('/targets/health');\n    return response.data;\n  }\n};\nexport default enhancedApi;","map":{"version":3,"names":["axios","getServiceUrl","enhancedApi","create","baseURL","headers","interceptors","request","use","config","currentToken","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","originalRequest","status","_retry","removeItem","window","location","href","serviceDefinitionApi","list","category","commonOnly","params","URLSearchParams","append","get","toString","data","getCategories","categories","Set","services","map","s","sort","enhancedTargetApi","filters","skip","limit","os_type","service_type","tag","id","target","post","update","put","delete","targetServiceApi","add","targetId","service","serviceId","testConnection","bulkOperation","operation","targetCredentialApi","credential","credentialId","migrationApi","migrateSchema","enhancedHealthApi","check"],"sources":["/app/src/services/enhancedApi.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { getServiceUrl, getApiBaseUrl } from './api';\nimport {\n  ServiceDefinitionResponse,\n  TargetServiceCreate, TargetServiceUpdate, TargetService,\n  TargetCredentialCreate, TargetCredential,\n  EnhancedTarget, EnhancedTargetCreate, EnhancedTargetUpdate, EnhancedTargetListResponse,\n  BulkServiceOperation, BulkServiceResponse,\n  MigrationStatus,\n  TargetFilters\n} from '../types/enhanced';\n\n// Create axios instance for targets service\nconst enhancedApi = axios.create({\n  baseURL: `${getServiceUrl('targets')}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token (same as main api.ts)\nenhancedApi.interceptors.request.use(\n  (config) => {\n    // Always get fresh token from localStorage\n    const currentToken = localStorage.getItem('access_token');\n    if (currentToken) {\n      config.headers.Authorization = `Bearer ${currentToken}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor for error handling (same as main api.ts)\nenhancedApi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Handle both 401 (Unauthorized) and 403 (Forbidden) errors\n    if ((error.response?.status === 401 || error.response?.status === 403) && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      // For now, just redirect to login since we're using session tokens\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Service Definitions API\nexport const serviceDefinitionApi = {\n  list: async (category?: string, commonOnly?: boolean): Promise<ServiceDefinitionResponse> => {\n    const params = new URLSearchParams();\n    if (category) params.append('category', category);\n    if (commonOnly) params.append('common_only', 'true');\n    \n    const response: AxiosResponse<ServiceDefinitionResponse> = await enhancedApi.get(\n      `/service-definitions?${params.toString()}`\n    );\n    return response.data;\n  },\n\n  getCategories: async (): Promise<string[]> => {\n    const response = await serviceDefinitionApi.list();\n    const categories = [...new Set(response.services.map(s => s.category))];\n    return categories.sort();\n  }\n};\n\n// Enhanced Targets API\nexport const enhancedTargetApi = {\n  list: async (filters?: TargetFilters, skip = 0, limit = 100): Promise<EnhancedTargetListResponse> => {\n    const params = new URLSearchParams();\n    params.append('skip', skip.toString());\n    params.append('limit', limit.toString());\n    \n    if (filters?.os_type) params.append('os_type', filters.os_type);\n    if (filters?.service_type) params.append('service_type', filters.service_type);\n    if (filters?.tag) params.append('tag', filters.tag);\n    \n    const response: AxiosResponse<EnhancedTargetListResponse> = await enhancedApi.get(\n      `/targets?${params.toString()}`\n    );\n    return response.data;\n  },\n\n  get: async (id: number): Promise<EnhancedTarget> => {\n    const response: AxiosResponse<EnhancedTarget> = await enhancedApi.get(`/targets/${id}`);\n    return response.data;\n  },\n\n  create: async (target: EnhancedTargetCreate): Promise<EnhancedTarget> => {\n    const response: AxiosResponse<EnhancedTarget> = await enhancedApi.post('/targets', target);\n    return response.data;\n  },\n\n  update: async (id: number, target: EnhancedTargetUpdate): Promise<EnhancedTarget> => {\n    const response: AxiosResponse<EnhancedTarget> = await enhancedApi.put(`/targets/${id}`, target);\n    return response.data;\n  },\n\n  delete: async (id: number): Promise<void> => {\n    await enhancedApi.delete(`/targets/${id}`);\n  }\n};\n\n// Target Services API\nexport const targetServiceApi = {\n  add: async (targetId: number, service: TargetServiceCreate): Promise<TargetService> => {\n    const response: AxiosResponse<TargetService> = await enhancedApi.post(\n      `/targets/${targetId}/services`, \n      service\n    );\n    return response.data;\n  },\n\n  update: async (targetId: number, serviceId: number, service: TargetServiceUpdate): Promise<TargetService> => {\n    const response: AxiosResponse<TargetService> = await enhancedApi.put(\n      `/targets/${targetId}/services/${serviceId}`, \n      service\n    );\n    return response.data;\n  },\n\n  delete: async (targetId: number, serviceId: number): Promise<void> => {\n    await enhancedApi.delete(`/targets/${targetId}/services/${serviceId}`);\n  },\n\n  testConnection: async (serviceId: number): Promise<any> => {\n    const response = await enhancedApi.post(`/targets/services/${serviceId}/test-connection`);\n    return response.data;\n  },\n\n  bulkOperation: async (operation: BulkServiceOperation): Promise<BulkServiceResponse> => {\n    const response: AxiosResponse<BulkServiceResponse> = await enhancedApi.post(\n      '/targets/services/bulk', \n      operation\n    );\n    return response.data;\n  }\n};\n\n// Target Credentials API\nexport const targetCredentialApi = {\n  add: async (targetId: number, credential: TargetCredentialCreate): Promise<TargetCredential> => {\n    const response: AxiosResponse<TargetCredential> = await enhancedApi.post(\n      `/targets/${targetId}/credentials`, \n      credential\n    );\n    return response.data;\n  },\n\n  update: async (targetId: number, credentialId: number, credential: Partial<TargetCredentialCreate>): Promise<TargetCredential> => {\n    const response: AxiosResponse<TargetCredential> = await enhancedApi.put(\n      `/targets/${targetId}/credentials/${credentialId}`, \n      credential\n    );\n    return response.data;\n  },\n\n  delete: async (targetId: number, credentialId: number): Promise<void> => {\n    await enhancedApi.delete(`/targets/${targetId}/credentials/${credentialId}`);\n  }\n};\n\n// Migration API\nexport const migrationApi = {\n  migrateSchema: async (): Promise<MigrationStatus> => {\n    const response: AxiosResponse<MigrationStatus> = await enhancedApi.post('/targets/migrate-schema');\n    return response.data;\n  }\n};\n\n// Health check\nexport const enhancedHealthApi = {\n  check: async (): Promise<any> => {\n    const response = await enhancedApi.get('/targets/health');\n    return response.data;\n  }\n};\n\nexport default enhancedApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}