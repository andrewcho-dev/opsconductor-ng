{"ast":null,"code":"// Permission checking utilities for RBAC\n\n// Define all available permissions in the system\nexport const PERMISSIONS = {\n  // User management\n  USERS_READ: 'users:read',\n  USERS_CREATE: 'users:create',\n  USERS_UPDATE: 'users:update',\n  USERS_DELETE: 'users:delete',\n  // Role management\n  ROLES_READ: 'roles:read',\n  ROLES_CREATE: 'roles:create',\n  ROLES_UPDATE: 'roles:update',\n  ROLES_DELETE: 'roles:delete',\n  // Job management\n  JOBS_READ: 'jobs:read',\n  JOBS_CREATE: 'jobs:create',\n  JOBS_UPDATE: 'jobs:update',\n  JOBS_DELETE: 'jobs:delete',\n  JOBS_EXECUTE: 'jobs:execute',\n  // Target management\n  TARGETS_READ: 'targets:read',\n  TARGETS_CREATE: 'targets:create',\n  TARGETS_UPDATE: 'targets:update',\n  TARGETS_DELETE: 'targets:delete',\n  // Execution monitoring\n  EXECUTIONS_READ: 'executions:read',\n  // Step library management\n  STEP_LIBRARIES_READ: 'step-libraries:read',\n  STEP_LIBRARIES_CREATE: 'step-libraries:create',\n  STEP_LIBRARIES_UPDATE: 'step-libraries:update',\n  STEP_LIBRARIES_DELETE: 'step-libraries:delete',\n  // Settings\n  SETTINGS_READ: 'settings:read',\n  SETTINGS_UPDATE: 'settings:update',\n  SMTP_CONFIG: 'smtp:config',\n  // Notifications\n  NOTIFICATIONS_READ: 'notifications:read',\n  NOTIFICATIONS_CREATE: 'notifications:create',\n  NOTIFICATIONS_UPDATE: 'notifications:update',\n  NOTIFICATIONS_DELETE: 'notifications:delete',\n  // System administration\n  SYSTEM_ADMIN: 'system:admin'\n};\n\n// Permission groups for easier role management\nexport const PERMISSION_GROUPS = {\n  USER_MANAGEMENT: [PERMISSIONS.USERS_READ, PERMISSIONS.USERS_CREATE, PERMISSIONS.USERS_UPDATE, PERMISSIONS.USERS_DELETE],\n  ROLE_MANAGEMENT: [PERMISSIONS.ROLES_READ, PERMISSIONS.ROLES_CREATE, PERMISSIONS.ROLES_UPDATE, PERMISSIONS.ROLES_DELETE],\n  JOB_MANAGEMENT: [PERMISSIONS.JOBS_READ, PERMISSIONS.JOBS_CREATE, PERMISSIONS.JOBS_UPDATE, PERMISSIONS.JOBS_DELETE, PERMISSIONS.JOBS_EXECUTE],\n  TARGET_MANAGEMENT: [PERMISSIONS.TARGETS_READ, PERMISSIONS.TARGETS_CREATE, PERMISSIONS.TARGETS_UPDATE, PERMISSIONS.TARGETS_DELETE],\n  STEP_LIBRARY_MANAGEMENT: [PERMISSIONS.STEP_LIBRARIES_READ, PERMISSIONS.STEP_LIBRARIES_CREATE, PERMISSIONS.STEP_LIBRARIES_UPDATE, PERMISSIONS.STEP_LIBRARIES_DELETE],\n  SETTINGS_MANAGEMENT: [PERMISSIONS.SETTINGS_READ, PERMISSIONS.SETTINGS_UPDATE, PERMISSIONS.SMTP_CONFIG],\n  NOTIFICATION_MANAGEMENT: [PERMISSIONS.NOTIFICATIONS_READ, PERMISSIONS.NOTIFICATIONS_CREATE, PERMISSIONS.NOTIFICATIONS_UPDATE, PERMISSIONS.NOTIFICATIONS_DELETE]\n};\n\n/**\n * Check if user has a specific permission\n */\nexport const hasPermission = (user, permission) => {\n  if (!user || !user.permissions) {\n    return false;\n  }\n\n  // Admin wildcard permission grants everything\n  if (user.permissions.includes('*')) {\n    return true;\n  }\n  return user.permissions.includes(permission);\n};\n\n/**\n * Check if user has any of the specified permissions\n */\nexport const hasAnyPermission = (user, permissions) => {\n  if (!user || !user.permissions) {\n    return false;\n  }\n\n  // Admin wildcard permission grants everything\n  if (user.permissions.includes('*')) {\n    return true;\n  }\n  return permissions.some(permission => user.permissions.includes(permission));\n};\n\n/**\n * Check if user has all of the specified permissions\n */\nexport const hasAllPermissions = (user, permissions) => {\n  if (!user || !user.permissions) {\n    return false;\n  }\n\n  // Admin wildcard permission grants everything\n  if (user.permissions.includes('*')) {\n    return true;\n  }\n  return permissions.every(permission => user.permissions.includes(permission));\n};\n\n/**\n * Check if user has a specific role\n */\nexport const hasRole = (user, role) => {\n  if (!user) {\n    return false;\n  }\n  return user.role === role;\n};\n\n/**\n * Check if user has any of the specified roles\n */\nexport const hasAnyRole = (user, roles) => {\n  if (!user) {\n    return false;\n  }\n  return roles.includes(user.role);\n};\n\n/**\n * Check if user is admin (has admin role or wildcard permission)\n */\nexport const isAdmin = user => {\n  if (!user) {\n    return false;\n  }\n  return user.role === 'admin' || user.permissions && user.permissions.includes('*');\n};\n\n/**\n * Get user's display name\n */\nexport const getUserDisplayName = user => {\n  if (!user) {\n    return 'Unknown User';\n  }\n  if (user.first_name && user.last_name) {\n    return `${user.first_name} ${user.last_name}`;\n  }\n  if (user.first_name) {\n    return user.first_name;\n  }\n  return user.username;\n};\n\n/**\n * Get user's role display name\n */\nexport const getRoleDisplayName = role => {\n  const roleNames = {\n    admin: 'Administrator',\n    manager: 'Manager',\n    operator: 'Operator',\n    developer: 'Developer',\n    viewer: 'Viewer'\n  };\n  return roleNames[role] || role.charAt(0).toUpperCase() + role.slice(1);\n};","map":{"version":3,"names":["PERMISSIONS","USERS_READ","USERS_CREATE","USERS_UPDATE","USERS_DELETE","ROLES_READ","ROLES_CREATE","ROLES_UPDATE","ROLES_DELETE","JOBS_READ","JOBS_CREATE","JOBS_UPDATE","JOBS_DELETE","JOBS_EXECUTE","TARGETS_READ","TARGETS_CREATE","TARGETS_UPDATE","TARGETS_DELETE","EXECUTIONS_READ","STEP_LIBRARIES_READ","STEP_LIBRARIES_CREATE","STEP_LIBRARIES_UPDATE","STEP_LIBRARIES_DELETE","SETTINGS_READ","SETTINGS_UPDATE","SMTP_CONFIG","NOTIFICATIONS_READ","NOTIFICATIONS_CREATE","NOTIFICATIONS_UPDATE","NOTIFICATIONS_DELETE","SYSTEM_ADMIN","PERMISSION_GROUPS","USER_MANAGEMENT","ROLE_MANAGEMENT","JOB_MANAGEMENT","TARGET_MANAGEMENT","STEP_LIBRARY_MANAGEMENT","SETTINGS_MANAGEMENT","NOTIFICATION_MANAGEMENT","hasPermission","user","permission","permissions","includes","hasAnyPermission","some","hasAllPermissions","every","hasRole","role","hasAnyRole","roles","isAdmin","getUserDisplayName","first_name","last_name","username","getRoleDisplayName","roleNames","admin","manager","operator","developer","viewer","charAt","toUpperCase","slice"],"sources":["/app/src/utils/permissions.ts"],"sourcesContent":["// Permission checking utilities for RBAC\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  role: string;\n  permissions: string[];\n  first_name?: string;\n  last_name?: string;\n}\n\n// Define all available permissions in the system\nexport const PERMISSIONS = {\n  // User management\n  USERS_READ: 'users:read',\n  USERS_CREATE: 'users:create',\n  USERS_UPDATE: 'users:update',\n  USERS_DELETE: 'users:delete',\n  \n  // Role management\n  ROLES_READ: 'roles:read',\n  ROLES_CREATE: 'roles:create',\n  ROLES_UPDATE: 'roles:update',\n  ROLES_DELETE: 'roles:delete',\n  \n  // Job management\n  JOBS_READ: 'jobs:read',\n  JOBS_CREATE: 'jobs:create',\n  JOBS_UPDATE: 'jobs:update',\n  JOBS_DELETE: 'jobs:delete',\n  JOBS_EXECUTE: 'jobs:execute',\n  \n  // Target management\n  TARGETS_READ: 'targets:read',\n  TARGETS_CREATE: 'targets:create',\n  TARGETS_UPDATE: 'targets:update',\n  TARGETS_DELETE: 'targets:delete',\n  \n  // Execution monitoring\n  EXECUTIONS_READ: 'executions:read',\n  \n  // Step library management\n  STEP_LIBRARIES_READ: 'step-libraries:read',\n  STEP_LIBRARIES_CREATE: 'step-libraries:create',\n  STEP_LIBRARIES_UPDATE: 'step-libraries:update',\n  STEP_LIBRARIES_DELETE: 'step-libraries:delete',\n  \n  // Settings\n  SETTINGS_READ: 'settings:read',\n  SETTINGS_UPDATE: 'settings:update',\n  SMTP_CONFIG: 'smtp:config',\n  \n  // Notifications\n  NOTIFICATIONS_READ: 'notifications:read',\n  NOTIFICATIONS_CREATE: 'notifications:create',\n  NOTIFICATIONS_UPDATE: 'notifications:update',\n  NOTIFICATIONS_DELETE: 'notifications:delete',\n  \n  // System administration\n  SYSTEM_ADMIN: 'system:admin',\n} as const;\n\n// Permission groups for easier role management\nexport const PERMISSION_GROUPS = {\n  USER_MANAGEMENT: [\n    PERMISSIONS.USERS_READ,\n    PERMISSIONS.USERS_CREATE,\n    PERMISSIONS.USERS_UPDATE,\n    PERMISSIONS.USERS_DELETE,\n  ],\n  ROLE_MANAGEMENT: [\n    PERMISSIONS.ROLES_READ,\n    PERMISSIONS.ROLES_CREATE,\n    PERMISSIONS.ROLES_UPDATE,\n    PERMISSIONS.ROLES_DELETE,\n  ],\n  JOB_MANAGEMENT: [\n    PERMISSIONS.JOBS_READ,\n    PERMISSIONS.JOBS_CREATE,\n    PERMISSIONS.JOBS_UPDATE,\n    PERMISSIONS.JOBS_DELETE,\n    PERMISSIONS.JOBS_EXECUTE,\n  ],\n  TARGET_MANAGEMENT: [\n    PERMISSIONS.TARGETS_READ,\n    PERMISSIONS.TARGETS_CREATE,\n    PERMISSIONS.TARGETS_UPDATE,\n    PERMISSIONS.TARGETS_DELETE,\n  ],\n  STEP_LIBRARY_MANAGEMENT: [\n    PERMISSIONS.STEP_LIBRARIES_READ,\n    PERMISSIONS.STEP_LIBRARIES_CREATE,\n    PERMISSIONS.STEP_LIBRARIES_UPDATE,\n    PERMISSIONS.STEP_LIBRARIES_DELETE,\n  ],\n  SETTINGS_MANAGEMENT: [\n    PERMISSIONS.SETTINGS_READ,\n    PERMISSIONS.SETTINGS_UPDATE,\n    PERMISSIONS.SMTP_CONFIG,\n  ],\n  NOTIFICATION_MANAGEMENT: [\n    PERMISSIONS.NOTIFICATIONS_READ,\n    PERMISSIONS.NOTIFICATIONS_CREATE,\n    PERMISSIONS.NOTIFICATIONS_UPDATE,\n    PERMISSIONS.NOTIFICATIONS_DELETE,\n  ],\n} as const;\n\n/**\n * Check if user has a specific permission\n */\nexport const hasPermission = (user: User | null, permission: string): boolean => {\n  if (!user || !user.permissions) {\n    return false;\n  }\n  \n  // Admin wildcard permission grants everything\n  if (user.permissions.includes('*')) {\n    return true;\n  }\n  \n  return user.permissions.includes(permission);\n};\n\n/**\n * Check if user has any of the specified permissions\n */\nexport const hasAnyPermission = (user: User | null, permissions: string[]): boolean => {\n  if (!user || !user.permissions) {\n    return false;\n  }\n  \n  // Admin wildcard permission grants everything\n  if (user.permissions.includes('*')) {\n    return true;\n  }\n  \n  return permissions.some(permission => user.permissions.includes(permission));\n};\n\n/**\n * Check if user has all of the specified permissions\n */\nexport const hasAllPermissions = (user: User | null, permissions: string[]): boolean => {\n  if (!user || !user.permissions) {\n    return false;\n  }\n  \n  // Admin wildcard permission grants everything\n  if (user.permissions.includes('*')) {\n    return true;\n  }\n  \n  return permissions.every(permission => user.permissions.includes(permission));\n};\n\n/**\n * Check if user has a specific role\n */\nexport const hasRole = (user: User | null, role: string): boolean => {\n  if (!user) {\n    return false;\n  }\n  \n  return user.role === role;\n};\n\n/**\n * Check if user has any of the specified roles\n */\nexport const hasAnyRole = (user: User | null, roles: string[]): boolean => {\n  if (!user) {\n    return false;\n  }\n  \n  return roles.includes(user.role);\n};\n\n/**\n * Check if user is admin (has admin role or wildcard permission)\n */\nexport const isAdmin = (user: User | null): boolean => {\n  if (!user) {\n    return false;\n  }\n  \n  return user.role === 'admin' || (user.permissions && user.permissions.includes('*'));\n};\n\n/**\n * Get user's display name\n */\nexport const getUserDisplayName = (user: User | null): string => {\n  if (!user) {\n    return 'Unknown User';\n  }\n  \n  if (user.first_name && user.last_name) {\n    return `${user.first_name} ${user.last_name}`;\n  }\n  \n  if (user.first_name) {\n    return user.first_name;\n  }\n  \n  return user.username;\n};\n\n/**\n * Get user's role display name\n */\nexport const getRoleDisplayName = (role: string): string => {\n  const roleNames: Record<string, string> = {\n    admin: 'Administrator',\n    manager: 'Manager',\n    operator: 'Operator',\n    developer: 'Developer',\n    viewer: 'Viewer',\n  };\n  \n  return roleNames[role] || role.charAt(0).toUpperCase() + role.slice(1);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}