version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: opsconductor-postgres
    environment:
      POSTGRES_DB: opsconductor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-schema.sql:/docker-entrypoint-initdb.d/init-schema.sql
    ports:
      - "5432:5432"
    networks:
      - opsconductor-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Auth Service
  auth-service:
    build: ./auth-service
    container_name: opsconductor-auth
    ports:
      - "3001:3001"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET_KEY: your-secret-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./auth-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # User Service
  user-service:
    build: ./user-service
    container_name: opsconductor-users
    ports:
      - "3002:3002"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./user-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Credentials Service
  credentials-service:
    build: ./credentials-service
    container_name: opsconductor-credentials
    ports:
      - "3004:3004"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
      ENCRYPTION_KEY: your-encryption-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./credentials-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Targets Service
  targets-service:
    build: ./targets-service
    container_name: opsconductor-targets
    ports:
      - "3005:3005"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
      AUTH_SERVICE_URL: http://auth-service:3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./targets-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Jobs Service
  jobs-service:
    build: ./jobs-service
    container_name: opsconductor-jobs
    ports:
      - "3006:3006"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./jobs-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Executor Service
  executor-service:
    build: ./executor-service
    container_name: opsconductor-executor
    ports:
      - "3007:3007"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./executor-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Scheduler Service
  scheduler-service:
    build: ./scheduler-service
    container_name: opsconductor-scheduler
    ports:
      - "3008:3008"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./scheduler-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Notification Service
  notification-service:
    build: ./notification-service
    container_name: opsconductor-notification
    ports:
      - "3009:3009"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: your-email@gmail.com
      SMTP_PASSWORD: your-app-password
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./notification-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Discovery Service
  discovery-service:
    build: ./discovery-service
    container_name: opsconductor-discovery
    ports:
      - "3010:3010"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET_KEY: your-secret-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./discovery-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Step Libraries Service
  step-libraries-service:
    build: ./step-libraries-service
    container_name: opsconductor-step-libraries
    ports:
      - "3011:3011"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: opsconductor
      DB_USER: postgres
      DB_PASSWORD: postgres123
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - opsconductor-net
    volumes:
      - ./step-libraries-service:/app
      - step_libraries_data:/app/libraries
      - step_libraries_cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build: ./frontend
    container_name: opsconductor-frontend
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    ports:
      - "3000:3000"
    networks:
      - opsconductor-net
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
    depends_on:
      - auth-service
      - user-service
      - credentials-service
      - targets-service
      - jobs-service
      - executor-service
      - scheduler-service
      - notification-service
      - discovery-service
      - step-libraries-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build: ./nginx
    container_name: opsconductor-nginx
    ports:
      - "80:80"      # HTTP (redirects to HTTPS)
      - "443:443"    # HTTPS
    depends_on:
      - frontend
      - auth-service
      - user-service
      - credentials-service
      - targets-service
      - jobs-service
      - executor-service
      - scheduler-service
      - notification-service
      - discovery-service
      - step-libraries-service
    networks:
      - opsconductor-net
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_ssl:/etc/nginx/ssl  # Fallback for generated certs
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  opsconductor-net:
    driver: bridge

volumes:
  postgres_data:
  nginx_ssl:
  step_libraries_data:
  step_libraries_cache: