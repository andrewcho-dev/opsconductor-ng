networks:
  opsconductor:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

volumes:
  postgres_data:
  redis_data:
  ollama_models:

services:
  # Core Infrastructure
  postgres:
    image: pgvector/pgvector:pg17
    container_name: opsconductor-postgres
    environment:
      POSTGRES_DB: opsconductor
      POSTGRES_USER: opsconductor
      POSTGRES_PASSWORD: opsconductor_secure_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-schema.sql:/docker-entrypoint-initdb.d/init-schema.sql
    networks:
      opsconductor:
        ipv4_address: 172.28.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opsconductor"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: opsconductor-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      opsconductor:
        ipv4_address: 172.28.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI Infrastructure
  ollama:
    image: ollama/ollama:0.11.11
    container_name: opsconductor-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    networks:
      opsconductor:
        ipv4_address: 172.28.0.12
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=12
      - OLLAMA_MAX_LOADED_MODELS=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: opsconductor-kong
    ports:
      - "8008:8000"
      - "8001:8001"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    networks:
      opsconductor:
        ipv4_address: 172.28.0.20
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Keycloak Identity Provider
  keycloak:
    image: keycloak/keycloak:22.0.1
    container_name: opsconductor-keycloak
    ports:
      - "8080:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://postgres:5432/opsconductor"
      KC_DB_USERNAME: opsconductor
      KC_DB_PASSWORD: opsconductor_secure_2024
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: OpsConductor2024!
    command: 
      - start
      - --import-realm
    volumes:
      - ./keycloak/opsconductor-realm.json:/opt/keycloak/data/import/opsconductor-realm.json:ro
    networks:
      opsconductor:
        ipv4_address: 172.28.0.21
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080 && echo -e 'GET /realms/master HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && grep -q 'HTTP/1.1 200' <&3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # NEW 4-Stage AI Pipeline - NEWIDEA.MD Architecture
  ai-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: opsconductor-ai-pipeline
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_MODEL: qwen2.5:7b-instruct-q4_k_m
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: opsconductor
      POSTGRES_USER: opsconductor
      POSTGRES_PASSWORD: opsconductor_secure_2024
      AUTOMATION_SERVICE_URL: http://automation-service:8005
      ASSET_SERVICE_URL: http://asset-service:8002
      NETWORK_SERVICE_URL: http://network-service:8003
      COMMUNICATION_SERVICE_URL: http://communication-service:8004
    ports:
      - "8006:8006"
    networks:
      opsconductor:
        ipv4_address: 172.28.0.30
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Specialized Services
  automation-service:
    build:
      context: ./automation-service
      dockerfile: Dockerfile.clean
    container_name: opsconductor-automation
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8005:8005"
    networks:
      opsconductor:
        ipv4_address: 172.28.0.31
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  asset-service:
    build:
      context: .
      dockerfile: asset-service/Dockerfile
    container_name: opsconductor-assets
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8002:8002"
    networks:
      opsconductor:
        ipv4_address: 172.28.0.32
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  network-service:
    build:
      context: .
      dockerfile: network-analyzer-service/Dockerfile
    container_name: opsconductor-network
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8003:8003"
    networks:
      opsconductor:
        ipv4_address: 172.28.0.33
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  communication-service:
    build:
      context: .
      dockerfile: communication-service/Dockerfile
    container_name: opsconductor-communication
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8004:8004"
    networks:
      opsconductor:
        ipv4_address: 172.28.0.34
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: opsconductor-frontend
    ports:
      - "8000:8000"
    networks:
      opsconductor:
        ipv4_address: 172.28.0.40
    environment:
      - REACT_APP_API_URL=http://192.168.10.50:8008
    depends_on:
      - ai-pipeline