networks:
  opsconductor:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  vllm_cache:

services:
  # Core Infrastructure
  postgres:
    image: postgres:17-alpine
    container_name: opsconductor-postgres
    ports:
      - "5432:5432"  # Expose for local testing
    environment:
      POSTGRES_DB: opsconductor
      POSTGRES_USER: opsconductor
      POSTGRES_PASSWORD: opsconductor_secure_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-schema.sql:/docker-entrypoint-initdb.d/init-schema.sql
    networks:
      - opsconductor
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opsconductor"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: opsconductor-redis
    ports:
      - "6379:6379"  # Expose for local testing
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - opsconductor
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI Infrastructure - vLLM (replacing Ollama)
  vllm:
    build:
      context: .
      dockerfile: Dockerfile.vllm
    container_name: opsconductor-vllm
    ports:
      - "8000:8000"
    volumes:
      - vllm_cache:/root/.cache/huggingface
    networks:
      - opsconductor
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - VLLM_ALLOW_LONG_MAX_MODEL_LEN=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: opsconductor-kong
    ports:
      - "3000:8000"     # Main API Gateway port
      - "8888:8001"     # Kong Admin API
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    networks:
      - opsconductor
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Keycloak Identity Provider
  keycloak:
    image: keycloak/keycloak:22.0.1
    container_name: opsconductor-keycloak
    ports:
      - "8090:8080"   # Keycloak admin and auth port
    environment:
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://postgres:5432/opsconductor"
      KC_DB_USERNAME: opsconductor
      KC_DB_PASSWORD: opsconductor_secure_2024
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: OpsConductor2024!
    command: 
      - start
      - --import-realm
    volumes:
      - ./keycloak/opsconductor-realm.json:/opt/keycloak/data/import/opsconductor-realm.json:ro
    networks:
      - opsconductor
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080 && echo -e 'GET /realms/master HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && grep -q 'HTTP/1.1 200' <&3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # NEW 4-Stage AI Pipeline - NEWIDEA.MD Architecture
  ai-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: opsconductor-ai-pipeline
    environment:
      LLM_PROVIDER: vllm
      LLM_BASE_URL: http://vllm:8000/v1
      LLM_MODEL: Qwen/Qwen2.5-14B-Instruct-AWQ
      LLM_TIMEOUT: 60
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      AUTOMATION_SERVICE_URL: http://automation-service:3003
      ASSET_SERVICE_URL: http://asset-service:3002
      NETWORK_SERVICE_URL: http://network-service:3006
      COMMUNICATION_SERVICE_URL: http://communication-service:3004
    ports:
      - "3005:8000"
    volumes:
      # DEVELOPMENT VOLUME MOUNTS - Live file changes for 4-stage pipeline
      - ./main.py:/app/main.py
      - ./pipeline:/app/pipeline
      - ./llm:/app/llm
      - ./capabilities:/app/capabilities
      - ./execution:/app/execution
      - ./api:/app/api
      - ./shared:/app/shared
      - ./tests:/app/tests
    networks:
      - opsconductor
    depends_on:
      redis:
        condition: service_healthy
      vllm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Specialized Services
  automation-service:
    build:
      context: ./automation-service
      dockerfile: Dockerfile.clean
    container_name: opsconductor-automation
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8010:3003"
    volumes:
      # DEVELOPMENT VOLUME MOUNTS - Live file changes
      - ./automation-service/main_clean.py:/app/main_clean.py
      - ./automation-service/libraries:/app/libraries
      - ./shared:/app/shared
    networks:
      - opsconductor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  asset-service:
    build:
      context: ./asset-service
      dockerfile: Dockerfile
    container_name: opsconductor-assets
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8002:3002"
    volumes:
      # DEVELOPMENT VOLUME MOUNTS - Live file changes
      - ./asset-service/main.py:/app/main.py
      - ./asset-service/data:/app/data
      - ./shared:/app/shared
    networks:
      - opsconductor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  network-service:
    build:
      context: ./network-analyzer-service
      dockerfile: Dockerfile
    container_name: opsconductor-network
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8003:3006"
    volumes:
      # DEVELOPMENT VOLUME MOUNTS - Live file changes
      - ./network-analyzer-service/main.py:/app/main.py
      - ./network-analyzer-service/agents:/app/agents
      - ./network-analyzer-service/analyzers:/app/analyzers
      - ./network-analyzer-service/models:/app/models
      - ./network-analyzer-service/utils:/app/utils
      - ./shared:/app/shared
    networks:
      - opsconductor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  communication-service:
    build:
      context: ./communication-service
      dockerfile: Dockerfile
    container_name: opsconductor-communication
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://opsconductor:opsconductor_secure_2024@postgres:5432/opsconductor
      REDIS_URL: redis://redis:6379
    ports:
      - "8004:3004"
    volumes:
      # DEVELOPMENT VOLUME MOUNTS - Live file changes
      - ./communication-service/main.py:/app/main.py
      - ./shared:/app/shared
    networks:
      - opsconductor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Development with live reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: opsconductor-frontend
    ports:
      - "3100:3000"  # Expose on 3100 to avoid Kong conflict
    volumes:
      # DEVELOPMENT VOLUME MOUNTS - Live file changes for React development
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/.env:/app/.env
      - /app/node_modules  # Preserve node_modules from container
    networks:
      - opsconductor
    environment:
      - CHOKIDAR_USEPOLLING=true  # Enable hot reload in Docker
      - REACT_APP_API_URL=http://localhost:3000  # Use Kong gateway
    depends_on:
      - ai-pipeline