# --- SELECTOR ENDPOINT HOTFIX v2 ---
from typing import Optional, List, Tuple
import asyncio, time, socket
from fastapi import APIRouter, Request, Query
from fastapi.responses import JSONResponse

# ---- reliability: metrics + LKG cache ----
_METRICS = {
    "selector_requests_total": 0,
    "selector_failures_total": 0,
    "selector_cache_hits_total": 0,
}
_LKG_TTL_SEC = 600  # 10 minutes
_LKG = {}  # type: dict[Tuple[str,int,Tuple[str,...]], Tuple[float, dict]]
_LKG_LOCK = asyncio.Lock()
_HOTFIX_VERSION = "v2"

try:
    from selector.dao import select_topk
except Exception as e:
    select_topk = None
    print("[selector] import error:", e)

_selector_router = APIRouter()

def _norm_plats(plats: List[str]) -> Tuple[str, ...]:
    return tuple(sorted([p.strip().lower() for p in plats if p and p.strip()]))

def _cache_key(query: str, k: int, plats: List[str]) -> Tuple[str, int, Tuple[str, ...]]:
    return (query.strip().lower(), int(k), _norm_plats(plats))

async def _lkg_get(key):
    async with _LKG_LOCK:
        item = _LKG.get(key)
        if not item:
            return None
        exp, payload = item
        if exp >= time.time():
            return payload
        _LKG.pop(key, None)
        return None

async def _lkg_put(key, payload: dict):
    async with _LKG_LOCK:
        _LKG[key] = (time.time() + _LKG_TTL_SEC, dict(payload))

@_selector_router.get("/api/selector/search")
async def _selector_search(
    request: Request,
    query: str = Query(..., min_length=1),
    k: int = Query(5, ge=1, le=20),
    platform: Optional[str] = None,
):
    _METRICS["selector_requests_total"] += 1
    plats: List[str] = [p.strip() for p in platform.split(",")] if platform else []
    key = _cache_key(query, k, plats)
    start = time.perf_counter()

    # Fast LKG path
    cached = await _lkg_get(key)
    if cached:
        _METRICS["selector_cache_hits_total"] += 1
        out = dict(cached); out["from_cache"] = True
        return out

    # find pool
    app = request.app
    pool = (
        getattr(getattr(app, "state", app), "db", None)
        or getattr(getattr(app, "state", app), "db_pool", None)
        or getattr(app, "db_pool", None)
    )
    if pool is None:
        _METRICS["selector_failures_total"] += 1
        # serve freshest cached if any
        async with _LKG_LOCK:
            fresh = [(exp, payload) for (exp, payload) in _LKG.values() if exp >= time.time()]
        if fresh:
            return dict(max(fresh, key=lambda t: t[0])[1], from_cache=True)
        return JSONResponse({"error": "DB pool not found on app.state"}, status_code=503)

    # wrap BOTH acquire and query in one timeout
    async def _query_db():
        async with pool.acquire() as conn:
            return await select_topk(conn, query, plats, k)

    try:
        rows = await asyncio.wait_for(_query_db(), timeout=1.0)
        out = {"query": query, "k": k, "platform": plats, "results": rows, "from_cache": False}
        await _lkg_put(key, out)
        return out

    except (asyncio.TimeoutError, OSError, socket.gaierror) as e:
        _METRICS["selector_failures_total"] += 1
        cached = await _lkg_get(key)
        if cached:
            return dict(cached, from_cache=True)
        return JSONResponse({"error": "selector timeout/unavailable", "reason": str(e)[:200]}, status_code=503)

    except Exception as e:
        _METRICS["selector_failures_total"] += 1
        cached = await _lkg_get(key)
        if cached:
            return dict(cached, from_cache=True)
        return JSONResponse({"error": "selector unavailable", "reason": str(e)[:200]}, status_code=503)

@_selector_router.get("/metrics-lite")
async def _metrics_lite():
    now = time.time()
    try:
        async with _LKG_LOCK:
            size = sum(1 for exp, _ in _LKG.values() if exp >= now)
    except Exception:
        size = len(_LKG)
    m = dict(_METRICS)
    m["selector_cache_entries"] = size
    m["selector_cache_ttl_sec"] = _LKG_TTL_SEC
    m["selector_hotfix_version"] = _HOTFIX_VERSION
    return m

def _mount_selector(candidate):
    if candidate is None:
        return False
    app_obj = getattr(candidate, "app", None) if hasattr(candidate, "app") else candidate
    if hasattr(app_obj, "include_router"):
        app_obj.include_router(_selector_router)
        print("[selector] route(s) mounted on", getattr(app_obj, "title", "app"))
        return True
    return False

_mounted = False
for _name in ("service", "app", "application", "api"):
    _mounted |= _mount_selector(globals().get(_name))
if not _mounted:
    print("[selector] WARNING: failed to mount; ensure this block is at file end after app creation")
# --- END SELECTOR ENDPOINT HOTFIX v2 ---



